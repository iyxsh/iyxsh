#ifndef INCLUDED_OOO_VBA_EXCEL_XPANE_HDL
#define INCLUDED_OOO_VBA_EXCEL_XPANE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
namespace ooo { namespace vba { namespace excel { class XRange; } } }
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba { namespace excel {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPane : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPane() = default;
    XPane(XPane const &) = default;
    XPane(XPane &&) = default;
    XPane & operator =(XPane const &) = default;
    XPane & operator =(XPane &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getScrollColumn() = 0;
    virtual void SAL_CALL setScrollColumn( ::sal_Int32 _scrollcolumn ) = 0;
    virtual ::sal_Int32 SAL_CALL getScrollRow() = 0;
    virtual void SAL_CALL setScrollRow( ::sal_Int32 _scrollrow ) = 0;
    virtual ::css::uno::Reference< ::ooo::vba::excel::XRange > SAL_CALL getVisibleRange() = 0;

    // Methods
    virtual void SAL_CALL SmallScroll( const ::css::uno::Any& Down, const ::css::uno::Any& Up, const ::css::uno::Any& ToRight, const ::css::uno::Any& ToLeft ) = 0;
    virtual void SAL_CALL LargeScroll( const ::css::uno::Any& Down, const ::css::uno::Any& Up, const ::css::uno::Any& ToRight, const ::css::uno::Any& ToLeft ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPane() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::excel::XPane const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::excel::XPane > *);

#endif
