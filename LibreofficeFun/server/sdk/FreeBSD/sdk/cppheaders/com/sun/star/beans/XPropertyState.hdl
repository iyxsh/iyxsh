#ifndef INCLUDED_COM_SUN_STAR_BEANS_XPROPERTYSTATE_HDL
#define INCLUDED_COM_SUN_STAR_BEANS_XPROPERTYSTATE_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyState.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace beans {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPropertyState : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPropertyState() = default;
    XPropertyState(XPropertyState const &) = default;
    XPropertyState(XPropertyState &&) = default;
    XPropertyState & operator =(XPropertyState const &) = default;
    XPropertyState & operator =(XPropertyState &&) = default;
#endif


    // Methods
    virtual ::css::beans::PropertyState SAL_CALL getPropertyState( const ::rtl::OUString& PropertyName ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyState > SAL_CALL getPropertyStates( const ::css::uno::Sequence< ::rtl::OUString >& aPropertyName ) = 0;
    virtual void SAL_CALL setPropertyToDefault( const ::rtl::OUString& PropertyName ) = 0;
    virtual ::css::uno::Any SAL_CALL getPropertyDefault( const ::rtl::OUString& aPropertyName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPropertyState() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::beans::XPropertyState const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::beans::XPropertyState > *);

#endif
