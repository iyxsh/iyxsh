#ifndef INCLUDED_COM_SUN_STAR_XML_SAX_SAXPARSEEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_XML_SAX_SAXPARSEEXCEPTION_HDL

#include "sal/config.h"

#include "com/sun/star/xml/sax/SAXException.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace sax {

class CPPU_GCC_DLLPUBLIC_EXPORT SAL_WARN_UNUSED SAXParseException : public ::css::xml::sax::SAXException
{
public:
    inline CPPU_GCC_DLLPRIVATE SAXParseException(
#if defined LIBO_USE_SOURCE_LOCATION
    LIBO_USE_SOURCE_LOCATION::source_location location = LIBO_USE_SOURCE_LOCATION::source_location::current()
#endif

    );
    inline CPPU_GCC_DLLPRIVATE SAXParseException(const ::rtl::OUString& Message_, const ::css::uno::Reference< ::css::uno::XInterface >& Context_, const ::css::uno::Any& WrappedException_, const ::rtl::OUString& PublicId_, const ::rtl::OUString& SystemId_, const ::sal_Int32& LineNumber_, const ::sal_Int32& ColumnNumber_
#if defined LIBO_USE_SOURCE_LOCATION
, LIBO_USE_SOURCE_LOCATION::source_location location = LIBO_USE_SOURCE_LOCATION::source_location::current()
#endif
    );

#if !defined LIBO_INTERNAL_ONLY
    inline CPPU_GCC_DLLPRIVATE SAXParseException(SAXParseException const &);

    inline CPPU_GCC_DLLPRIVATE ~SAXParseException();

    inline CPPU_GCC_DLLPRIVATE SAXParseException & operator =(SAXParseException const &);
#endif

    ::rtl::OUString PublicId CPPU_GCC3_ALIGN( ::css::xml::sax::SAXException );
    ::rtl::OUString SystemId;
    ::sal_Int32 LineNumber;
    ::sal_Int32 ColumnNumber;
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::sax::SAXParseException const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::xml::sax::SAXParseException *);

#endif
