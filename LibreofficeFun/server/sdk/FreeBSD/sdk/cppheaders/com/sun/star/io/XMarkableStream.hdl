#ifndef INCLUDED_COM_SUN_STAR_IO_XMARKABLESTREAM_HDL
#define INCLUDED_COM_SUN_STAR_IO_XMARKABLESTREAM_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace io {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMarkableStream : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMarkableStream() = default;
    XMarkableStream(XMarkableStream const &) = default;
    XMarkableStream(XMarkableStream &&) = default;
    XMarkableStream & operator =(XMarkableStream const &) = default;
    XMarkableStream & operator =(XMarkableStream &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL createMark() = 0;
    virtual void SAL_CALL deleteMark( ::sal_Int32 Mark ) = 0;
    virtual void SAL_CALL jumpToMark( ::sal_Int32 nMark ) = 0;
    virtual void SAL_CALL jumpToFurthest() = 0;
    virtual ::sal_Int32 SAL_CALL offsetToMark( ::sal_Int32 nMark ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMarkableStream() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::io::XMarkableStream const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::io::XMarkableStream > *);

#endif
