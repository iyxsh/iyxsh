#ifndef INCLUDED_COM_SUN_STAR_ANIMATIONS_XANIMATE_HDL
#define INCLUDED_COM_SUN_STAR_ANIMATIONS_XANIMATE_HDL

#include "sal/config.h"

#include "com/sun/star/animations/TimeFilterPair.hdl"
#include "com/sun/star/animations/XAnimationNode.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace animations {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAnimate : public ::css::animations::XAnimationNode
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAnimate() = default;
    XAnimate(XAnimate const &) = default;
    XAnimate(XAnimate &&) = default;
    XAnimate & operator =(XAnimate const &) = default;
    XAnimate & operator =(XAnimate &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Any SAL_CALL getTarget() = 0;
    virtual void SAL_CALL setTarget( const ::css::uno::Any& _target ) = 0;
    virtual ::sal_Int16 SAL_CALL getSubItem() = 0;
    virtual void SAL_CALL setSubItem( ::sal_Int16 _subitem ) = 0;
    virtual ::rtl::OUString SAL_CALL getAttributeName() = 0;
    virtual void SAL_CALL setAttributeName( const ::rtl::OUString& _attributename ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getValues() = 0;
    virtual void SAL_CALL setValues( const ::css::uno::Sequence< ::css::uno::Any >& _values ) = 0;
    virtual ::css::uno::Sequence< double > SAL_CALL getKeyTimes() = 0;
    virtual void SAL_CALL setKeyTimes( const ::css::uno::Sequence< double >& _keytimes ) = 0;
    virtual ::sal_Int16 SAL_CALL getValueType() = 0;
    virtual void SAL_CALL setValueType( ::sal_Int16 _valuetype ) = 0;
    virtual ::sal_Int16 SAL_CALL getCalcMode() = 0;
    virtual void SAL_CALL setCalcMode( ::sal_Int16 _calcmode ) = 0;
    virtual ::sal_Bool SAL_CALL getAccumulate() = 0;
    virtual void SAL_CALL setAccumulate( ::sal_Bool _accumulate ) = 0;
    virtual ::sal_Int16 SAL_CALL getAdditive() = 0;
    virtual void SAL_CALL setAdditive( ::sal_Int16 _additive ) = 0;
    virtual ::css::uno::Any SAL_CALL getFrom() = 0;
    virtual void SAL_CALL setFrom( const ::css::uno::Any& _from ) = 0;
    virtual ::css::uno::Any SAL_CALL getTo() = 0;
    virtual void SAL_CALL setTo( const ::css::uno::Any& _to ) = 0;
    virtual ::css::uno::Any SAL_CALL getBy() = 0;
    virtual void SAL_CALL setBy( const ::css::uno::Any& _by ) = 0;
    virtual ::css::uno::Sequence< ::css::animations::TimeFilterPair > SAL_CALL getTimeFilter() = 0;
    virtual void SAL_CALL setTimeFilter( const ::css::uno::Sequence< ::css::animations::TimeFilterPair >& _timefilter ) = 0;
    virtual ::rtl::OUString SAL_CALL getFormula() = 0;
    virtual void SAL_CALL setFormula( const ::rtl::OUString& _formula ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAnimate() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::animations::XAnimate const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::animations::XAnimate > *);

#endif
