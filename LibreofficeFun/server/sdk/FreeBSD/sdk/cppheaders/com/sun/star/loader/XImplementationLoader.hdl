#ifndef INCLUDED_COM_SUN_STAR_LOADER_XIMPLEMENTATIONLOADER_HDL
#define INCLUDED_COM_SUN_STAR_LOADER_XIMPLEMENTATIONLOADER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace registry { class XRegistryKey; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace loader {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XImplementationLoader : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XImplementationLoader() = default;
    XImplementationLoader(XImplementationLoader const &) = default;
    XImplementationLoader(XImplementationLoader &&) = default;
    XImplementationLoader & operator =(XImplementationLoader const &) = default;
    XImplementationLoader & operator =(XImplementationLoader &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::uno::XInterface > SAL_CALL activate( const ::rtl::OUString& implementationName, const ::rtl::OUString& implementationLoaderUrl, const ::rtl::OUString& locationUrl, const ::css::uno::Reference< ::css::registry::XRegistryKey >& xKey ) = 0;
    virtual ::sal_Bool SAL_CALL writeRegistryInfo( const ::css::uno::Reference< ::css::registry::XRegistryKey >& xKey, const ::rtl::OUString& implementationLoaderUrl, const ::rtl::OUString& locationUrl ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XImplementationLoader() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::loader::XImplementationLoader const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::loader::XImplementationLoader > *);

#endif
