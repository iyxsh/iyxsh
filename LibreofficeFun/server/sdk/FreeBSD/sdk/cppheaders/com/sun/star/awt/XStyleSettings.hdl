#ifndef INCLUDED_COM_SUN_STAR_AWT_XSTYLESETTINGS_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XSTYLESETTINGS_HDL

#include "sal/config.h"

#include "com/sun/star/awt/FontDescriptor.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XStyleChangeListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/Color.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStyleSettings : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStyleSettings() = default;
    XStyleSettings(XStyleSettings const &) = default;
    XStyleSettings(XStyleSettings &&) = default;
    XStyleSettings & operator =(XStyleSettings const &) = default;
    XStyleSettings & operator =(XStyleSettings &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getActiveBorderColor() = 0;
    virtual void SAL_CALL setActiveBorderColor( ::sal_Int32 _activebordercolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getActiveColor() = 0;
    virtual void SAL_CALL setActiveColor( ::sal_Int32 _activecolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getActiveTabColor() = 0;
    virtual void SAL_CALL setActiveTabColor( ::sal_Int32 _activetabcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getActiveTextColor() = 0;
    virtual void SAL_CALL setActiveTextColor( ::sal_Int32 _activetextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getButtonRolloverTextColor() = 0;
    virtual void SAL_CALL setButtonRolloverTextColor( ::sal_Int32 _buttonrollovertextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getButtonTextColor() = 0;
    virtual void SAL_CALL setButtonTextColor( ::sal_Int32 _buttontextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getCheckedColor() = 0;
    virtual void SAL_CALL setCheckedColor( ::sal_Int32 _checkedcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDarkShadowColor() = 0;
    virtual void SAL_CALL setDarkShadowColor( ::sal_Int32 _darkshadowcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDeactiveBorderColor() = 0;
    virtual void SAL_CALL setDeactiveBorderColor( ::sal_Int32 _deactivebordercolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDeactiveColor() = 0;
    virtual void SAL_CALL setDeactiveColor( ::sal_Int32 _deactivecolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDeactiveTextColor() = 0;
    virtual void SAL_CALL setDeactiveTextColor( ::sal_Int32 _deactivetextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDialogColor() = 0;
    virtual void SAL_CALL setDialogColor( ::sal_Int32 _dialogcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDialogTextColor() = 0;
    virtual void SAL_CALL setDialogTextColor( ::sal_Int32 _dialogtextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getDisableColor() = 0;
    virtual void SAL_CALL setDisableColor( ::sal_Int32 _disablecolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getFaceColor() = 0;
    virtual void SAL_CALL setFaceColor( ::sal_Int32 _facecolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getFaceGradientColor() = 0;
    virtual ::sal_Int32 SAL_CALL getFieldColor() = 0;
    virtual void SAL_CALL setFieldColor( ::sal_Int32 _fieldcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getFieldRolloverTextColor() = 0;
    virtual void SAL_CALL setFieldRolloverTextColor( ::sal_Int32 _fieldrollovertextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getFieldTextColor() = 0;
    virtual void SAL_CALL setFieldTextColor( ::sal_Int32 _fieldtextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getGroupTextColor() = 0;
    virtual void SAL_CALL setGroupTextColor( ::sal_Int32 _grouptextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getHelpColor() = 0;
    virtual void SAL_CALL setHelpColor( ::sal_Int32 _helpcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getHelpTextColor() = 0;
    virtual void SAL_CALL setHelpTextColor( ::sal_Int32 _helptextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getHighlightColor() = 0;
    virtual void SAL_CALL setHighlightColor( ::sal_Int32 _highlightcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getHighlightTextColor() = 0;
    virtual void SAL_CALL setHighlightTextColor( ::sal_Int32 _highlighttextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getInactiveTabColor() = 0;
    virtual void SAL_CALL setInactiveTabColor( ::sal_Int32 _inactivetabcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getLabelTextColor() = 0;
    virtual void SAL_CALL setLabelTextColor( ::sal_Int32 _labeltextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getLightColor() = 0;
    virtual void SAL_CALL setLightColor( ::sal_Int32 _lightcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuBarColor() = 0;
    virtual void SAL_CALL setMenuBarColor( ::sal_Int32 _menubarcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuBarTextColor() = 0;
    virtual void SAL_CALL setMenuBarTextColor( ::sal_Int32 _menubartextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuBorderColor() = 0;
    virtual void SAL_CALL setMenuBorderColor( ::sal_Int32 _menubordercolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuColor() = 0;
    virtual void SAL_CALL setMenuColor( ::sal_Int32 _menucolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuHighlightColor() = 0;
    virtual void SAL_CALL setMenuHighlightColor( ::sal_Int32 _menuhighlightcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuHighlightTextColor() = 0;
    virtual void SAL_CALL setMenuHighlightTextColor( ::sal_Int32 _menuhighlighttextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMenuTextColor() = 0;
    virtual void SAL_CALL setMenuTextColor( ::sal_Int32 _menutextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getMonoColor() = 0;
    virtual void SAL_CALL setMonoColor( ::sal_Int32 _monocolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getRadioCheckTextColor() = 0;
    virtual void SAL_CALL setRadioCheckTextColor( ::sal_Int32 _radiochecktextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getSeparatorColor() = 0;
    virtual ::sal_Int32 SAL_CALL getShadowColor() = 0;
    virtual void SAL_CALL setShadowColor( ::sal_Int32 _shadowcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getWindowColor() = 0;
    virtual void SAL_CALL setWindowColor( ::sal_Int32 _windowcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getWindowTextColor() = 0;
    virtual void SAL_CALL setWindowTextColor( ::sal_Int32 _windowtextcolor ) = 0;
    virtual ::sal_Int32 SAL_CALL getWorkspaceColor() = 0;
    virtual void SAL_CALL setWorkspaceColor( ::sal_Int32 _workspacecolor ) = 0;
    virtual ::sal_Bool SAL_CALL getHighContrastMode() = 0;
    virtual void SAL_CALL setHighContrastMode( ::sal_Bool _highcontrastmode ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getApplicationFont() = 0;
    virtual void SAL_CALL setApplicationFont( const ::css::awt::FontDescriptor& _applicationfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getHelpFont() = 0;
    virtual void SAL_CALL setHelpFont( const ::css::awt::FontDescriptor& _helpfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getTitleFont() = 0;
    virtual void SAL_CALL setTitleFont( const ::css::awt::FontDescriptor& _titlefont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getFloatTitleFont() = 0;
    virtual void SAL_CALL setFloatTitleFont( const ::css::awt::FontDescriptor& _floattitlefont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getMenuFont() = 0;
    virtual void SAL_CALL setMenuFont( const ::css::awt::FontDescriptor& _menufont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getToolFont() = 0;
    virtual void SAL_CALL setToolFont( const ::css::awt::FontDescriptor& _toolfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getGroupFont() = 0;
    virtual void SAL_CALL setGroupFont( const ::css::awt::FontDescriptor& _groupfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getLabelFont() = 0;
    virtual void SAL_CALL setLabelFont( const ::css::awt::FontDescriptor& _labelfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getRadioCheckFont() = 0;
    virtual void SAL_CALL setRadioCheckFont( const ::css::awt::FontDescriptor& _radiocheckfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getPushButtonFont() = 0;
    virtual void SAL_CALL setPushButtonFont( const ::css::awt::FontDescriptor& _pushbuttonfont ) = 0;
    virtual ::css::awt::FontDescriptor SAL_CALL getFieldFont() = 0;
    virtual void SAL_CALL setFieldFont( const ::css::awt::FontDescriptor& _fieldfont ) = 0;

    // Methods
    virtual void SAL_CALL addStyleChangeListener( const ::css::uno::Reference< ::css::awt::XStyleChangeListener >& Listener ) = 0;
    virtual void SAL_CALL removeStyleChangeListener( const ::css::uno::Reference< ::css::awt::XStyleChangeListener >& Listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStyleSettings() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XStyleSettings const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XStyleSettings > *);

#endif
