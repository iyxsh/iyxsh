#ifndef INCLUDED_COM_SUN_STAR_CHART_CHARTAXISARRANGEORDERTYPE_HDL
#define INCLUDED_COM_SUN_STAR_CHART_CHARTAXISARRANGEORDERTYPE_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart {

#if defined LIBO_INTERNAL_ONLY

#if defined __GNUC__

enum class ChartAxisArrangeOrderType
{

#else

enum class SAL_DLLPUBLIC_RTTI ChartAxisArrangeOrderType
{

#endif

#else

enum SAL_DLLPUBLIC_RTTI ChartAxisArrangeOrderType
{

#endif
    ChartAxisArrangeOrderType_AUTO = 0,
    ChartAxisArrangeOrderType_SIDE_BY_SIDE = 1,
    ChartAxisArrangeOrderType_STAGGER_EVEN = 2,
    ChartAxisArrangeOrderType_STAGGER_ODD = 3,
    ChartAxisArrangeOrderType_MAKE_FIXED_SIZE = SAL_MAX_ENUM
};

#if defined LIBO_INTERNAL_ONLY
constexpr auto ChartAxisArrangeOrderType_AUTO = ChartAxisArrangeOrderType::ChartAxisArrangeOrderType_AUTO;
constexpr auto ChartAxisArrangeOrderType_SIDE_BY_SIDE = ChartAxisArrangeOrderType::ChartAxisArrangeOrderType_SIDE_BY_SIDE;
constexpr auto ChartAxisArrangeOrderType_STAGGER_EVEN = ChartAxisArrangeOrderType::ChartAxisArrangeOrderType_STAGGER_EVEN;
constexpr auto ChartAxisArrangeOrderType_STAGGER_ODD = ChartAxisArrangeOrderType::ChartAxisArrangeOrderType_STAGGER_ODD;
#endif

inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart::ChartAxisArrangeOrderType const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::chart::ChartAxisArrangeOrderType *);

#endif
