#ifndef INCLUDED_COM_SUN_STAR_SDB_XDATABASEREGISTRATIONS_HDL
#define INCLUDED_COM_SUN_STAR_SDB_XDATABASEREGISTRATIONS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace sdb { class XDatabaseRegistrationsListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdb {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDatabaseRegistrations : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDatabaseRegistrations() = default;
    XDatabaseRegistrations(XDatabaseRegistrations const &) = default;
    XDatabaseRegistrations(XDatabaseRegistrations &&) = default;
    XDatabaseRegistrations & operator =(XDatabaseRegistrations const &) = default;
    XDatabaseRegistrations & operator =(XDatabaseRegistrations &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL hasRegisteredDatabase( const ::rtl::OUString& Name ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getRegistrationNames() = 0;
    virtual ::rtl::OUString SAL_CALL getDatabaseLocation( const ::rtl::OUString& Name ) = 0;
    virtual void SAL_CALL registerDatabaseLocation( const ::rtl::OUString& Name, const ::rtl::OUString& Location ) = 0;
    virtual void SAL_CALL revokeDatabaseLocation( const ::rtl::OUString& Name ) = 0;
    virtual void SAL_CALL changeDatabaseLocation( const ::rtl::OUString& Name, const ::rtl::OUString& NewLocation ) = 0;
    virtual ::sal_Bool SAL_CALL isDatabaseRegistrationReadOnly( const ::rtl::OUString& Name ) = 0;
    virtual void SAL_CALL addDatabaseRegistrationsListener( const ::css::uno::Reference< ::css::sdb::XDatabaseRegistrationsListener >& Listener ) = 0;
    virtual void SAL_CALL removeDatabaseRegistrationsListener( const ::css::uno::Reference< ::css::sdb::XDatabaseRegistrationsListener >& Listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDatabaseRegistrations() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdb::XDatabaseRegistrations const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdb::XDatabaseRegistrations > *);

#endif
