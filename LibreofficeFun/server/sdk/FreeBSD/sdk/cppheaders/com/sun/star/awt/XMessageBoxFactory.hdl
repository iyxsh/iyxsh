#ifndef INCLUDED_COM_SUN_STAR_AWT_XMESSAGEBOXFACTORY_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XMESSAGEBOXFACTORY_HDL

#include "sal/config.h"

#include "com/sun/star/awt/MessageBoxType.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XMessageBox; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XWindowPeer; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMessageBoxFactory : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMessageBoxFactory() = default;
    XMessageBoxFactory(XMessageBoxFactory const &) = default;
    XMessageBoxFactory(XMessageBoxFactory &&) = default;
    XMessageBoxFactory & operator =(XMessageBoxFactory const &) = default;
    XMessageBoxFactory & operator =(XMessageBoxFactory &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::XMessageBox > SAL_CALL createMessageBox( const ::css::uno::Reference< ::css::awt::XWindowPeer >& aParent, ::css::awt::MessageBoxType eType, ::sal_Int32 nButtons, const ::rtl::OUString& sTitle, const ::rtl::OUString& sMessage ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMessageBoxFactory() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XMessageBoxFactory const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XMessageBoxFactory > *);

#endif
