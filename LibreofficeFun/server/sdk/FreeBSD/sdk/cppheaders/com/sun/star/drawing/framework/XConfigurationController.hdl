#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XCONFIGURATIONCONTROLLER_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XCONFIGURATIONCONTROLLER_HDL

#include "sal/config.h"

#include "com/sun/star/drawing/framework/ResourceActivationMode.hdl"
namespace com { namespace sun { namespace star { namespace drawing { namespace framework { class XConfiguration; } } } } }
#include "com/sun/star/drawing/framework/XConfigurationControllerBroadcaster.hdl"
#include "com/sun/star/drawing/framework/XConfigurationControllerRequestQueue.hdl"
namespace com { namespace sun { namespace star { namespace drawing { namespace framework { class XResource; } } } } }
#include "com/sun/star/drawing/framework/XResourceFactoryManager.hdl"
namespace com { namespace sun { namespace star { namespace drawing { namespace framework { class XResourceId; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XConfigurationController : public ::css::drawing::framework::XConfigurationControllerRequestQueue, public ::css::drawing::framework::XConfigurationControllerBroadcaster, public ::css::drawing::framework::XResourceFactoryManager
{
public:
#if defined LIBO_INTERNAL_ONLY
    XConfigurationController() = default;
    XConfigurationController(XConfigurationController const &) = default;
    XConfigurationController(XConfigurationController &&) = default;
    XConfigurationController & operator =(XConfigurationController const &) = default;
    XConfigurationController & operator =(XConfigurationController &&) = default;
#endif


    // Methods
    virtual void SAL_CALL requestResourceActivation( const ::css::uno::Reference< ::css::drawing::framework::XResourceId >& xResourceId, ::css::drawing::framework::ResourceActivationMode eMode ) = 0;
    virtual void SAL_CALL requestResourceDeactivation( const ::css::uno::Reference< ::css::drawing::framework::XResourceId >& xResourceId ) = 0;
    virtual ::css::uno::Reference< ::css::drawing::framework::XResource > SAL_CALL getResource( const ::css::uno::Reference< ::css::drawing::framework::XResourceId >& xResourceId ) = 0;
    virtual void SAL_CALL lock() = 0;
    virtual void SAL_CALL unlock() = 0;
    virtual void SAL_CALL update() = 0;
    virtual ::css::uno::Reference< ::css::drawing::framework::XConfiguration > SAL_CALL getRequestedConfiguration() = 0;
    virtual ::css::uno::Reference< ::css::drawing::framework::XConfiguration > SAL_CALL getCurrentConfiguration() = 0;
    virtual void SAL_CALL restoreConfiguration( const ::css::uno::Reference< ::css::drawing::framework::XConfiguration >& xConfiguration ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XConfigurationController() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::framework::XConfigurationController const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::framework::XConfigurationController > *);

#endif
