#ifndef INCLUDED_COM_SUN_STAR_EMBED_XLINKFACTORY_HDL
#define INCLUDED_COM_SUN_STAR_EMBED_XLINKFACTORY_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace embed { class XStorage; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace embed {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLinkFactory : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XLinkFactory() = default;
    XLinkFactory(XLinkFactory const &) = default;
    XLinkFactory(XLinkFactory &&) = default;
    XLinkFactory & operator =(XLinkFactory const &) = default;
    XLinkFactory & operator =(XLinkFactory &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::uno::XInterface > SAL_CALL createInstanceLinkUserInit( const ::css::uno::Sequence< ::sal_Int8 >& aClassID, const ::rtl::OUString& ClassName, const ::css::uno::Reference< ::css::embed::XStorage >& xStorage, const ::rtl::OUString& sEntryName, const ::css::uno::Sequence< ::css::beans::PropertyValue >& aArgs, const ::css::uno::Sequence< ::css::beans::PropertyValue >& aObjectArgs ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLinkFactory() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::embed::XLinkFactory const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::embed::XLinkFactory > *);

#endif
