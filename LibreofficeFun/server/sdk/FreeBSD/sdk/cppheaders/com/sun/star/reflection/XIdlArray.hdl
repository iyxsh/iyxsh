#ifndef INCLUDED_COM_SUN_STAR_REFLECTION_XIDLARRAY_HDL
#define INCLUDED_COM_SUN_STAR_REFLECTION_XIDLARRAY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace reflection {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XIdlArray : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XIdlArray() = default;
    XIdlArray(XIdlArray const &) = default;
    XIdlArray(XIdlArray &&) = default;
    XIdlArray & operator =(XIdlArray const &) = default;
    XIdlArray & operator =(XIdlArray &&) = default;
#endif


    // Methods
    virtual void SAL_CALL realloc( ::css::uno::Any& array, ::sal_Int32 length ) = 0;
    virtual ::sal_Int32 SAL_CALL getLen( const ::css::uno::Any& array ) = 0;
    virtual ::css::uno::Any SAL_CALL get( const ::css::uno::Any& aArray, ::sal_Int32 nIndex ) = 0;
    virtual void SAL_CALL set( ::css::uno::Any& aArray, ::sal_Int32 nIndex, const ::css::uno::Any& aNewValue ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XIdlArray() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::reflection::XIdlArray const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::reflection::XIdlArray > *);

#endif
