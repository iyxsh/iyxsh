#ifndef INCLUDED_COM_SUN_STAR_REPORT_XFUNCTION_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_XFUNCTION_HDL

#include "sal/config.h"

#include "com/sun/star/beans/Optional.hdl"
#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/container/XChild.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace report {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFunction : public ::css::beans::XPropertySet, public ::css::lang::XComponent, public ::css::container::XChild
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFunction() = default;
    XFunction(XFunction const &) = default;
    XFunction(XFunction &&) = default;
    XFunction & operator =(XFunction const &) = default;
    XFunction & operator =(XFunction &&) = default;
#endif


    // Attributes
    virtual ::sal_Bool SAL_CALL getPreEvaluated() = 0;
    virtual void SAL_CALL setPreEvaluated( ::sal_Bool _preevaluated ) = 0;
    virtual ::sal_Bool SAL_CALL getDeepTraversing() = 0;
    virtual void SAL_CALL setDeepTraversing( ::sal_Bool _deeptraversing ) = 0;
    virtual ::rtl::OUString SAL_CALL getName() = 0;
    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) = 0;
    virtual ::rtl::OUString SAL_CALL getFormula() = 0;
    virtual void SAL_CALL setFormula( const ::rtl::OUString& _formula ) = 0;
    virtual ::css::beans::Optional< ::rtl::OUString > SAL_CALL getInitialFormula() = 0;
    virtual void SAL_CALL setInitialFormula( const ::css::beans::Optional< ::rtl::OUString >& _initialformula ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFunction() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::report::XFunction const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::report::XFunction > *);

#endif
