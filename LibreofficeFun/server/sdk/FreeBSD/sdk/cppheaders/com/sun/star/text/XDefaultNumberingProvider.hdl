#ifndef INCLUDED_COM_SUN_STAR_TEXT_XDEFAULTNUMBERINGPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_TEXT_XDEFAULTNUMBERINGPROVIDER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValues.hdl"
namespace com { namespace sun { namespace star { namespace container { class XIndexAccess; } } } }
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace text {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDefaultNumberingProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDefaultNumberingProvider() = default;
    XDefaultNumberingProvider(XDefaultNumberingProvider const &) = default;
    XDefaultNumberingProvider(XDefaultNumberingProvider &&) = default;
    XDefaultNumberingProvider & operator =(XDefaultNumberingProvider const &) = default;
    XDefaultNumberingProvider & operator =(XDefaultNumberingProvider &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::container::XIndexAccess > > SAL_CALL getDefaultOutlineNumberings( const ::css::lang::Locale& aLocale ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::beans::PropertyValue > > SAL_CALL getDefaultContinuousNumberingLevels( const ::css::lang::Locale& aLocale ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDefaultNumberingProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::text::XDefaultNumberingProvider const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::text::XDefaultNumberingProvider > *);

#endif
