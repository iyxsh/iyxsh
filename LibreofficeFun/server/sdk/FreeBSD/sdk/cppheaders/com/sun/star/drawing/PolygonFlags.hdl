#ifndef INCLUDED_COM_SUN_STAR_DRAWING_POLYGONFLAGS_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_POLYGONFLAGS_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing {

#if defined LIBO_INTERNAL_ONLY

#if defined __GNUC__

enum class PolygonFlags
{

#else

enum class SAL_DLLPUBLIC_RTTI PolygonFlags
{

#endif

#else

enum SAL_DLLPUBLIC_RTTI PolygonFlags
{

#endif
    PolygonFlags_NORMAL = 0,
    PolygonFlags_SMOOTH = 1,
    PolygonFlags_CONTROL = 2,
    PolygonFlags_SYMMETRIC = 3,
    PolygonFlags_MAKE_FIXED_SIZE = SAL_MAX_ENUM
};

#if defined LIBO_INTERNAL_ONLY
constexpr auto PolygonFlags_NORMAL = PolygonFlags::PolygonFlags_NORMAL;
constexpr auto PolygonFlags_SMOOTH = PolygonFlags::PolygonFlags_SMOOTH;
constexpr auto PolygonFlags_CONTROL = PolygonFlags::PolygonFlags_CONTROL;
constexpr auto PolygonFlags_SYMMETRIC = PolygonFlags::PolygonFlags_SYMMETRIC;
#endif

inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::PolygonFlags const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::drawing::PolygonFlags *);

#endif
