#ifndef INCLUDED_COM_SUN_STAR_AWT_XSCROLLBAR_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XSCROLLBAR_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XAdjustmentListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XScrollBar : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XScrollBar() = default;
    XScrollBar(XScrollBar const &) = default;
    XScrollBar(XScrollBar &&) = default;
    XScrollBar & operator =(XScrollBar const &) = default;
    XScrollBar & operator =(XScrollBar &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addAdjustmentListener( const ::css::uno::Reference< ::css::awt::XAdjustmentListener >& l ) = 0;
    virtual void SAL_CALL removeAdjustmentListener( const ::css::uno::Reference< ::css::awt::XAdjustmentListener >& l ) = 0;
    virtual void SAL_CALL setValue( ::sal_Int32 n ) = 0;
    virtual void SAL_CALL setValues( ::sal_Int32 nValue, ::sal_Int32 nVisible, ::sal_Int32 nMax ) = 0;
    virtual ::sal_Int32 SAL_CALL getValue() = 0;
    virtual void SAL_CALL setMaximum( ::sal_Int32 n ) = 0;
    virtual ::sal_Int32 SAL_CALL getMaximum() = 0;
    virtual void SAL_CALL setLineIncrement( ::sal_Int32 n ) = 0;
    virtual ::sal_Int32 SAL_CALL getLineIncrement() = 0;
    virtual void SAL_CALL setBlockIncrement( ::sal_Int32 n ) = 0;
    virtual ::sal_Int32 SAL_CALL getBlockIncrement() = 0;
    virtual void SAL_CALL setVisibleSize( ::sal_Int32 n ) = 0;
    virtual ::sal_Int32 SAL_CALL getVisibleSize() = 0;
    virtual void SAL_CALL setOrientation( ::sal_Int32 n ) = 0;
    virtual ::sal_Int32 SAL_CALL getOrientation() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XScrollBar() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XScrollBar const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XScrollBar > *);

#endif
