#ifndef INCLUDED_COM_SUN_STAR_SYSTEM_XSIMPLEMAILMESSAGE_HDL
#define INCLUDED_COM_SUN_STAR_SYSTEM_XSIMPLEMAILMESSAGE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace system {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSimpleMailMessage : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSimpleMailMessage() = default;
    XSimpleMailMessage(XSimpleMailMessage const &) = default;
    XSimpleMailMessage(XSimpleMailMessage &&) = default;
    XSimpleMailMessage & operator =(XSimpleMailMessage const &) = default;
    XSimpleMailMessage & operator =(XSimpleMailMessage &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setRecipient( const ::rtl::OUString& aRecipient ) = 0;
    virtual ::rtl::OUString SAL_CALL getRecipient() = 0;
    virtual void SAL_CALL setCcRecipient( const ::css::uno::Sequence< ::rtl::OUString >& aCcRecipient ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getCcRecipient() = 0;
    virtual void SAL_CALL setBccRecipient( const ::css::uno::Sequence< ::rtl::OUString >& aBccRecipient ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getBccRecipient() = 0;
    virtual void SAL_CALL setOriginator( const ::rtl::OUString& aOriginator ) = 0;
    virtual ::rtl::OUString SAL_CALL getOriginator() = 0;
    virtual void SAL_CALL setSubject( const ::rtl::OUString& aSubject ) = 0;
    virtual ::rtl::OUString SAL_CALL getSubject() = 0;
    virtual void SAL_CALL setAttachement( const ::css::uno::Sequence< ::rtl::OUString >& aAttachement ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAttachement() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSimpleMailMessage() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::system::XSimpleMailMessage const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::system::XSimpleMailMessage > *);

#endif
