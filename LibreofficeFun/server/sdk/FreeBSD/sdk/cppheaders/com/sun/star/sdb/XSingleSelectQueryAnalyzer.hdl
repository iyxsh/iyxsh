#ifndef INCLUDED_COM_SUN_STAR_SDB_XSINGLESELECTQUERYANALYZER_HDL
#define INCLUDED_COM_SUN_STAR_SDB_XSINGLESELECTQUERYANALYZER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace container { class XIndexAccess; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdb {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSingleSelectQueryAnalyzer : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSingleSelectQueryAnalyzer() = default;
    XSingleSelectQueryAnalyzer(XSingleSelectQueryAnalyzer const &) = default;
    XSingleSelectQueryAnalyzer(XSingleSelectQueryAnalyzer &&) = default;
    XSingleSelectQueryAnalyzer & operator =(XSingleSelectQueryAnalyzer const &) = default;
    XSingleSelectQueryAnalyzer & operator =(XSingleSelectQueryAnalyzer &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getQuery() = 0;
    virtual void SAL_CALL setQuery( const ::rtl::OUString& command ) = 0;
    virtual ::rtl::OUString SAL_CALL getFilter() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::beans::PropertyValue > > SAL_CALL getStructuredFilter() = 0;
    virtual ::rtl::OUString SAL_CALL getGroup() = 0;
    virtual ::css::uno::Reference< ::css::container::XIndexAccess > SAL_CALL getGroupColumns() = 0;
    virtual ::rtl::OUString SAL_CALL getHavingClause() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::beans::PropertyValue > > SAL_CALL getStructuredHavingClause() = 0;
    virtual ::rtl::OUString SAL_CALL getOrder() = 0;
    virtual ::css::uno::Reference< ::css::container::XIndexAccess > SAL_CALL getOrderColumns() = 0;
    virtual ::rtl::OUString SAL_CALL getQueryWithSubstitution() = 0;
    virtual void SAL_CALL setCommand( const ::rtl::OUString& Command, ::sal_Int32 CommandType ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSingleSelectQueryAnalyzer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdb::XSingleSelectQueryAnalyzer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdb::XSingleSelectQueryAnalyzer > *);

#endif
