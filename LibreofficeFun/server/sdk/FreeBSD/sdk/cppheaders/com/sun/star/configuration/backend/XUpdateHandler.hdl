#ifndef INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XUPDATEHANDLER_HDL
#define INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XUPDATEHANDLER_HDL

#include "sal/config.h"

#include "com/sun/star/configuration/backend/TemplateIdentifier.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Type.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace configuration { namespace backend {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XUpdateHandler : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XUpdateHandler() = default;
    XUpdateHandler(XUpdateHandler const &) = default;
    XUpdateHandler(XUpdateHandler &&) = default;
    XUpdateHandler & operator =(XUpdateHandler const &) = default;
    XUpdateHandler & operator =(XUpdateHandler &&) = default;
#endif


    // Methods
    virtual void SAL_CALL startUpdate() = 0;
    virtual void SAL_CALL endUpdate() = 0;
    virtual void SAL_CALL modifyNode( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, ::sal_Int16 aAttributeMask, ::sal_Bool bReset ) = 0;
    virtual void SAL_CALL addOrReplaceNode( const ::rtl::OUString& aName, ::sal_Int16 aAttributes ) = 0;
    virtual void SAL_CALL addOrReplaceNodeFromTemplate( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, const ::css::configuration::backend::TemplateIdentifier& aTemplate ) = 0;
    virtual void SAL_CALL endNode() = 0;
    virtual void SAL_CALL removeNode( const ::rtl::OUString& aName ) = 0;
    virtual void SAL_CALL modifyProperty( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, ::sal_Int16 aAttributeMask, const ::css::uno::Type& aType ) = 0;
    virtual void SAL_CALL setPropertyValue( const ::css::uno::Any& aValue ) = 0;
    virtual void SAL_CALL setPropertyValueForLocale( const ::css::uno::Any& aValue, const ::rtl::OUString& aLocale ) = 0;
    virtual void SAL_CALL resetPropertyValue() = 0;
    virtual void SAL_CALL resetPropertyValueForLocale( const ::rtl::OUString& aLocale ) = 0;
    virtual void SAL_CALL endProperty() = 0;
    virtual void SAL_CALL resetProperty( const ::rtl::OUString& aName ) = 0;
    virtual void SAL_CALL addOrReplaceProperty( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, const ::css::uno::Type& aType ) = 0;
    virtual void SAL_CALL addOrReplacePropertyWithValue( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, const ::css::uno::Any& aValue ) = 0;
    virtual void SAL_CALL removeProperty( const ::rtl::OUString& aName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XUpdateHandler() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::configuration::backend::XUpdateHandler const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::configuration::backend::XUpdateHandler > *);

#endif
