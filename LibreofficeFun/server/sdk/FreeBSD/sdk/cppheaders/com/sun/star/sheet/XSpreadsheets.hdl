#ifndef INCLUDED_COM_SUN_STAR_SHEET_XSPREADSHEETS_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XSPREADSHEETS_HDL

#include "sal/config.h"

#include "com/sun/star/container/XNameContainer.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSpreadsheets : public ::css::container::XNameContainer
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSpreadsheets() = default;
    XSpreadsheets(XSpreadsheets const &) = default;
    XSpreadsheets(XSpreadsheets &&) = default;
    XSpreadsheets & operator =(XSpreadsheets const &) = default;
    XSpreadsheets & operator =(XSpreadsheets &&) = default;
#endif


    // Methods
    virtual void SAL_CALL insertNewByName( const ::rtl::OUString& aName, ::sal_Int16 nPosition ) = 0;
    virtual void SAL_CALL moveByName( const ::rtl::OUString& aName, ::sal_Int16 nDestination ) = 0;
    virtual void SAL_CALL copyByName( const ::rtl::OUString& aName, const ::rtl::OUString& aCopy, ::sal_Int16 nDestination ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSpreadsheets() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XSpreadsheets const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XSpreadsheets > *);

#endif
