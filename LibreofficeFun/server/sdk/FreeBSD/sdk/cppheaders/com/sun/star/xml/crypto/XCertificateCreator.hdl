#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_XCERTIFICATECREATOR_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_XCERTIFICATECREATOR_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace security { class XCertificate; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCertificateCreator : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCertificateCreator() = default;
    XCertificateCreator(XCertificateCreator const &) = default;
    XCertificateCreator(XCertificateCreator &&) = default;
    XCertificateCreator & operator =(XCertificateCreator const &) = default;
    XCertificateCreator & operator =(XCertificateCreator &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::security::XCertificate > SAL_CALL addDERCertificateToTheDatabase( const ::css::uno::Sequence< ::sal_Int8 >& aDerCertificate, const ::rtl::OUString& aTrustString ) = 0;
    virtual ::css::uno::Reference< ::css::security::XCertificate > SAL_CALL createDERCertificateWithPrivateKey( const ::css::uno::Sequence< ::sal_Int8 >& aDerCertificate, const ::css::uno::Sequence< ::sal_Int8 >& aPrivateKey ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCertificateCreator() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::crypto::XCertificateCreator const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::crypto::XCertificateCreator > *);

#endif
