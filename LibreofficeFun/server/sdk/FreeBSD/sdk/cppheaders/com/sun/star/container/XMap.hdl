#ifndef INCLUDED_COM_SUN_STAR_CONTAINER_XMAP_HDL
#define INCLUDED_COM_SUN_STAR_CONTAINER_XMAP_HDL

#include "sal/config.h"

#include "com/sun/star/container/XElementAccess.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Type.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace container {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMap : public ::css::container::XElementAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMap() = default;
    XMap(XMap const &) = default;
    XMap(XMap &&) = default;
    XMap & operator =(XMap const &) = default;
    XMap & operator =(XMap &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Type SAL_CALL getKeyType() = 0;
    virtual ::css::uno::Type SAL_CALL getValueType() = 0;

    // Methods
    virtual void SAL_CALL clear() = 0;
    virtual ::sal_Bool SAL_CALL containsKey( const ::css::uno::Any& Key ) = 0;
    virtual ::sal_Bool SAL_CALL containsValue( const ::css::uno::Any& Value ) = 0;
    virtual ::css::uno::Any SAL_CALL get( const ::css::uno::Any& Key ) = 0;
    virtual ::css::uno::Any SAL_CALL put( const ::css::uno::Any& Key, const ::css::uno::Any& Value ) = 0;
    virtual ::css::uno::Any SAL_CALL remove( const ::css::uno::Any& Key ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMap() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::container::XMap const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::container::XMap > *);

#endif
