#ifndef INCLUDED_COM_SUN_STAR_AWT_XPROGRESSMONITOR_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XPROGRESSMONITOR_HDL

#include "sal/config.h"

#include "com/sun/star/awt/XProgressBar.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XProgressMonitor : public ::css::awt::XProgressBar
{
public:
#if defined LIBO_INTERNAL_ONLY
    XProgressMonitor() = default;
    XProgressMonitor(XProgressMonitor const &) = default;
    XProgressMonitor(XProgressMonitor &&) = default;
    XProgressMonitor & operator =(XProgressMonitor const &) = default;
    XProgressMonitor & operator =(XProgressMonitor &&) = default;
#endif


    // Methods
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL addText( const ::rtl::OUString& Topic, const ::rtl::OUString& Text, ::sal_Bool beforeProgress ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL removeText( const ::rtl::OUString& Topic, ::sal_Bool beforeProgress ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL updateText( const ::rtl::OUString& Topic, const ::rtl::OUString& Text, ::sal_Bool beforeProgress ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XProgressMonitor() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XProgressMonitor const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XProgressMonitor > *);

#endif
