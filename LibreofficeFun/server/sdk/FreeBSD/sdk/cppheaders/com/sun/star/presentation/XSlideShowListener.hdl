#ifndef INCLUDED_COM_SUN_STAR_PRESENTATION_XSLIDESHOWLISTENER_HDL
#define INCLUDED_COM_SUN_STAR_PRESENTATION_XSLIDESHOWLISTENER_HDL

#include "sal/config.h"

#include "com/sun/star/animations/XAnimationListener.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace presentation {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSlideShowListener : public ::css::animations::XAnimationListener
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSlideShowListener() = default;
    XSlideShowListener(XSlideShowListener const &) = default;
    XSlideShowListener(XSlideShowListener &&) = default;
    XSlideShowListener & operator =(XSlideShowListener const &) = default;
    XSlideShowListener & operator =(XSlideShowListener &&) = default;
#endif


    // Methods
    virtual void SAL_CALL paused() = 0;
    virtual void SAL_CALL resumed() = 0;
    virtual void SAL_CALL slideTransitionStarted() = 0;
    virtual void SAL_CALL slideTransitionEnded() = 0;
    virtual void SAL_CALL slideAnimationsEnded() = 0;
    virtual void SAL_CALL slideEnded( ::sal_Bool reverse ) = 0;
    virtual void SAL_CALL hyperLinkClicked( const ::rtl::OUString& hyperLink ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSlideShowListener() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::presentation::XSlideShowListener const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::presentation::XSlideShowListener > *);

#endif
