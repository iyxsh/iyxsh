#ifndef INCLUDED_COM_SUN_STAR_AWT_XPRINTERPROPERTYSET_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XPRINTERPROPERTYSET_HDL

#include "sal/config.h"

#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPrinterPropertySet : public ::css::beans::XPropertySet
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPrinterPropertySet() = default;
    XPrinterPropertySet(XPrinterPropertySet const &) = default;
    XPrinterPropertySet(XPrinterPropertySet &&) = default;
    XPrinterPropertySet & operator =(XPrinterPropertySet const &) = default;
    XPrinterPropertySet & operator =(XPrinterPropertySet &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setHorizontal( ::sal_Bool bHorizontal ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getFormDescriptions() = 0;
    virtual void SAL_CALL selectForm( const ::rtl::OUString& aFormDescription ) = 0;
    virtual ::css::uno::Sequence< ::sal_Int8 > SAL_CALL getBinarySetup() = 0;
    virtual void SAL_CALL setBinarySetup( const ::css::uno::Sequence< ::sal_Int8 >& data ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPrinterPropertySet() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XPrinterPropertySet const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XPrinterPropertySet > *);

#endif
