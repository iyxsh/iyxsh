#ifndef INCLUDED_COM_SUN_STAR_VIEW_XFORMLAYERACCESS_HDL
#define INCLUDED_COM_SUN_STAR_VIEW_XFORMLAYERACCESS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace form { class XForm; } } } }
namespace com { namespace sun { namespace star { namespace form { namespace runtime { class XFormController; } } } } }
#include "com/sun/star/view/XControlAccess.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace view {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFormLayerAccess : public ::css::view::XControlAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFormLayerAccess() = default;
    XFormLayerAccess(XFormLayerAccess const &) = default;
    XFormLayerAccess(XFormLayerAccess &&) = default;
    XFormLayerAccess & operator =(XFormLayerAccess const &) = default;
    XFormLayerAccess & operator =(XFormLayerAccess &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::form::runtime::XFormController > SAL_CALL getFormController( const ::css::uno::Reference< ::css::form::XForm >& Form ) = 0;
    virtual ::sal_Bool SAL_CALL isFormDesignMode() = 0;
    virtual void SAL_CALL setFormDesignMode( ::sal_Bool DesignMode ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFormLayerAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::view::XFormLayerAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::view::XFormLayerAccess > *);

#endif
