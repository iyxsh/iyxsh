#ifndef INCLUDED_COM_SUN_STAR_AWT_XSPINFIELD_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XSPINFIELD_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XSpinListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSpinField : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSpinField() = default;
    XSpinField(XSpinField const &) = default;
    XSpinField(XSpinField &&) = default;
    XSpinField & operator =(XSpinField const &) = default;
    XSpinField & operator =(XSpinField &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addSpinListener( const ::css::uno::Reference< ::css::awt::XSpinListener >& l ) = 0;
    virtual void SAL_CALL removeSpinListener( const ::css::uno::Reference< ::css::awt::XSpinListener >& l ) = 0;
    virtual void SAL_CALL up() = 0;
    virtual void SAL_CALL down() = 0;
    virtual void SAL_CALL first() = 0;
    virtual void SAL_CALL last() = 0;
    virtual void SAL_CALL enableRepeat( ::sal_Bool bRepeat ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSpinField() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XSpinField const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XSpinField > *);

#endif
