#ifndef INCLUDED_COM_SUN_STAR_GRAPHIC_XGRAPHICMAPPER_HDL
#define INCLUDED_COM_SUN_STAR_GRAPHIC_XGRAPHICMAPPER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace graphic { class XGraphic; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace graphic {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XGraphicMapper : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XGraphicMapper() = default;
    XGraphicMapper(XGraphicMapper const &) = default;
    XGraphicMapper(XGraphicMapper &&) = default;
    XGraphicMapper & operator =(XGraphicMapper const &) = default;
    XGraphicMapper & operator =(XGraphicMapper &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::graphic::XGraphic > SAL_CALL findGraphic( const ::rtl::OUString& Id ) = 0;
    virtual void SAL_CALL putGraphic( const ::rtl::OUString& Id, const ::css::uno::Reference< ::css::graphic::XGraphic >& Graphic ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XGraphicMapper() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::graphic::XGraphicMapper const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::graphic::XGraphicMapper > *);

#endif
