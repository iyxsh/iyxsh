#ifndef INCLUDED_COM_SUN_STAR_UTIL_XSTRINGABBREVIATION_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XSTRINGABBREVIATION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace util { class XStringWidth; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStringAbbreviation : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStringAbbreviation() = default;
    XStringAbbreviation(XStringAbbreviation const &) = default;
    XStringAbbreviation(XStringAbbreviation &&) = default;
    XStringAbbreviation & operator =(XStringAbbreviation const &) = default;
    XStringAbbreviation & operator =(XStringAbbreviation &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL abbreviateString( const ::css::uno::Reference< ::css::util::XStringWidth >& xStringWidth, ::sal_Int32 nWidth, const ::rtl::OUString& aString ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStringAbbreviation() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XStringAbbreviation const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XStringAbbreviation > *);

#endif
