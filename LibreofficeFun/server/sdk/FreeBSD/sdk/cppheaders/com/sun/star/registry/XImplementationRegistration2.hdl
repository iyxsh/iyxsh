#ifndef INCLUDED_COM_SUN_STAR_REGISTRY_XIMPLEMENTATIONREGISTRATION2_HDL
#define INCLUDED_COM_SUN_STAR_REGISTRY_XIMPLEMENTATIONREGISTRATION2_HDL

#include "sal/config.h"

#include "com/sun/star/registry/XImplementationRegistration.hdl"
namespace com { namespace sun { namespace star { namespace registry { class XSimpleRegistry; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace registry {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XImplementationRegistration2 : public ::css::registry::XImplementationRegistration
{
public:
#if defined LIBO_INTERNAL_ONLY
    XImplementationRegistration2() = default;
    XImplementationRegistration2(XImplementationRegistration2 const &) = default;
    XImplementationRegistration2(XImplementationRegistration2 &&) = default;
    XImplementationRegistration2 & operator =(XImplementationRegistration2 const &) = default;
    XImplementationRegistration2 & operator =(XImplementationRegistration2 &&) = default;
#endif


    // Methods
    virtual void SAL_CALL registerImplementationWithLocation( const ::rtl::OUString& aImplementationLoader, const ::rtl::OUString& aLocation, const ::rtl::OUString& aRegisteredLocation, const ::css::uno::Reference< ::css::registry::XSimpleRegistry >& xReg ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XImplementationRegistration2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::registry::XImplementationRegistration2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::registry::XImplementationRegistration2 > *);

#endif
