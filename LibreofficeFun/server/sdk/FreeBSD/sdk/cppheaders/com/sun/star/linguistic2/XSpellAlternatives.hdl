#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XSPELLALTERNATIVES_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XSPELLALTERNATIVES_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSpellAlternatives : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSpellAlternatives() = default;
    XSpellAlternatives(XSpellAlternatives const &) = default;
    XSpellAlternatives(XSpellAlternatives &&) = default;
    XSpellAlternatives & operator =(XSpellAlternatives const &) = default;
    XSpellAlternatives & operator =(XSpellAlternatives &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getWord() = 0;
    virtual ::css::lang::Locale SAL_CALL getLocale() = 0;
    virtual ::sal_Int16 SAL_CALL getFailureType() = 0;
    virtual ::sal_Int16 SAL_CALL getAlternativesCount() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAlternatives() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSpellAlternatives() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XSpellAlternatives const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XSpellAlternatives > *);

#endif
