#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XLINEPOLYPOLYGON2D_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XLINEPOLYPOLYGON2D_HDL

#include "sal/config.h"

#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/rendering/XPolyPolygon2D.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLinePolyPolygon2D : public ::css::rendering::XPolyPolygon2D
{
public:
#if defined LIBO_INTERNAL_ONLY
    XLinePolyPolygon2D() = default;
    XLinePolyPolygon2D(XLinePolyPolygon2D const &) = default;
    XLinePolyPolygon2D(XLinePolyPolygon2D &&) = default;
    XLinePolyPolygon2D & operator =(XLinePolyPolygon2D const &) = default;
    XLinePolyPolygon2D & operator =(XLinePolyPolygon2D &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::geometry::RealPoint2D > > SAL_CALL getPoints( ::sal_Int32 nPolygonIndex, ::sal_Int32 nNumberOfPolygons, ::sal_Int32 nPointIndex, ::sal_Int32 nNumberOfPoints ) = 0;
    virtual void SAL_CALL setPoints( const ::css::uno::Sequence< ::css::uno::Sequence< ::css::geometry::RealPoint2D > >& points, ::sal_Int32 nPolygonIndex ) = 0;
    virtual ::css::geometry::RealPoint2D SAL_CALL getPoint( ::sal_Int32 nPolygonIndex, ::sal_Int32 nPointIndex ) = 0;
    virtual void SAL_CALL setPoint( const ::css::geometry::RealPoint2D& point, ::sal_Int32 nPolygonIndex, ::sal_Int32 nPointIndex ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLinePolyPolygon2D() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rendering::XLinePolyPolygon2D const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rendering::XLinePolyPolygon2D > *);

#endif
