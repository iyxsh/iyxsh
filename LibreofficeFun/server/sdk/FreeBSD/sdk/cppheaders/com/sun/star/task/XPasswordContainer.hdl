#ifndef INCLUDED_COM_SUN_STAR_TASK_XPASSWORDCONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_TASK_XPASSWORDCONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/task/UrlRecord.hdl"
namespace com { namespace sun { namespace star { namespace task { class XInteractionHandler; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace task {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPasswordContainer : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPasswordContainer() = default;
    XPasswordContainer(XPasswordContainer const &) = default;
    XPasswordContainer(XPasswordContainer &&) = default;
    XPasswordContainer & operator =(XPasswordContainer const &) = default;
    XPasswordContainer & operator =(XPasswordContainer &&) = default;
#endif


    // Methods
    virtual void SAL_CALL add( const ::rtl::OUString& Url, const ::rtl::OUString& UserName, const ::css::uno::Sequence< ::rtl::OUString >& Passwords, const ::css::uno::Reference< ::css::task::XInteractionHandler >& Handler ) = 0;
    virtual void SAL_CALL addPersistent( const ::rtl::OUString& Url, const ::rtl::OUString& UserName, const ::css::uno::Sequence< ::rtl::OUString >& Passwords, const ::css::uno::Reference< ::css::task::XInteractionHandler >& Handler ) = 0;
    virtual ::css::task::UrlRecord SAL_CALL find( const ::rtl::OUString& Url, const ::css::uno::Reference< ::css::task::XInteractionHandler >& Handler ) = 0;
    virtual ::css::task::UrlRecord SAL_CALL findForName( const ::rtl::OUString& Url, const ::rtl::OUString& UserName, const ::css::uno::Reference< ::css::task::XInteractionHandler >& Handler ) = 0;
    virtual void SAL_CALL remove( const ::rtl::OUString& Url, const ::rtl::OUString& UserName ) = 0;
    virtual void SAL_CALL removePersistent( const ::rtl::OUString& Url, const ::rtl::OUString& UserName ) = 0;
    virtual void SAL_CALL removeAllPersistent() = 0;
    virtual ::css::uno::Sequence< ::css::task::UrlRecord > SAL_CALL getAllPersistent( const ::css::uno::Reference< ::css::task::XInteractionHandler >& Handler ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPasswordContainer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::task::XPasswordContainer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::task::XPasswordContainer > *);

#endif
