#ifndef INCLUDED_COM_SUN_STAR_DATATRANSFER_CLIPBOARD_XCLIPBOARD_HDL
#define INCLUDED_COM_SUN_STAR_DATATRANSFER_CLIPBOARD_XCLIPBOARD_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace datatransfer { class XTransferable; } } } }
namespace com { namespace sun { namespace star { namespace datatransfer { namespace clipboard { class XClipboardOwner; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace datatransfer { namespace clipboard {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XClipboard : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XClipboard() = default;
    XClipboard(XClipboard const &) = default;
    XClipboard(XClipboard &&) = default;
    XClipboard & operator =(XClipboard const &) = default;
    XClipboard & operator =(XClipboard &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::datatransfer::XTransferable > SAL_CALL getContents() = 0;
    virtual void SAL_CALL setContents( const ::css::uno::Reference< ::css::datatransfer::XTransferable >& xTrans, const ::css::uno::Reference< ::css::datatransfer::clipboard::XClipboardOwner >& xClipboardOwner ) = 0;
    virtual ::rtl::OUString SAL_CALL getName() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XClipboard() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::datatransfer::clipboard::XClipboard const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::datatransfer::clipboard::XClipboard > *);

#endif
