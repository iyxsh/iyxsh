#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_XCIPHERCONTEXT_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_XCIPHERCONTEXT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCipherContext : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCipherContext() = default;
    XCipherContext(XCipherContext const &) = default;
    XCipherContext(XCipherContext &&) = default;
    XCipherContext & operator =(XCipherContext const &) = default;
    XCipherContext & operator =(XCipherContext &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::sal_Int8 > SAL_CALL convertWithCipherContext( const ::css::uno::Sequence< ::sal_Int8 >& aData ) = 0;
    virtual ::css::uno::Sequence< ::sal_Int8 > SAL_CALL finalizeCipherContextAndDispose() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCipherContext() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::crypto::XCipherContext const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::crypto::XCipherContext > *);

#endif
