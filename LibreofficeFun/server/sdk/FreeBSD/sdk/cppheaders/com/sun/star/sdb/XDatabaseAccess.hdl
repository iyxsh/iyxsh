#ifndef INCLUDED_COM_SUN_STAR_SDB_XDATABASEACCESS_HDL
#define INCLUDED_COM_SUN_STAR_SDB_XDATABASEACCESS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace sdb { class XDatabaseAccessListener; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XConnection; } } } }
#include "com/sun/star/sdbc/XDataSource.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdb {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDatabaseAccess : public ::css::sdbc::XDataSource
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDatabaseAccess() = default;
    XDatabaseAccess(XDatabaseAccess const &) = default;
    XDatabaseAccess(XDatabaseAccess &&) = default;
    XDatabaseAccess & operator =(XDatabaseAccess const &) = default;
    XDatabaseAccess & operator =(XDatabaseAccess &&) = default;
#endif


    // Methods
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::sal_Bool SAL_CALL hasConnections() = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::css::uno::Reference< ::css::sdbc::XConnection > SAL_CALL getIsolatedConnection( const ::rtl::OUString& user, const ::rtl::OUString& password ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::sal_Bool SAL_CALL suspendConnections() = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL addDatabaseAccessListener( const ::css::uno::Reference< ::css::sdb::XDatabaseAccessListener >& listener ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL removeDatabaseAccessListener( const ::css::uno::Reference< ::css::sdb::XDatabaseAccessListener >& listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDatabaseAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdb::XDatabaseAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdb::XDatabaseAccess > *);

#endif
