#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_ELEMENTSTACKITEM_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_ELEMENTSTACKITEM_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XAttributeList; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto { namespace sax {

#ifdef _WIN32
#   pragma pack(push, 8)
#endif

struct SAL_DLLPUBLIC_RTTI ElementStackItem {
    inline ElementStackItem();

    inline ElementStackItem(const ::sal_Bool& isStartElementEvent_, const ::rtl::OUString& elementName_, const ::css::uno::Reference< ::css::xml::sax::XAttributeList >& xAttributes_);

    ::sal_Bool isStartElementEvent;
    ::rtl::OUString elementName;
    ::css::uno::Reference< ::css::xml::sax::XAttributeList > xAttributes;
};

#ifdef _WIN32
#   pragma pack(pop)
#endif


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::crypto::sax::ElementStackItem const *);
} } } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::xml::crypto::sax::ElementStackItem *);

#endif
