#ifndef INCLUDED_COM_SUN_STAR_UTIL_XATOMSERVER_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XATOMSERVER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/AtomClassRequest.hdl"
#include "com/sun/star/util/AtomDescription.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAtomServer : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAtomServer() = default;
    XAtomServer(XAtomServer const &) = default;
    XAtomServer(XAtomServer &&) = default;
    XAtomServer & operator =(XAtomServer const &) = default;
    XAtomServer & operator =(XAtomServer &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::util::AtomDescription > SAL_CALL getClass( ::sal_Int32 atomClass ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::util::AtomDescription > > SAL_CALL getClasses( const ::css::uno::Sequence< ::sal_Int32 >& atomClasses ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAtomDescriptions( const ::css::uno::Sequence< ::css::util::AtomClassRequest >& atoms ) = 0;
    virtual ::css::uno::Sequence< ::css::util::AtomDescription > SAL_CALL getRecentAtoms( ::sal_Int32 atomClass, ::sal_Int32 atom ) = 0;
    virtual ::sal_Int32 SAL_CALL getAtom( ::sal_Int32 atomClass, const ::rtl::OUString& description, ::sal_Bool create ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAtomServer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XAtomServer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XAtomServer > *);

#endif
