#ifndef INCLUDED_COM_SUN_STAR_SDBC_XISOLATEDCONNECTION_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_XISOLATEDCONNECTION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace sdbc { class XConnection; } } } }
namespace com { namespace sun { namespace star { namespace task { class XInteractionHandler; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbc {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XIsolatedConnection : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XIsolatedConnection() = default;
    XIsolatedConnection(XIsolatedConnection const &) = default;
    XIsolatedConnection(XIsolatedConnection &&) = default;
    XIsolatedConnection & operator =(XIsolatedConnection const &) = default;
    XIsolatedConnection & operator =(XIsolatedConnection &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::sdbc::XConnection > SAL_CALL getIsolatedConnectionWithCompletion( const ::css::uno::Reference< ::css::task::XInteractionHandler >& handler ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XConnection > SAL_CALL getIsolatedConnection( const ::rtl::OUString& user, const ::rtl::OUString& password ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XIsolatedConnection() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbc::XIsolatedConnection const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbc::XIsolatedConnection > *);

#endif
