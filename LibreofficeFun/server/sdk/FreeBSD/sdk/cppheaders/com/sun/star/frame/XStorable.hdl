#ifndef INCLUDED_COM_SUN_STAR_FRAME_XSTORABLE_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XSTORABLE_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStorable : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStorable() = default;
    XStorable(XStorable const &) = default;
    XStorable(XStorable &&) = default;
    XStorable & operator =(XStorable const &) = default;
    XStorable & operator =(XStorable &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL hasLocation() = 0;
    virtual ::rtl::OUString SAL_CALL getLocation() = 0;
    virtual ::sal_Bool SAL_CALL isReadonly() = 0;
    virtual void SAL_CALL store() = 0;
    virtual void SAL_CALL storeAsURL( const ::rtl::OUString& sURL, const ::css::uno::Sequence< ::css::beans::PropertyValue >& lArguments ) = 0;
    virtual void SAL_CALL storeToURL( const ::rtl::OUString& sURL, const ::css::uno::Sequence< ::css::beans::PropertyValue >& lArguments ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStorable() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XStorable const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XStorable > *);

#endif
