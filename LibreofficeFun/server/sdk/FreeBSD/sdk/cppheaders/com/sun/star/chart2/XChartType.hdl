#ifndef INCLUDED_COM_SUN_STAR_CHART2_XCHARTTYPE_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XCHARTTYPE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace chart2 { class XCoordinateSystem; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XChartType : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XChartType() = default;
    XChartType(XChartType const &) = default;
    XChartType(XChartType &&) = default;
    XChartType & operator =(XChartType const &) = default;
    XChartType & operator =(XChartType &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getChartType() = 0;
    virtual ::css::uno::Reference< ::css::chart2::XCoordinateSystem > SAL_CALL createCoordinateSystem( ::sal_Int32 DimensionCount ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedMandatoryRoles() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedOptionalRoles() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedPropertyRoles() = 0;
    virtual ::rtl::OUString SAL_CALL getRoleOfSequenceForSeriesLabel() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XChartType() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XChartType const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XChartType > *);

#endif
