#ifndef INCLUDED_COM_SUN_STAR_UCB_IOERRORCODE_HDL
#define INCLUDED_COM_SUN_STAR_UCB_IOERRORCODE_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ucb {

#if defined LIBO_INTERNAL_ONLY

#if defined __GNUC__

enum class IOErrorCode
{

#else

enum class SAL_DLLPUBLIC_RTTI IOErrorCode
{

#endif

#else

enum SAL_DLLPUBLIC_RTTI IOErrorCode
{

#endif
    IOErrorCode_ABORT = 0,
    IOErrorCode_ACCESS_DENIED = 1,
    IOErrorCode_ALREADY_EXISTING = 2,
    IOErrorCode_BAD_CRC = 3,
    IOErrorCode_CANT_CREATE = 4,
    IOErrorCode_CANT_READ = 5,
    IOErrorCode_CANT_SEEK = 6,
    IOErrorCode_CANT_TELL = 7,
    IOErrorCode_CANT_WRITE = 8,
    IOErrorCode_CURRENT_DIRECTORY = 9,
    IOErrorCode_DEVICE_NOT_READY = 10,
    IOErrorCode_DIFFERENT_DEVICES = 11,
    IOErrorCode_GENERAL = 12,
    IOErrorCode_INVALID_ACCESS = 13,
    IOErrorCode_INVALID_CHARACTER = 14,
    IOErrorCode_INVALID_DEVICE = 15,
    IOErrorCode_INVALID_LENGTH = 16,
    IOErrorCode_INVALID_PARAMETER = 17,
    IOErrorCode_IS_WILDCARD = 18,
    IOErrorCode_LOCKING_VIOLATION = 19,
    IOErrorCode_MISPLACED_CHARACTER = 20,
    IOErrorCode_NAME_TOO_LONG = 21,
    IOErrorCode_NOT_EXISTING = 22,
    IOErrorCode_NOT_EXISTING_PATH = 23,
    IOErrorCode_NOT_SUPPORTED = 24,
    IOErrorCode_NO_DIRECTORY = 25,
    IOErrorCode_NO_FILE = 26,
    IOErrorCode_OUT_OF_DISK_SPACE = 27,
    IOErrorCode_OUT_OF_FILE_HANDLES = 28,
    IOErrorCode_OUT_OF_MEMORY = 29,
    IOErrorCode_PENDING = 30,
    IOErrorCode_RECURSIVE = 31,
    IOErrorCode_UNKNOWN = 32,
    IOErrorCode_WRITE_PROTECTED = 33,
    IOErrorCode_WRONG_FORMAT = 34,
    IOErrorCode_WRONG_VERSION = 35,
    IOErrorCode_MAKE_FIXED_SIZE = SAL_MAX_ENUM
};

#if defined LIBO_INTERNAL_ONLY
constexpr auto IOErrorCode_ABORT = IOErrorCode::IOErrorCode_ABORT;
constexpr auto IOErrorCode_ACCESS_DENIED = IOErrorCode::IOErrorCode_ACCESS_DENIED;
constexpr auto IOErrorCode_ALREADY_EXISTING = IOErrorCode::IOErrorCode_ALREADY_EXISTING;
constexpr auto IOErrorCode_BAD_CRC = IOErrorCode::IOErrorCode_BAD_CRC;
constexpr auto IOErrorCode_CANT_CREATE = IOErrorCode::IOErrorCode_CANT_CREATE;
constexpr auto IOErrorCode_CANT_READ = IOErrorCode::IOErrorCode_CANT_READ;
constexpr auto IOErrorCode_CANT_SEEK = IOErrorCode::IOErrorCode_CANT_SEEK;
constexpr auto IOErrorCode_CANT_TELL = IOErrorCode::IOErrorCode_CANT_TELL;
constexpr auto IOErrorCode_CANT_WRITE = IOErrorCode::IOErrorCode_CANT_WRITE;
constexpr auto IOErrorCode_CURRENT_DIRECTORY = IOErrorCode::IOErrorCode_CURRENT_DIRECTORY;
constexpr auto IOErrorCode_DEVICE_NOT_READY = IOErrorCode::IOErrorCode_DEVICE_NOT_READY;
constexpr auto IOErrorCode_DIFFERENT_DEVICES = IOErrorCode::IOErrorCode_DIFFERENT_DEVICES;
constexpr auto IOErrorCode_GENERAL = IOErrorCode::IOErrorCode_GENERAL;
constexpr auto IOErrorCode_INVALID_ACCESS = IOErrorCode::IOErrorCode_INVALID_ACCESS;
constexpr auto IOErrorCode_INVALID_CHARACTER = IOErrorCode::IOErrorCode_INVALID_CHARACTER;
constexpr auto IOErrorCode_INVALID_DEVICE = IOErrorCode::IOErrorCode_INVALID_DEVICE;
constexpr auto IOErrorCode_INVALID_LENGTH = IOErrorCode::IOErrorCode_INVALID_LENGTH;
constexpr auto IOErrorCode_INVALID_PARAMETER = IOErrorCode::IOErrorCode_INVALID_PARAMETER;
constexpr auto IOErrorCode_IS_WILDCARD = IOErrorCode::IOErrorCode_IS_WILDCARD;
constexpr auto IOErrorCode_LOCKING_VIOLATION = IOErrorCode::IOErrorCode_LOCKING_VIOLATION;
constexpr auto IOErrorCode_MISPLACED_CHARACTER = IOErrorCode::IOErrorCode_MISPLACED_CHARACTER;
constexpr auto IOErrorCode_NAME_TOO_LONG = IOErrorCode::IOErrorCode_NAME_TOO_LONG;
constexpr auto IOErrorCode_NOT_EXISTING = IOErrorCode::IOErrorCode_NOT_EXISTING;
constexpr auto IOErrorCode_NOT_EXISTING_PATH = IOErrorCode::IOErrorCode_NOT_EXISTING_PATH;
constexpr auto IOErrorCode_NOT_SUPPORTED = IOErrorCode::IOErrorCode_NOT_SUPPORTED;
constexpr auto IOErrorCode_NO_DIRECTORY = IOErrorCode::IOErrorCode_NO_DIRECTORY;
constexpr auto IOErrorCode_NO_FILE = IOErrorCode::IOErrorCode_NO_FILE;
constexpr auto IOErrorCode_OUT_OF_DISK_SPACE = IOErrorCode::IOErrorCode_OUT_OF_DISK_SPACE;
constexpr auto IOErrorCode_OUT_OF_FILE_HANDLES = IOErrorCode::IOErrorCode_OUT_OF_FILE_HANDLES;
constexpr auto IOErrorCode_OUT_OF_MEMORY = IOErrorCode::IOErrorCode_OUT_OF_MEMORY;
constexpr auto IOErrorCode_PENDING = IOErrorCode::IOErrorCode_PENDING;
constexpr auto IOErrorCode_RECURSIVE = IOErrorCode::IOErrorCode_RECURSIVE;
constexpr auto IOErrorCode_UNKNOWN = IOErrorCode::IOErrorCode_UNKNOWN;
constexpr auto IOErrorCode_WRITE_PROTECTED = IOErrorCode::IOErrorCode_WRITE_PROTECTED;
constexpr auto IOErrorCode_WRONG_FORMAT = IOErrorCode::IOErrorCode_WRONG_FORMAT;
constexpr auto IOErrorCode_WRONG_VERSION = IOErrorCode::IOErrorCode_WRONG_VERSION;
#endif

inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ucb::IOErrorCode const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::ucb::IOErrorCode *);

#endif
