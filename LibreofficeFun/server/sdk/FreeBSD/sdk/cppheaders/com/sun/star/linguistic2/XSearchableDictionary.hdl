#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XSEARCHABLEDICTIONARY_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XSEARCHABLEDICTIONARY_HDL

#include "sal/config.h"

#include "com/sun/star/linguistic2/XDictionary.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XDictionaryEntry; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSearchableDictionary : public ::css::linguistic2::XDictionary
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSearchableDictionary() = default;
    XSearchableDictionary(XSearchableDictionary const &) = default;
    XSearchableDictionary(XSearchableDictionary &&) = default;
    XSearchableDictionary & operator =(XSearchableDictionary const &) = default;
    XSearchableDictionary & operator =(XSearchableDictionary &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::linguistic2::XDictionaryEntry > > SAL_CALL searchSimilarEntries( const ::rtl::OUString& aWord ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSearchableDictionary() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XSearchableDictionary const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XSearchableDictionary > *);

#endif
