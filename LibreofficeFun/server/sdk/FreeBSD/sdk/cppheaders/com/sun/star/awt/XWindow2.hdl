#ifndef INCLUDED_COM_SUN_STAR_AWT_XWINDOW2_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XWINDOW2_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Size.hdl"
#include "com/sun/star/awt/XWindow.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XWindow2 : public ::css::awt::XWindow
{
public:
#if defined LIBO_INTERNAL_ONLY
    XWindow2() = default;
    XWindow2(XWindow2 const &) = default;
    XWindow2(XWindow2 &&) = default;
    XWindow2 & operator =(XWindow2 const &) = default;
    XWindow2 & operator =(XWindow2 &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setOutputSize( const ::css::awt::Size& Size ) = 0;
    virtual ::css::awt::Size SAL_CALL getOutputSize() = 0;
    virtual ::sal_Bool SAL_CALL isVisible() = 0;
    virtual ::sal_Bool SAL_CALL isActive() = 0;
    virtual ::sal_Bool SAL_CALL isEnabled() = 0;
    virtual ::sal_Bool SAL_CALL hasFocus() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XWindow2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XWindow2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XWindow2 > *);

#endif
