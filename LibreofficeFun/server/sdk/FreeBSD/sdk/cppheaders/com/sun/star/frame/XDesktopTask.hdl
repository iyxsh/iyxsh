#ifndef INCLUDED_COM_SUN_STAR_FRAME_XDESKTOPTASK_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XDESKTOPTASK_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XWindow; } } } }
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDesktopTask : public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDesktopTask() = default;
    XDesktopTask(XDesktopTask const &) = default;
    XDesktopTask(XDesktopTask &&) = default;
    XDesktopTask & operator =(XDesktopTask const &) = default;
    XDesktopTask & operator =(XDesktopTask &&) = default;
#endif


    // Methods
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL initialize( const ::css::uno::Reference< ::css::awt::XWindow >& TaskWindow ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::sal_Bool SAL_CALL close() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDesktopTask() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XDesktopTask const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XDesktopTask > *);

#endif
