#ifndef INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCOLUMNMODEL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_GRID_XGRIDCOLUMNMODEL_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { namespace grid { class XGridColumn; } } } } }
#include "com/sun/star/container/XContainer.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/util/XCloneable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt { namespace grid {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XGridColumnModel : public ::css::lang::XComponent, public ::css::container::XContainer, public ::css::util::XCloneable
{
public:
#if defined LIBO_INTERNAL_ONLY
    XGridColumnModel() = default;
    XGridColumnModel(XGridColumnModel const &) = default;
    XGridColumnModel(XGridColumnModel &&) = default;
    XGridColumnModel & operator =(XGridColumnModel const &) = default;
    XGridColumnModel & operator =(XGridColumnModel &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getColumnCount() = 0;
    virtual ::css::uno::Reference< ::css::awt::grid::XGridColumn > SAL_CALL createColumn() = 0;
    virtual ::sal_Int32 SAL_CALL addColumn( const ::css::uno::Reference< ::css::awt::grid::XGridColumn >& column ) = 0;
    virtual void SAL_CALL removeColumn( ::sal_Int32 ColumnIndex ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::awt::grid::XGridColumn > > SAL_CALL getColumns() = 0;
    virtual ::css::uno::Reference< ::css::awt::grid::XGridColumn > SAL_CALL getColumn( ::sal_Int32 index ) = 0;
    virtual void SAL_CALL setDefaultColumns( ::sal_Int32 elements ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XGridColumnModel() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::grid::XGridColumnModel const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::grid::XGridColumnModel > *);

#endif
