#ifndef INCLUDED_COM_SUN_STAR_ACCESSIBILITY_XACCESSIBLERELATIONSET_HDL
#define INCLUDED_COM_SUN_STAR_ACCESSIBILITY_XACCESSIBLERELATIONSET_HDL

#include "sal/config.h"

#include "com/sun/star/accessibility/AccessibleRelation.hdl"
#include "com/sun/star/accessibility/AccessibleRelationType.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace accessibility {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAccessibleRelationSet : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAccessibleRelationSet() = default;
    XAccessibleRelationSet(XAccessibleRelationSet const &) = default;
    XAccessibleRelationSet(XAccessibleRelationSet &&) = default;
    XAccessibleRelationSet & operator =(XAccessibleRelationSet const &) = default;
    XAccessibleRelationSet & operator =(XAccessibleRelationSet &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getRelationCount() = 0;
    virtual ::css::accessibility::AccessibleRelation SAL_CALL getRelation( ::sal_Int32 nIndex ) = 0;
    virtual ::sal_Bool SAL_CALL containsRelation( ::css::accessibility::AccessibleRelationType eRelationType ) = 0;
    virtual ::css::accessibility::AccessibleRelation SAL_CALL getRelationByType( ::css::accessibility::AccessibleRelationType eRelationType ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAccessibleRelationSet() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::accessibility::XAccessibleRelationSet const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::accessibility::XAccessibleRelationSet > *);

#endif
