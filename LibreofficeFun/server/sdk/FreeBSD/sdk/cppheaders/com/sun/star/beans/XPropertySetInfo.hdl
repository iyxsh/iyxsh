#ifndef INCLUDED_COM_SUN_STAR_BEANS_XPROPERTYSETINFO_HDL
#define INCLUDED_COM_SUN_STAR_BEANS_XPROPERTYSETINFO_HDL

#include "sal/config.h"

#include "com/sun/star/beans/Property.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace beans {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPropertySetInfo : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPropertySetInfo() = default;
    XPropertySetInfo(XPropertySetInfo const &) = default;
    XPropertySetInfo(XPropertySetInfo &&) = default;
    XPropertySetInfo & operator =(XPropertySetInfo const &) = default;
    XPropertySetInfo & operator =(XPropertySetInfo &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::beans::Property > SAL_CALL getProperties() = 0;
    virtual ::css::beans::Property SAL_CALL getPropertyByName( const ::rtl::OUString& aName ) = 0;
    virtual ::sal_Bool SAL_CALL hasPropertyByName( const ::rtl::OUString& Name ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPropertySetInfo() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::beans::XPropertySetInfo const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::beans::XPropertySetInfo > *);

#endif
