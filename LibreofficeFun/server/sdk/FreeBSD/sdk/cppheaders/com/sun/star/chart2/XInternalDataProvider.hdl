#ifndef INCLUDED_COM_SUN_STAR_CHART2_XINTERNALDATAPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XINTERNALDATAPROVIDER_HDL

#include "sal/config.h"

#include "com/sun/star/chart2/data/XDataProvider.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataSequence; } } } } }
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XInternalDataProvider : public ::css::chart2::data::XDataProvider
{
public:
#if defined LIBO_INTERNAL_ONLY
    XInternalDataProvider() = default;
    XInternalDataProvider(XInternalDataProvider const &) = default;
    XInternalDataProvider(XInternalDataProvider &&) = default;
    XInternalDataProvider & operator =(XInternalDataProvider const &) = default;
    XInternalDataProvider & operator =(XInternalDataProvider &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL hasDataByRangeRepresentation( const ::rtl::OUString& aRange ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getDataByRangeRepresentation( const ::rtl::OUString& aRange ) = 0;
    virtual void SAL_CALL setDataByRangeRepresentation( const ::rtl::OUString& aRange, const ::css::uno::Sequence< ::css::uno::Any >& aNewData ) = 0;
    virtual void SAL_CALL insertSequence( ::sal_Int32 nAfterIndex ) = 0;
    virtual void SAL_CALL deleteSequence( ::sal_Int32 nAtIndex ) = 0;
    virtual void SAL_CALL appendSequence() = 0;
    virtual void SAL_CALL insertDataPointForAllSequences( ::sal_Int32 nAfterIndex ) = 0;
    virtual void SAL_CALL deleteDataPointForAllSequences( ::sal_Int32 nAtIndex ) = 0;
    virtual void SAL_CALL swapDataPointWithNextOneForAllSequences( ::sal_Int32 nAtIndex ) = 0;
    virtual void SAL_CALL registerDataSequenceForChanges( const ::css::uno::Reference< ::css::chart2::data::XDataSequence >& xSeq ) = 0;
    virtual void SAL_CALL insertComplexCategoryLevel( ::sal_Int32 nLevel ) = 0;
    virtual void SAL_CALL deleteComplexCategoryLevel( ::sal_Int32 nLevel ) = 0;
    virtual void SAL_CALL insertDataSeries( ::sal_Int32 nAfterIndex ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XInternalDataProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XInternalDataProvider const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XInternalDataProvider > *);

#endif
