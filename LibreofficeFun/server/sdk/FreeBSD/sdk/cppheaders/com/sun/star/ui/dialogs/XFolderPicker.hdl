#ifndef INCLUDED_COM_SUN_STAR_UI_DIALOGS_XFOLDERPICKER_HDL
#define INCLUDED_COM_SUN_STAR_UI_DIALOGS_XFOLDERPICKER_HDL

#include "sal/config.h"

#include "com/sun/star/ui/dialogs/XExecutableDialog.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ui { namespace dialogs {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFolderPicker : public ::css::ui::dialogs::XExecutableDialog
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFolderPicker() = default;
    XFolderPicker(XFolderPicker const &) = default;
    XFolderPicker(XFolderPicker &&) = default;
    XFolderPicker & operator =(XFolderPicker const &) = default;
    XFolderPicker & operator =(XFolderPicker &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setDisplayDirectory( const ::rtl::OUString& aDirectory ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayDirectory() = 0;
    virtual ::rtl::OUString SAL_CALL getDirectory() = 0;
    virtual void SAL_CALL setDescription( const ::rtl::OUString& aDescription ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFolderPicker() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ui::dialogs::XFolderPicker const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::ui::dialogs::XFolderPicker > *);

#endif
