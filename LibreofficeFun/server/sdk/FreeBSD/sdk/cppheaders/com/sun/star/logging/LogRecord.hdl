#ifndef INCLUDED_COM_SUN_STAR_LOGGING_LOGRECORD_HDL
#define INCLUDED_COM_SUN_STAR_LOGGING_LOGRECORD_HDL

#include "sal/config.h"

#include "com/sun/star/util/DateTime.hdl"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace logging {

#ifdef _WIN32
#   pragma pack(push, 8)
#endif

struct SAL_DLLPUBLIC_RTTI SAL_WARN_UNUSED LogRecord {
    inline LogRecord();

    inline LogRecord(const ::rtl::OUString& LoggerName_, const ::rtl::OUString& SourceClassName_, const ::rtl::OUString& SourceMethodName_, const ::rtl::OUString& Message_, const ::css::util::DateTime& LogTime_, const ::sal_Int64& SequenceNumber_, const ::rtl::OUString& ThreadID_, const ::sal_Int32& Level_);

    ::rtl::OUString LoggerName;
    ::rtl::OUString SourceClassName;
    ::rtl::OUString SourceMethodName;
    ::rtl::OUString Message;
    ::css::util::DateTime LogTime;
    ::sal_Int64 SequenceNumber;
    ::rtl::OUString ThreadID;
    ::sal_Int32 Level;
};

#ifdef _WIN32
#   pragma pack(pop)
#endif


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::logging::LogRecord const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::logging::LogRecord *);

#endif
