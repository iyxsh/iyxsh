#ifndef INCLUDED_COM_SUN_STAR_TABLE_XCELL_HDL
#define INCLUDED_COM_SUN_STAR_TABLE_XCELL_HDL

#include "sal/config.h"

#include "com/sun/star/table/CellContentType.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace table {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCell : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCell() = default;
    XCell(XCell const &) = default;
    XCell(XCell &&) = default;
    XCell & operator =(XCell const &) = default;
    XCell & operator =(XCell &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getFormula() = 0;
    virtual void SAL_CALL setFormula( const ::rtl::OUString& aFormula ) = 0;
    virtual double SAL_CALL getValue() = 0;
    virtual void SAL_CALL setValue( double nValue ) = 0;
    virtual ::css::table::CellContentType SAL_CALL getType() = 0;
    virtual ::sal_Int32 SAL_CALL getError() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCell() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::table::XCell const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::table::XCell > *);

#endif
