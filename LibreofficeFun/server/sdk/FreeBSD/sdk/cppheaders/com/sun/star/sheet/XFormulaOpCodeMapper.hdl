#ifndef INCLUDED_COM_SUN_STAR_SHEET_XFORMULAOPCODEMAPPER_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XFORMULAOPCODEMAPPER_HDL

#include "sal/config.h"

#include "com/sun/star/sheet/FormulaOpCodeMapEntry.hdl"
#include "com/sun/star/sheet/FormulaToken.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFormulaOpCodeMapper : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFormulaOpCodeMapper() = default;
    XFormulaOpCodeMapper(XFormulaOpCodeMapper const &) = default;
    XFormulaOpCodeMapper(XFormulaOpCodeMapper &&) = default;
    XFormulaOpCodeMapper & operator =(XFormulaOpCodeMapper const &) = default;
    XFormulaOpCodeMapper & operator =(XFormulaOpCodeMapper &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getOpCodeExternal() = 0;
    virtual ::sal_Int32 SAL_CALL getOpCodeUnknown() = 0;

    // Methods
    virtual ::css::uno::Sequence< ::css::sheet::FormulaToken > SAL_CALL getMappings( const ::css::uno::Sequence< ::rtl::OUString >& Names, ::sal_Int32 Language ) = 0;
    virtual ::css::uno::Sequence< ::css::sheet::FormulaOpCodeMapEntry > SAL_CALL getAvailableMappings( ::sal_Int32 Language, ::sal_Int32 Groups ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFormulaOpCodeMapper() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XFormulaOpCodeMapper const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XFormulaOpCodeMapper > *);

#endif
