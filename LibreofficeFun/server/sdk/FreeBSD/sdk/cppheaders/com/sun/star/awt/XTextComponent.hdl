#ifndef INCLUDED_COM_SUN_STAR_AWT_XTEXTCOMPONENT_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTEXTCOMPONENT_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Selection.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XTextListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTextComponent : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTextComponent() = default;
    XTextComponent(XTextComponent const &) = default;
    XTextComponent(XTextComponent &&) = default;
    XTextComponent & operator =(XTextComponent const &) = default;
    XTextComponent & operator =(XTextComponent &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addTextListener( const ::css::uno::Reference< ::css::awt::XTextListener >& l ) = 0;
    virtual void SAL_CALL removeTextListener( const ::css::uno::Reference< ::css::awt::XTextListener >& l ) = 0;
    virtual void SAL_CALL setText( const ::rtl::OUString& aText ) = 0;
    virtual void SAL_CALL insertText( const ::css::awt::Selection& Sel, const ::rtl::OUString& Text ) = 0;
    virtual ::rtl::OUString SAL_CALL getText() = 0;
    virtual ::rtl::OUString SAL_CALL getSelectedText() = 0;
    virtual void SAL_CALL setSelection( const ::css::awt::Selection& aSelection ) = 0;
    virtual ::css::awt::Selection SAL_CALL getSelection() = 0;
    virtual ::sal_Bool SAL_CALL isEditable() = 0;
    virtual void SAL_CALL setEditable( ::sal_Bool bEditable ) = 0;
    virtual void SAL_CALL setMaxTextLen( ::sal_Int16 nLen ) = 0;
    virtual ::sal_Int16 SAL_CALL getMaxTextLen() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTextComponent() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XTextComponent const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XTextComponent > *);

#endif
