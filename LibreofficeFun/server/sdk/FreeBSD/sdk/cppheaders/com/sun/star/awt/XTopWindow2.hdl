#ifndef INCLUDED_COM_SUN_STAR_AWT_XTOPWINDOW2_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTOPWINDOW2_HDL

#include "sal/config.h"

#include "com/sun/star/awt/XTopWindow.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTopWindow2 : public ::css::awt::XTopWindow
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTopWindow2() = default;
    XTopWindow2(XTopWindow2 const &) = default;
    XTopWindow2(XTopWindow2 &&) = default;
    XTopWindow2 & operator =(XTopWindow2 const &) = default;
    XTopWindow2 & operator =(XTopWindow2 &&) = default;
#endif


    // Attributes
    virtual ::sal_Bool SAL_CALL getIsMaximized() = 0;
    virtual void SAL_CALL setIsMaximized( ::sal_Bool _ismaximized ) = 0;
    virtual ::sal_Bool SAL_CALL getIsMinimized() = 0;
    virtual void SAL_CALL setIsMinimized( ::sal_Bool _isminimized ) = 0;
    virtual ::sal_Int32 SAL_CALL getDisplay() = 0;
    virtual void SAL_CALL setDisplay( ::sal_Int32 _display ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTopWindow2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XTopWindow2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XTopWindow2 > *);

#endif
