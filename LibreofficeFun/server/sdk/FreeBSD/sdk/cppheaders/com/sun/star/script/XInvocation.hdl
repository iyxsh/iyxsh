#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XINVOCATION_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XINVOCATION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace beans { class XIntrospectionAccess; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XInvocation : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XInvocation() = default;
    XInvocation(XInvocation const &) = default;
    XInvocation(XInvocation &&) = default;
    XInvocation & operator =(XInvocation const &) = default;
    XInvocation & operator =(XInvocation &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::beans::XIntrospectionAccess > SAL_CALL getIntrospection() = 0;
    virtual ::css::uno::Any SAL_CALL invoke( const ::rtl::OUString& aFunctionName, const ::css::uno::Sequence< ::css::uno::Any >& aParams, ::css::uno::Sequence< ::sal_Int16 >& aOutParamIndex, ::css::uno::Sequence< ::css::uno::Any >& aOutParam ) = 0;
    virtual void SAL_CALL setValue( const ::rtl::OUString& aPropertyName, const ::css::uno::Any& aValue ) = 0;
    virtual ::css::uno::Any SAL_CALL getValue( const ::rtl::OUString& aPropertyName ) = 0;
    virtual ::sal_Bool SAL_CALL hasMethod( const ::rtl::OUString& aName ) = 0;
    virtual ::sal_Bool SAL_CALL hasProperty( const ::rtl::OUString& aName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XInvocation() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XInvocation const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XInvocation > *);

#endif
