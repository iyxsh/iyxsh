#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_XSECURITYSAXEVENTKEEPER_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_SAX_XSECURITYSAXEVENTKEEPER_HDL

#include "sal/config.h"

#include "com/sun/star/xml/crypto/sax/ElementMarkPriority.hdl"
#include "com/sun/star/xml/crypto/sax/XSAXEventKeeper.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto { namespace sax {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSecuritySAXEventKeeper : public ::css::xml::crypto::sax::XSAXEventKeeper
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSecuritySAXEventKeeper() = default;
    XSecuritySAXEventKeeper(XSecuritySAXEventKeeper const &) = default;
    XSecuritySAXEventKeeper(XSecuritySAXEventKeeper &&) = default;
    XSecuritySAXEventKeeper & operator =(XSecuritySAXEventKeeper const &) = default;
    XSecuritySAXEventKeeper & operator =(XSecuritySAXEventKeeper &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL addSecurityElementCollector( ::css::xml::crypto::sax::ElementMarkPriority priority, ::sal_Bool modifyElement ) = 0;
    virtual void SAL_CALL setSecurityId( ::sal_Int32 id, ::sal_Int32 securityId ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSecuritySAXEventKeeper() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::crypto::sax::XSecuritySAXEventKeeper const *);
} } } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::crypto::sax::XSecuritySAXEventKeeper > *);

#endif
