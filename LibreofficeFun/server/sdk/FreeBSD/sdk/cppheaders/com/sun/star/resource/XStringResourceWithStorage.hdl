#ifndef INCLUDED_COM_SUN_STAR_RESOURCE_XSTRINGRESOURCEWITHSTORAGE_HDL
#define INCLUDED_COM_SUN_STAR_RESOURCE_XSTRINGRESOURCEWITHSTORAGE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace embed { class XStorage; } } } }
#include "com/sun/star/resource/XStringResourcePersistence.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace resource {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStringResourceWithStorage : public ::css::resource::XStringResourcePersistence
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStringResourceWithStorage() = default;
    XStringResourceWithStorage(XStringResourceWithStorage const &) = default;
    XStringResourceWithStorage(XStringResourceWithStorage &&) = default;
    XStringResourceWithStorage & operator =(XStringResourceWithStorage const &) = default;
    XStringResourceWithStorage & operator =(XStringResourceWithStorage &&) = default;
#endif


    // Methods
    virtual void SAL_CALL storeAsStorage( const ::css::uno::Reference< ::css::embed::XStorage >& Storage ) = 0;
    virtual void SAL_CALL setStorage( const ::css::uno::Reference< ::css::embed::XStorage >& Storage ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStringResourceWithStorage() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::resource::XStringResourceWithStorage const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::resource::XStringResourceWithStorage > *);

#endif
