#ifndef INCLUDED_COM_SUN_STAR_RDF_XNAMEDGRAPH_HDL
#define INCLUDED_COM_SUN_STAR_RDF_XNAMEDGRAPH_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XEnumeration; } } } }
namespace com { namespace sun { namespace star { namespace rdf { class XNode; } } } }
namespace com { namespace sun { namespace star { namespace rdf { class XResource; } } } }
#include "com/sun/star/rdf/XURI.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rdf {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XNamedGraph : public ::css::rdf::XURI
{
public:
#if defined LIBO_INTERNAL_ONLY
    XNamedGraph() = default;
    XNamedGraph(XNamedGraph const &) = default;
    XNamedGraph(XNamedGraph &&) = default;
    XNamedGraph & operator =(XNamedGraph const &) = default;
    XNamedGraph & operator =(XNamedGraph &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::rdf::XURI > SAL_CALL getName() = 0;
    virtual void SAL_CALL clear() = 0;
    virtual void SAL_CALL addStatement( const ::css::uno::Reference< ::css::rdf::XResource >& Subject, const ::css::uno::Reference< ::css::rdf::XURI >& Predicate, const ::css::uno::Reference< ::css::rdf::XNode >& Object ) = 0;
    virtual void SAL_CALL removeStatements( const ::css::uno::Reference< ::css::rdf::XResource >& Subject, const ::css::uno::Reference< ::css::rdf::XURI >& Predicate, const ::css::uno::Reference< ::css::rdf::XNode >& Object ) = 0;
    virtual ::css::uno::Reference< ::css::container::XEnumeration > SAL_CALL getStatements( const ::css::uno::Reference< ::css::rdf::XResource >& Subject, const ::css::uno::Reference< ::css::rdf::XURI >& Predicate, const ::css::uno::Reference< ::css::rdf::XNode >& Object ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XNamedGraph() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rdf::XNamedGraph const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rdf::XNamedGraph > *);

#endif
