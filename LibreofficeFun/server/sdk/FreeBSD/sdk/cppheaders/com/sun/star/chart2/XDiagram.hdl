#ifndef INCLUDED_COM_SUN_STAR_CHART2_XDIAGRAM_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XDIAGRAM_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
namespace com { namespace sun { namespace star { namespace chart2 { class XColorScheme; } } } }
namespace com { namespace sun { namespace star { namespace chart2 { class XDataTable; } } } }
namespace com { namespace sun { namespace star { namespace chart2 { class XLegend; } } } }
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataSource; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDiagram : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDiagram() = default;
    XDiagram(XDiagram const &) = default;
    XDiagram(XDiagram &&) = default;
    XDiagram & operator =(XDiagram const &) = default;
    XDiagram & operator =(XDiagram &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::beans::XPropertySet > SAL_CALL getWall() = 0;
    virtual ::css::uno::Reference< ::css::beans::XPropertySet > SAL_CALL getFloor() = 0;
    virtual ::css::uno::Reference< ::css::chart2::XLegend > SAL_CALL getLegend() = 0;
    virtual void SAL_CALL setLegend( const ::css::uno::Reference< ::css::chart2::XLegend >& xLegend ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::XColorScheme > SAL_CALL getDefaultColorScheme() = 0;
    virtual void SAL_CALL setDefaultColorScheme( const ::css::uno::Reference< ::css::chart2::XColorScheme >& xColorScheme ) = 0;
    virtual void SAL_CALL setDiagramData( const ::css::uno::Reference< ::css::chart2::data::XDataSource >& xDataSource, const ::css::uno::Sequence< ::css::beans::PropertyValue >& aArguments ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::XDataTable > SAL_CALL getDataTable() = 0;
    virtual void SAL_CALL setDataTable( const ::css::uno::Reference< ::css::chart2::XDataTable >& xDataTable ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDiagram() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XDiagram const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XDiagram > *);

#endif
