#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_XSTORAGECHANGELISTENER_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_XSTORAGECHANGELISTENER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace embed { class XStorage; } } } }
#include "com/sun/star/lang/XEventListener.hdl"
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace document {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStorageChangeListener : public ::css::lang::XEventListener
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStorageChangeListener() = default;
    XStorageChangeListener(XStorageChangeListener const &) = default;
    XStorageChangeListener(XStorageChangeListener &&) = default;
    XStorageChangeListener & operator =(XStorageChangeListener const &) = default;
    XStorageChangeListener & operator =(XStorageChangeListener &&) = default;
#endif


    // Methods
    virtual void SAL_CALL notifyStorageChange( const ::css::uno::Reference< ::css::uno::XInterface >& xDocument, const ::css::uno::Reference< ::css::embed::XStorage >& xStorage ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStorageChangeListener() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::document::XStorageChangeListener const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::document::XStorageChangeListener > *);

#endif
