#ifndef INCLUDED_COM_SUN_STAR_SDBC_XROW_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_XROW_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XNameAccess; } } } }
namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XArray; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XBlob; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XClob; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XRef; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/Date.hdl"
#include "com/sun/star/util/DateTime.hdl"
#include "com/sun/star/util/Time.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbc {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XRow : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XRow() = default;
    XRow(XRow const &) = default;
    XRow(XRow &&) = default;
    XRow & operator =(XRow const &) = default;
    XRow & operator =(XRow &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL wasNull() = 0;
    virtual ::rtl::OUString SAL_CALL getString( ::sal_Int32 columnIndex ) = 0;
    virtual ::sal_Bool SAL_CALL getBoolean( ::sal_Int32 columnIndex ) = 0;
    virtual ::sal_Int8 SAL_CALL getByte( ::sal_Int32 columnIndex ) = 0;
    virtual ::sal_Int16 SAL_CALL getShort( ::sal_Int32 columnIndex ) = 0;
    virtual ::sal_Int32 SAL_CALL getInt( ::sal_Int32 columnIndex ) = 0;
    virtual ::sal_Int64 SAL_CALL getLong( ::sal_Int32 columnIndex ) = 0;
    virtual float SAL_CALL getFloat( ::sal_Int32 columnIndex ) = 0;
    virtual double SAL_CALL getDouble( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Sequence< ::sal_Int8 > SAL_CALL getBytes( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::util::Date SAL_CALL getDate( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::util::Time SAL_CALL getTime( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::util::DateTime SAL_CALL getTimestamp( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Reference< ::css::io::XInputStream > SAL_CALL getBinaryStream( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Reference< ::css::io::XInputStream > SAL_CALL getCharacterStream( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Any SAL_CALL getObject( ::sal_Int32 columnIndex, const ::css::uno::Reference< ::css::container::XNameAccess >& typeMap ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XRef > SAL_CALL getRef( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XBlob > SAL_CALL getBlob( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XClob > SAL_CALL getClob( ::sal_Int32 columnIndex ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XArray > SAL_CALL getArray( ::sal_Int32 columnIndex ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XRow() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbc::XRow const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbc::XRow > *);

#endif
