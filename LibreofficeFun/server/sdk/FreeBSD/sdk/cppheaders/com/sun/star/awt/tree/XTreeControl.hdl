#ifndef INCLUDED_COM_SUN_STAR_AWT_TREE_XTREECONTROL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_TREE_XTREECONTROL_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Rectangle.hdl"
namespace com { namespace sun { namespace star { namespace awt { namespace tree { class XTreeEditListener; } } } } }
namespace com { namespace sun { namespace star { namespace awt { namespace tree { class XTreeExpansionListener; } } } } }
namespace com { namespace sun { namespace star { namespace awt { namespace tree { class XTreeNode; } } } } }
#include "com/sun/star/view/XMultiSelectionSupplier.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt { namespace tree {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTreeControl : public ::css::view::XMultiSelectionSupplier
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTreeControl() = default;
    XTreeControl(XTreeControl const &) = default;
    XTreeControl(XTreeControl &&) = default;
    XTreeControl & operator =(XTreeControl const &) = default;
    XTreeControl & operator =(XTreeControl &&) = default;
#endif


    // Attributes
    virtual ::rtl::OUString SAL_CALL getDefaultExpandedGraphicURL() = 0;
    virtual void SAL_CALL setDefaultExpandedGraphicURL( const ::rtl::OUString& _defaultexpandedgraphicurl ) = 0;
    virtual ::rtl::OUString SAL_CALL getDefaultCollapsedGraphicURL() = 0;
    virtual void SAL_CALL setDefaultCollapsedGraphicURL( const ::rtl::OUString& _defaultcollapsedgraphicurl ) = 0;

    // Methods
    virtual ::sal_Bool SAL_CALL isNodeExpanded( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual ::sal_Bool SAL_CALL isNodeCollapsed( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual void SAL_CALL makeNodeVisible( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual ::sal_Bool SAL_CALL isNodeVisible( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual void SAL_CALL expandNode( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual void SAL_CALL collapseNode( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual void SAL_CALL addTreeExpansionListener( const ::css::uno::Reference< ::css::awt::tree::XTreeExpansionListener >& Listener ) = 0;
    virtual void SAL_CALL removeTreeExpansionListener( const ::css::uno::Reference< ::css::awt::tree::XTreeExpansionListener >& Listener ) = 0;
    virtual ::css::uno::Reference< ::css::awt::tree::XTreeNode > SAL_CALL getNodeForLocation( ::sal_Int32 x, ::sal_Int32 y ) = 0;
    virtual ::css::uno::Reference< ::css::awt::tree::XTreeNode > SAL_CALL getClosestNodeForLocation( ::sal_Int32 x, ::sal_Int32 y ) = 0;
    virtual ::css::awt::Rectangle SAL_CALL getNodeRect( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual ::sal_Bool SAL_CALL isEditing() = 0;
    virtual ::sal_Bool SAL_CALL stopEditing() = 0;
    virtual void SAL_CALL cancelEditing() = 0;
    virtual void SAL_CALL startEditingAtNode( const ::css::uno::Reference< ::css::awt::tree::XTreeNode >& Node ) = 0;
    virtual void SAL_CALL addTreeEditListener( const ::css::uno::Reference< ::css::awt::tree::XTreeEditListener >& Listener ) = 0;
    virtual void SAL_CALL removeTreeEditListener( const ::css::uno::Reference< ::css::awt::tree::XTreeEditListener >& Listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTreeControl() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::tree::XTreeControl const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::tree::XTreeControl > *);

#endif
