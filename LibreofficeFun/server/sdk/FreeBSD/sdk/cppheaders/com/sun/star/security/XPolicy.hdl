#ifndef INCLUDED_COM_SUN_STAR_SECURITY_XPOLICY_HDL
#define INCLUDED_COM_SUN_STAR_SECURITY_XPOLICY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace security {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPolicy : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPolicy() = default;
    XPolicy(XPolicy const &) = default;
    XPolicy(XPolicy &&) = default;
    XPolicy & operator =(XPolicy const &) = default;
    XPolicy & operator =(XPolicy &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getPermissions( const ::rtl::OUString& userId ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getDefaultPermissions() = 0;
    virtual void SAL_CALL refresh() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPolicy() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::security::XPolicy const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::security::XPolicy > *);

#endif
