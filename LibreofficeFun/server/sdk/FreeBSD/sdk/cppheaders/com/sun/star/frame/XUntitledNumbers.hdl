#ifndef INCLUDED_COM_SUN_STAR_FRAME_XUNTITLEDNUMBERS_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XUNTITLEDNUMBERS_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XUntitledNumbers : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XUntitledNumbers() = default;
    XUntitledNumbers(XUntitledNumbers const &) = default;
    XUntitledNumbers(XUntitledNumbers &&) = default;
    XUntitledNumbers & operator =(XUntitledNumbers const &) = default;
    XUntitledNumbers & operator =(XUntitledNumbers &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL leaseNumber( const ::css::uno::Reference< ::css::uno::XInterface >& xComponent ) = 0;
    virtual void SAL_CALL releaseNumber( ::sal_Int32 nNumber ) = 0;
    virtual void SAL_CALL releaseNumberForComponent( const ::css::uno::Reference< ::css::uno::XInterface >& xComponent ) = 0;
    virtual ::rtl::OUString SAL_CALL getUntitledPrefix() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XUntitledNumbers() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XUntitledNumbers const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XUntitledNumbers > *);

#endif
