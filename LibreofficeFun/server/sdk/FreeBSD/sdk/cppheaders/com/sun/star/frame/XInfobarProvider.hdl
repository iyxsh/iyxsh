#ifndef INCLUDED_COM_SUN_STAR_FRAME_XINFOBARPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XINFOBARPROVIDER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/StringPair.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XInfobarProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XInfobarProvider() = default;
    XInfobarProvider(XInfobarProvider const &) = default;
    XInfobarProvider(XInfobarProvider &&) = default;
    XInfobarProvider & operator =(XInfobarProvider const &) = default;
    XInfobarProvider & operator =(XInfobarProvider &&) = default;
#endif


    // Methods
    virtual void SAL_CALL appendInfobar( const ::rtl::OUString& id, const ::rtl::OUString& primaryMessage, const ::rtl::OUString& secondaryMessage, ::sal_Int32 infobarType, const ::css::uno::Sequence< ::css::beans::StringPair >& actionButtons, ::sal_Bool showCloseButton ) = 0;
    virtual void SAL_CALL updateInfobar( const ::rtl::OUString& id, const ::rtl::OUString& primaryMessage, const ::rtl::OUString& secondaryMessage, ::sal_Int32 infobarType ) = 0;
    virtual void SAL_CALL removeInfobar( const ::rtl::OUString& id ) = 0;
    virtual ::sal_Bool SAL_CALL hasInfobar( const ::rtl::OUString& id ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XInfobarProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XInfobarProvider const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XInfobarProvider > *);

#endif
