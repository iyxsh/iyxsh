#ifndef INCLUDED_COM_SUN_STAR_MOZILLA_XPROFILEDISCOVER_HDL
#define INCLUDED_COM_SUN_STAR_MOZILLA_XPROFILEDISCOVER_HDL

#include "sal/config.h"

#include "com/sun/star/mozilla/MozillaProductType.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace mozilla {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XProfileDiscover : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XProfileDiscover() = default;
    XProfileDiscover(XProfileDiscover const &) = default;
    XProfileDiscover(XProfileDiscover &&) = default;
    XProfileDiscover & operator =(XProfileDiscover const &) = default;
    XProfileDiscover & operator =(XProfileDiscover &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getProfileCount( ::css::mozilla::MozillaProductType product ) = 0;
    virtual ::sal_Int32 SAL_CALL getProfileList( ::css::mozilla::MozillaProductType product, ::css::uno::Sequence< ::rtl::OUString >& list ) = 0;
    virtual ::rtl::OUString SAL_CALL getDefaultProfile( ::css::mozilla::MozillaProductType product ) = 0;
    virtual ::rtl::OUString SAL_CALL getProfilePath( ::css::mozilla::MozillaProductType product, const ::rtl::OUString& profileName ) = 0;
    virtual ::sal_Bool SAL_CALL isProfileLocked( ::css::mozilla::MozillaProductType product, const ::rtl::OUString& profileName ) = 0;
    virtual ::sal_Bool SAL_CALL getProfileExists( ::css::mozilla::MozillaProductType product, const ::rtl::OUString& profileName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XProfileDiscover() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::mozilla::XProfileDiscover const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::mozilla::XProfileDiscover > *);

#endif
