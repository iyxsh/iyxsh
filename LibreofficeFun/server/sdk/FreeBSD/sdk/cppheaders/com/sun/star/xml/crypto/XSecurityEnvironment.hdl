#ifndef INCLUDED_COM_SUN_STAR_XML_CRYPTO_XSECURITYENVIRONMENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_CRYPTO_XSECURITYENVIRONMENT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace security { class XCertificate; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace crypto {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSecurityEnvironment : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSecurityEnvironment() = default;
    XSecurityEnvironment(XSecurityEnvironment const &) = default;
    XSecurityEnvironment(XSecurityEnvironment &&) = default;
    XSecurityEnvironment & operator =(XSecurityEnvironment const &) = default;
    XSecurityEnvironment & operator =(XSecurityEnvironment &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::security::XCertificate > > SAL_CALL getPersonalCertificates() = 0;
    virtual ::css::uno::Reference< ::css::security::XCertificate > SAL_CALL getCertificate( const ::rtl::OUString& issuerName, const ::css::uno::Sequence< ::sal_Int8 >& serialNumber ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::security::XCertificate > > SAL_CALL buildCertificatePath( const ::css::uno::Reference< ::css::security::XCertificate >& beginCert ) = 0;
    virtual ::css::uno::Reference< ::css::security::XCertificate > SAL_CALL createCertificateFromRaw( const ::css::uno::Sequence< ::sal_Int8 >& rawCertificate ) = 0;
    virtual ::css::uno::Reference< ::css::security::XCertificate > SAL_CALL createCertificateFromAscii( const ::rtl::OUString& asciiCertificate ) = 0;
    virtual ::sal_Int32 SAL_CALL verifyCertificate( const ::css::uno::Reference< ::css::security::XCertificate >& xEECertificate, const ::css::uno::Sequence< ::css::uno::Reference< ::css::security::XCertificate > >& intermediateCertificates ) = 0;
    virtual ::sal_Int32 SAL_CALL getCertificateCharacters( const ::css::uno::Reference< ::css::security::XCertificate >& xCertificate ) = 0;
    virtual ::rtl::OUString SAL_CALL getSecurityEnvironmentInformation() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::security::XCertificate > > SAL_CALL getAllCertificates() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSecurityEnvironment() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::crypto::XSecurityEnvironment const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::crypto::XSecurityEnvironment > *);

#endif
