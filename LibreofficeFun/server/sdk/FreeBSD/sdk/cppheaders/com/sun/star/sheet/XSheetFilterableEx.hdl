#ifndef INCLUDED_COM_SUN_STAR_SHEET_XSHEETFILTERABLEEX_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XSHEETFILTERABLEEX_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace sheet { class XSheetFilterDescriptor; } } } }
#include "com/sun/star/sheet/XSheetFilterable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSheetFilterableEx : public ::css::sheet::XSheetFilterable
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSheetFilterableEx() = default;
    XSheetFilterableEx(XSheetFilterableEx const &) = default;
    XSheetFilterableEx(XSheetFilterableEx &&) = default;
    XSheetFilterableEx & operator =(XSheetFilterableEx const &) = default;
    XSheetFilterableEx & operator =(XSheetFilterableEx &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::sheet::XSheetFilterDescriptor > SAL_CALL createFilterDescriptorByObject( const ::css::uno::Reference< ::css::sheet::XSheetFilterable >& xObject ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSheetFilterableEx() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XSheetFilterableEx const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XSheetFilterableEx > *);

#endif
