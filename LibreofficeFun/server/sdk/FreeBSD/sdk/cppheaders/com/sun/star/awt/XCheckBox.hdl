#ifndef INCLUDED_COM_SUN_STAR_AWT_XCHECKBOX_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XCHECKBOX_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XItemListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCheckBox : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCheckBox() = default;
    XCheckBox(XCheckBox const &) = default;
    XCheckBox(XCheckBox &&) = default;
    XCheckBox & operator =(XCheckBox const &) = default;
    XCheckBox & operator =(XCheckBox &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addItemListener( const ::css::uno::Reference< ::css::awt::XItemListener >& l ) = 0;
    virtual void SAL_CALL removeItemListener( const ::css::uno::Reference< ::css::awt::XItemListener >& l ) = 0;
    virtual ::sal_Int16 SAL_CALL getState() = 0;
    virtual void SAL_CALL setState( ::sal_Int16 n ) = 0;
    virtual void SAL_CALL setLabel( const ::rtl::OUString& Label ) = 0;
    virtual void SAL_CALL enableTriState( ::sal_Bool b ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCheckBox() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XCheckBox const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XCheckBox > *);

#endif
