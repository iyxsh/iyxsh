#ifndef INCLUDED_COM_SUN_STAR_GRAPHIC_XEMFPARSER_HDL
#define INCLUDED_COM_SUN_STAR_GRAPHIC_XEMFPARSER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValues.hdl"
#include "com/sun/star/geometry/RealPoint2D.hdl"
namespace com { namespace sun { namespace star { namespace graphic { class XPrimitive2D; } } } }
namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace graphic {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XEmfParser : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XEmfParser() = default;
    XEmfParser(XEmfParser const &) = default;
    XEmfParser(XEmfParser &&) = default;
    XEmfParser & operator =(XEmfParser const &) = default;
    XEmfParser & operator =(XEmfParser &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::graphic::XPrimitive2D > > SAL_CALL getDecomposition( const ::css::uno::Reference< ::css::io::XInputStream >& xEmfStream, const ::rtl::OUString& aAbsolutePath, const ::css::uno::Sequence< ::css::beans::PropertyValue >& Properties ) = 0;
    virtual void SAL_CALL setSizeHint( const ::css::geometry::RealPoint2D& Size ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XEmfParser() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::graphic::XEmfParser const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::graphic::XEmfParser > *);

#endif
