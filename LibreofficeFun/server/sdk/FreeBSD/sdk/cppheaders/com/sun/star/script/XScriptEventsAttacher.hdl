#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XSCRIPTEVENTSATTACHER_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XSCRIPTEVENTSATTACHER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace script { class XScriptListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XScriptEventsAttacher : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XScriptEventsAttacher() = default;
    XScriptEventsAttacher(XScriptEventsAttacher const &) = default;
    XScriptEventsAttacher(XScriptEventsAttacher &&) = default;
    XScriptEventsAttacher & operator =(XScriptEventsAttacher const &) = default;
    XScriptEventsAttacher & operator =(XScriptEventsAttacher &&) = default;
#endif


    // Methods
    virtual void SAL_CALL attachEvents( const ::css::uno::Sequence< ::css::uno::Reference< ::css::uno::XInterface > >& Objects, const ::css::uno::Reference< ::css::script::XScriptListener >& xListener, const ::css::uno::Any& Helper ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XScriptEventsAttacher() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XScriptEventsAttacher const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XScriptEventsAttacher > *);

#endif
