#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_XUNDOMANAGER_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_XUNDOMANAGER_HDL

#include "sal/config.h"

#include "com/sun/star/container/XChild.hdl"
namespace com { namespace sun { namespace star { namespace document { class XUndoAction; } } } }
namespace com { namespace sun { namespace star { namespace document { class XUndoManagerListener; } } } }
#include "com/sun/star/util/XLockable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace document {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XUndoManager : public ::css::util::XLockable, public ::css::container::XChild
{
public:
#if defined LIBO_INTERNAL_ONLY
    XUndoManager() = default;
    XUndoManager(XUndoManager const &) = default;
    XUndoManager(XUndoManager &&) = default;
    XUndoManager & operator =(XUndoManager const &) = default;
    XUndoManager & operator =(XUndoManager &&) = default;
#endif


    // Methods
    virtual void SAL_CALL enterUndoContext( const ::rtl::OUString& iTitle ) = 0;
    virtual void SAL_CALL enterHiddenUndoContext() = 0;
    virtual void SAL_CALL leaveUndoContext() = 0;
    virtual void SAL_CALL addUndoAction( const ::css::uno::Reference< ::css::document::XUndoAction >& iAction ) = 0;
    virtual void SAL_CALL undo() = 0;
    virtual void SAL_CALL redo() = 0;
    virtual ::sal_Bool SAL_CALL isUndoPossible() = 0;
    virtual ::sal_Bool SAL_CALL isRedoPossible() = 0;
    virtual ::rtl::OUString SAL_CALL getCurrentUndoActionTitle() = 0;
    virtual ::rtl::OUString SAL_CALL getCurrentRedoActionTitle() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAllUndoActionTitles() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAllRedoActionTitles() = 0;
    virtual void SAL_CALL clear() = 0;
    virtual void SAL_CALL clearRedo() = 0;
    virtual void SAL_CALL reset() = 0;
    virtual void SAL_CALL addUndoManagerListener( const ::css::uno::Reference< ::css::document::XUndoManagerListener >& iListener ) = 0;
    virtual void SAL_CALL removeUndoManagerListener( const ::css::uno::Reference< ::css::document::XUndoManagerListener >& iListener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XUndoManager() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::document::XUndoManager const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::document::XUndoManager > *);

#endif
