#ifndef INCLUDED_COM_SUN_STAR_CONTAINER_XIMPLICITIDACCESS_HDL
#define INCLUDED_COM_SUN_STAR_CONTAINER_XIMPLICITIDACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/container/XElementAccess.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace container {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XImplicitIDAccess : public ::css::container::XElementAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XImplicitIDAccess() = default;
    XImplicitIDAccess(XImplicitIDAccess const &) = default;
    XImplicitIDAccess(XImplicitIDAccess &&) = default;
    XImplicitIDAccess & operator =(XImplicitIDAccess const &) = default;
    XImplicitIDAccess & operator =(XImplicitIDAccess &&) = default;
#endif


    // Methods
    virtual ::css::uno::Any SAL_CALL getByImplicitID( const ::rtl::OUString& ID ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getImplicitIDs() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XImplicitIDAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::container::XImplicitIDAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::container::XImplicitIDAccess > *);

#endif
