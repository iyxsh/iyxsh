#ifndef INCLUDED_COM_SUN_STAR_FRAME_XFRAMES_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XFRAMES_HDL

#include "sal/config.h"

#include "com/sun/star/container/XIndexAccess.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XFrame; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFrames : public ::css::container::XIndexAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFrames() = default;
    XFrames(XFrames const &) = default;
    XFrames(XFrames &&) = default;
    XFrames & operator =(XFrames const &) = default;
    XFrames & operator =(XFrames &&) = default;
#endif


    // Methods
    virtual void SAL_CALL append( const ::css::uno::Reference< ::css::frame::XFrame >& xFrame ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::frame::XFrame > > SAL_CALL queryFrames( ::sal_Int32 nSearchFlags ) = 0;
    virtual void SAL_CALL remove( const ::css::uno::Reference< ::css::frame::XFrame >& xFrame ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFrames() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XFrames const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XFrames > *);

#endif
