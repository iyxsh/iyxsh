#ifndef INCLUDED_COM_SUN_STAR_ANIMATIONS_XTIMECONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_ANIMATIONS_XTIMECONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/animations/XAnimationNode.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace animations {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTimeContainer : public ::css::animations::XAnimationNode
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTimeContainer() = default;
    XTimeContainer(XTimeContainer const &) = default;
    XTimeContainer(XTimeContainer &&) = default;
    XTimeContainer & operator =(XTimeContainer const &) = default;
    XTimeContainer & operator =(XTimeContainer &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::animations::XAnimationNode > SAL_CALL insertBefore( const ::css::uno::Reference< ::css::animations::XAnimationNode >& newChild, const ::css::uno::Reference< ::css::animations::XAnimationNode >& refChild ) = 0;
    virtual ::css::uno::Reference< ::css::animations::XAnimationNode > SAL_CALL insertAfter( const ::css::uno::Reference< ::css::animations::XAnimationNode >& newChild, const ::css::uno::Reference< ::css::animations::XAnimationNode >& refChild ) = 0;
    virtual ::css::uno::Reference< ::css::animations::XAnimationNode > SAL_CALL replaceChild( const ::css::uno::Reference< ::css::animations::XAnimationNode >& newChild, const ::css::uno::Reference< ::css::animations::XAnimationNode >& oldChild ) = 0;
    virtual ::css::uno::Reference< ::css::animations::XAnimationNode > SAL_CALL removeChild( const ::css::uno::Reference< ::css::animations::XAnimationNode >& oldChild ) = 0;
    virtual ::css::uno::Reference< ::css::animations::XAnimationNode > SAL_CALL appendChild( const ::css::uno::Reference< ::css::animations::XAnimationNode >& newChild ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTimeContainer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::animations::XTimeContainer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::animations::XTimeContainer > *);

#endif
