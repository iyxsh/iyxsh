#ifndef INCLUDED_COM_SUN_STAR_UTIL_XUPDATABLE2_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XUPDATABLE2_HDL

#include "sal/config.h"

#include "com/sun/star/util/XUpdatable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XUpdatable2 : public ::css::util::XUpdatable
{
public:
#if defined LIBO_INTERNAL_ONLY
    XUpdatable2() = default;
    XUpdatable2(XUpdatable2 const &) = default;
    XUpdatable2(XUpdatable2 &&) = default;
    XUpdatable2 & operator =(XUpdatable2 const &) = default;
    XUpdatable2 & operator =(XUpdatable2 &&) = default;
#endif


    // Methods
    virtual void SAL_CALL updateSoft() = 0;
    virtual void SAL_CALL updateHard() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XUpdatable2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XUpdatable2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XUpdatable2 > *);

#endif
