#ifndef INCLUDED_COM_SUN_STAR_CONTAINER_XINDEXACCESS_HDL
#define INCLUDED_COM_SUN_STAR_CONTAINER_XINDEXACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/container/XElementAccess.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace container {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XIndexAccess : public ::css::container::XElementAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XIndexAccess() = default;
    XIndexAccess(XIndexAccess const &) = default;
    XIndexAccess(XIndexAccess &&) = default;
    XIndexAccess & operator =(XIndexAccess const &) = default;
    XIndexAccess & operator =(XIndexAccess &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getCount() = 0;
    virtual ::css::uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XIndexAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::container::XIndexAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::container::XIndexAccess > *);

#endif
