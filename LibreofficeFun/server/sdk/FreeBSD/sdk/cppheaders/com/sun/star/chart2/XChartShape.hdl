#ifndef INCLUDED_COM_SUN_STAR_CHART2_XCHARTSHAPE_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XCHARTSHAPE_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Point.hdl"
#include "com/sun/star/awt/Size.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XChartShape : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XChartShape() = default;
    XChartShape(XChartShape const &) = default;
    XChartShape(XChartShape &&) = default;
    XChartShape & operator =(XChartShape const &) = default;
    XChartShape & operator =(XChartShape &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setPropertyValue( const ::rtl::OUString& aPropertyName, const ::css::uno::Any& aValue ) = 0;
    virtual ::css::uno::Any SAL_CALL getPropertyValue( const ::rtl::OUString& PropertyName ) = 0;
    virtual ::css::awt::Point SAL_CALL getPosition() = 0;
    virtual void SAL_CALL setPosition( const ::css::awt::Point& aPosition ) = 0;
    virtual ::css::awt::Size SAL_CALL getSize() = 0;
    virtual void SAL_CALL setSize( const ::css::awt::Size& aSize ) = 0;
    virtual ::rtl::OUString SAL_CALL getShapeType() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XChartShape() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XChartShape const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XChartShape > *);

#endif
