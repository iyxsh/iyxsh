#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_XINTERACTIONFILTEROPTIONS_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_XINTERACTIONFILTEROPTIONS_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/task/XInteractionContinuation.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace document {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XInteractionFilterOptions : public ::css::task::XInteractionContinuation
{
public:
#if defined LIBO_INTERNAL_ONLY
    XInteractionFilterOptions() = default;
    XInteractionFilterOptions(XInteractionFilterOptions const &) = default;
    XInteractionFilterOptions(XInteractionFilterOptions &&) = default;
    XInteractionFilterOptions & operator =(XInteractionFilterOptions const &) = default;
    XInteractionFilterOptions & operator =(XInteractionFilterOptions &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setFilterOptions( const ::css::uno::Sequence< ::css::beans::PropertyValue >& rProperties ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getFilterOptions() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XInteractionFilterOptions() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::document::XInteractionFilterOptions const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::document::XInteractionFilterOptions > *);

#endif
