#ifndef INCLUDED_COM_SUN_STAR_CONTAINER_XHIERARCHICALNAMEACCESS_HDL
#define INCLUDED_COM_SUN_STAR_CONTAINER_XHIERARCHICALNAMEACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace container {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XHierarchicalNameAccess : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XHierarchicalNameAccess() = default;
    XHierarchicalNameAccess(XHierarchicalNameAccess const &) = default;
    XHierarchicalNameAccess(XHierarchicalNameAccess &&) = default;
    XHierarchicalNameAccess & operator =(XHierarchicalNameAccess const &) = default;
    XHierarchicalNameAccess & operator =(XHierarchicalNameAccess &&) = default;
#endif


    // Methods
    virtual ::css::uno::Any SAL_CALL getByHierarchicalName( const ::rtl::OUString& aName ) = 0;
    virtual ::sal_Bool SAL_CALL hasByHierarchicalName( const ::rtl::OUString& aName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XHierarchicalNameAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::container::XHierarchicalNameAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::container::XHierarchicalNameAccess > *);

#endif
