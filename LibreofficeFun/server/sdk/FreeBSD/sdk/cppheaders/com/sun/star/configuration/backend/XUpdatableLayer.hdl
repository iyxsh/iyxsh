#ifndef INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XUPDATABLELAYER_HDL
#define INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XUPDATABLELAYER_HDL

#include "sal/config.h"

#include "com/sun/star/configuration/backend/XLayer.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace configuration { namespace backend {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XUpdatableLayer : public ::css::configuration::backend::XLayer
{
public:
#if defined LIBO_INTERNAL_ONLY
    XUpdatableLayer() = default;
    XUpdatableLayer(XUpdatableLayer const &) = default;
    XUpdatableLayer(XUpdatableLayer &&) = default;
    XUpdatableLayer & operator =(XUpdatableLayer const &) = default;
    XUpdatableLayer & operator =(XUpdatableLayer &&) = default;
#endif


    // Methods
    virtual void SAL_CALL replaceWith( const ::css::uno::Reference< ::css::configuration::backend::XLayer >& aNewLayer ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XUpdatableLayer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::configuration::backend::XUpdatableLayer const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::configuration::backend::XUpdatableLayer > *);

#endif
