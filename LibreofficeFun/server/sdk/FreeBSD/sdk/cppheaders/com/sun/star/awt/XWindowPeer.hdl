#ifndef INCLUDED_COM_SUN_STAR_AWT_XWINDOWPEER_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XWINDOWPEER_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Rectangle.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XPointer; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XToolkit; } } } }
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/util/Color.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XWindowPeer : public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XWindowPeer() = default;
    XWindowPeer(XWindowPeer const &) = default;
    XWindowPeer(XWindowPeer &&) = default;
    XWindowPeer & operator =(XWindowPeer const &) = default;
    XWindowPeer & operator =(XWindowPeer &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::XToolkit > SAL_CALL getToolkit() = 0;
    virtual void SAL_CALL setPointer( const ::css::uno::Reference< ::css::awt::XPointer >& Pointer ) = 0;
    virtual void SAL_CALL setBackground( ::sal_Int32 Color ) = 0;
    virtual void SAL_CALL invalidate( ::sal_Int16 Flags ) = 0;
    virtual void SAL_CALL invalidateRect( const ::css::awt::Rectangle& Rect, ::sal_Int16 Flags ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XWindowPeer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XWindowPeer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XWindowPeer > *);

#endif
