#ifndef INCLUDED_COM_SUN_STAR_SDBCX_XAPPEND_HDL
#define INCLUDED_COM_SUN_STAR_SDBCX_XAPPEND_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbcx {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAppend : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAppend() = default;
    XAppend(XAppend const &) = default;
    XAppend(XAppend &&) = default;
    XAppend & operator =(XAppend const &) = default;
    XAppend & operator =(XAppend &&) = default;
#endif


    // Methods
    virtual void SAL_CALL appendByDescriptor( const ::css::uno::Reference< ::css::beans::XPropertySet >& descriptor ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAppend() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbcx::XAppend const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbcx::XAppend > *);

#endif
