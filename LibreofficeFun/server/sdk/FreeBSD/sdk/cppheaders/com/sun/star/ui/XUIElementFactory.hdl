#ifndef INCLUDED_COM_SUN_STAR_UI_XUIELEMENTFACTORY_HDL
#define INCLUDED_COM_SUN_STAR_UI_XUIELEMENTFACTORY_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace ui { class XUIElement; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ui {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XUIElementFactory : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XUIElementFactory() = default;
    XUIElementFactory(XUIElementFactory const &) = default;
    XUIElementFactory(XUIElementFactory &&) = default;
    XUIElementFactory & operator =(XUIElementFactory const &) = default;
    XUIElementFactory & operator =(XUIElementFactory &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::ui::XUIElement > SAL_CALL createUIElement( const ::rtl::OUString& ResourceURL, const ::css::uno::Sequence< ::css::beans::PropertyValue >& Args ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XUIElementFactory() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ui::XUIElementFactory const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::ui::XUIElementFactory > *);

#endif
