#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XINTEGERBITMAP_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XINTEGERBITMAP_HDL

#include "sal/config.h"

#include "com/sun/star/geometry/IntegerPoint2D.hdl"
#include "com/sun/star/geometry/IntegerRectangle2D.hdl"
#include "com/sun/star/rendering/IntegerBitmapLayout.hdl"
#include "com/sun/star/rendering/XIntegerReadOnlyBitmap.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XIntegerBitmap : public ::css::rendering::XIntegerReadOnlyBitmap
{
public:
#if defined LIBO_INTERNAL_ONLY
    XIntegerBitmap() = default;
    XIntegerBitmap(XIntegerBitmap const &) = default;
    XIntegerBitmap(XIntegerBitmap &&) = default;
    XIntegerBitmap & operator =(XIntegerBitmap const &) = default;
    XIntegerBitmap & operator =(XIntegerBitmap &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setData( const ::css::uno::Sequence< ::sal_Int8 >& data, const ::css::rendering::IntegerBitmapLayout& bitmapLayout, const ::css::geometry::IntegerRectangle2D& rect ) = 0;
    virtual void SAL_CALL setPixel( const ::css::uno::Sequence< ::sal_Int8 >& color, const ::css::rendering::IntegerBitmapLayout& bitmapLayout, const ::css::geometry::IntegerPoint2D& pos ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XIntegerBitmap() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rendering::XIntegerBitmap const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rendering::XIntegerBitmap > *);

#endif
