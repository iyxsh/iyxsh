#ifndef INCLUDED_COM_SUN_STAR_SDBC_XROWSET_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_XROWSET_HDL

#include "sal/config.h"

#include "com/sun/star/sdbc/XResultSet.hdl"
namespace com { namespace sun { namespace star { namespace sdbc { class XRowSetListener; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbc {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XRowSet : public ::css::sdbc::XResultSet
{
public:
#if defined LIBO_INTERNAL_ONLY
    XRowSet() = default;
    XRowSet(XRowSet const &) = default;
    XRowSet(XRowSet &&) = default;
    XRowSet & operator =(XRowSet const &) = default;
    XRowSet & operator =(XRowSet &&) = default;
#endif


    // Methods
    virtual void SAL_CALL execute() = 0;
    virtual void SAL_CALL addRowSetListener( const ::css::uno::Reference< ::css::sdbc::XRowSetListener >& listener ) = 0;
    virtual void SAL_CALL removeRowSetListener( const ::css::uno::Reference< ::css::sdbc::XRowSetListener >& listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XRowSet() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbc::XRowSet const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbc::XRowSet > *);

#endif
