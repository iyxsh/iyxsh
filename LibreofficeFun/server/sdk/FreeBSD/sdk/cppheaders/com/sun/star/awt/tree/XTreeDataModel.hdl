#ifndef INCLUDED_COM_SUN_STAR_AWT_TREE_XTREEDATAMODEL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_TREE_XTREEDATAMODEL_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { namespace tree { class XTreeDataModelListener; } } } } }
namespace com { namespace sun { namespace star { namespace awt { namespace tree { class XTreeNode; } } } } }
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt { namespace tree {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTreeDataModel : public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTreeDataModel() = default;
    XTreeDataModel(XTreeDataModel const &) = default;
    XTreeDataModel(XTreeDataModel &&) = default;
    XTreeDataModel & operator =(XTreeDataModel const &) = default;
    XTreeDataModel & operator =(XTreeDataModel &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::tree::XTreeNode > SAL_CALL getRoot() = 0;
    virtual void SAL_CALL addTreeDataModelListener( const ::css::uno::Reference< ::css::awt::tree::XTreeDataModelListener >& Listener ) = 0;
    virtual void SAL_CALL removeTreeDataModelListener( const ::css::uno::Reference< ::css::awt::tree::XTreeDataModelListener >& Listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTreeDataModel() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::tree::XTreeDataModel const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::tree::XTreeDataModel > *);

#endif
