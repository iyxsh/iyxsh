#ifndef INCLUDED_COM_SUN_STAR_CHART2_XTIMEBASED_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XTIMEBASED_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTimeBased : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTimeBased() = default;
    XTimeBased(XTimeBased const &) = default;
    XTimeBased(XTimeBased &&) = default;
    XTimeBased & operator =(XTimeBased const &) = default;
    XTimeBased & operator =(XTimeBased &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL switchToNext( ::sal_Bool wrap ) = 0;
    virtual ::sal_Bool SAL_CALL setToPointInTime( ::sal_Int32 point ) = 0;
    virtual void SAL_CALL setRange( ::sal_Int32 start, ::sal_Int32 end ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTimeBased() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XTimeBased const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XTimeBased > *);

#endif
