#ifndef INCLUDED_COM_SUN_STAR_SDBC_XDATABASEMETADATA_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_XDATABASEMETADATA_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace sdbc { class XConnection; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XResultSet; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbc {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDatabaseMetaData : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDatabaseMetaData() = default;
    XDatabaseMetaData(XDatabaseMetaData const &) = default;
    XDatabaseMetaData(XDatabaseMetaData &&) = default;
    XDatabaseMetaData & operator =(XDatabaseMetaData const &) = default;
    XDatabaseMetaData & operator =(XDatabaseMetaData &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL allProceduresAreCallable() = 0;
    virtual ::sal_Bool SAL_CALL allTablesAreSelectable() = 0;
    virtual ::rtl::OUString SAL_CALL getURL() = 0;
    virtual ::rtl::OUString SAL_CALL getUserName() = 0;
    virtual ::sal_Bool SAL_CALL isReadOnly() = 0;
    virtual ::sal_Bool SAL_CALL nullsAreSortedHigh() = 0;
    virtual ::sal_Bool SAL_CALL nullsAreSortedLow() = 0;
    virtual ::sal_Bool SAL_CALL nullsAreSortedAtStart() = 0;
    virtual ::sal_Bool SAL_CALL nullsAreSortedAtEnd() = 0;
    virtual ::rtl::OUString SAL_CALL getDatabaseProductName() = 0;
    virtual ::rtl::OUString SAL_CALL getDatabaseProductVersion() = 0;
    virtual ::rtl::OUString SAL_CALL getDriverName() = 0;
    virtual ::rtl::OUString SAL_CALL getDriverVersion() = 0;
    virtual ::sal_Int32 SAL_CALL getDriverMajorVersion() = 0;
    virtual ::sal_Int32 SAL_CALL getDriverMinorVersion() = 0;
    virtual ::sal_Bool SAL_CALL usesLocalFiles() = 0;
    virtual ::sal_Bool SAL_CALL usesLocalFilePerTable() = 0;
    virtual ::sal_Bool SAL_CALL supportsMixedCaseIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL storesUpperCaseIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL storesLowerCaseIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL storesMixedCaseIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL supportsMixedCaseQuotedIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL storesUpperCaseQuotedIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL storesLowerCaseQuotedIdentifiers() = 0;
    virtual ::sal_Bool SAL_CALL storesMixedCaseQuotedIdentifiers() = 0;
    virtual ::rtl::OUString SAL_CALL getIdentifierQuoteString() = 0;
    virtual ::rtl::OUString SAL_CALL getSQLKeywords() = 0;
    virtual ::rtl::OUString SAL_CALL getNumericFunctions() = 0;
    virtual ::rtl::OUString SAL_CALL getStringFunctions() = 0;
    virtual ::rtl::OUString SAL_CALL getSystemFunctions() = 0;
    virtual ::rtl::OUString SAL_CALL getTimeDateFunctions() = 0;
    virtual ::rtl::OUString SAL_CALL getSearchStringEscape() = 0;
    virtual ::rtl::OUString SAL_CALL getExtraNameCharacters() = 0;
    virtual ::sal_Bool SAL_CALL supportsAlterTableWithAddColumn() = 0;
    virtual ::sal_Bool SAL_CALL supportsAlterTableWithDropColumn() = 0;
    virtual ::sal_Bool SAL_CALL supportsColumnAliasing() = 0;
    virtual ::sal_Bool SAL_CALL nullPlusNonNullIsNull() = 0;
    virtual ::sal_Bool SAL_CALL supportsTypeConversion() = 0;
    virtual ::sal_Bool SAL_CALL supportsConvert( ::sal_Int32 fromType, ::sal_Int32 toType ) = 0;
    virtual ::sal_Bool SAL_CALL supportsTableCorrelationNames() = 0;
    virtual ::sal_Bool SAL_CALL supportsDifferentTableCorrelationNames() = 0;
    virtual ::sal_Bool SAL_CALL supportsExpressionsInOrderBy() = 0;
    virtual ::sal_Bool SAL_CALL supportsOrderByUnrelated() = 0;
    virtual ::sal_Bool SAL_CALL supportsGroupBy() = 0;
    virtual ::sal_Bool SAL_CALL supportsGroupByUnrelated() = 0;
    virtual ::sal_Bool SAL_CALL supportsGroupByBeyondSelect() = 0;
    virtual ::sal_Bool SAL_CALL supportsLikeEscapeClause() = 0;
    virtual ::sal_Bool SAL_CALL supportsMultipleResultSets() = 0;
    virtual ::sal_Bool SAL_CALL supportsMultipleTransactions() = 0;
    virtual ::sal_Bool SAL_CALL supportsNonNullableColumns() = 0;
    virtual ::sal_Bool SAL_CALL supportsMinimumSQLGrammar() = 0;
    virtual ::sal_Bool SAL_CALL supportsCoreSQLGrammar() = 0;
    virtual ::sal_Bool SAL_CALL supportsExtendedSQLGrammar() = 0;
    virtual ::sal_Bool SAL_CALL supportsANSI92EntryLevelSQL() = 0;
    virtual ::sal_Bool SAL_CALL supportsANSI92IntermediateSQL() = 0;
    virtual ::sal_Bool SAL_CALL supportsANSI92FullSQL() = 0;
    virtual ::sal_Bool SAL_CALL supportsIntegrityEnhancementFacility() = 0;
    virtual ::sal_Bool SAL_CALL supportsOuterJoins() = 0;
    virtual ::sal_Bool SAL_CALL supportsFullOuterJoins() = 0;
    virtual ::sal_Bool SAL_CALL supportsLimitedOuterJoins() = 0;
    virtual ::rtl::OUString SAL_CALL getSchemaTerm() = 0;
    virtual ::rtl::OUString SAL_CALL getProcedureTerm() = 0;
    virtual ::rtl::OUString SAL_CALL getCatalogTerm() = 0;
    virtual ::sal_Bool SAL_CALL isCatalogAtStart() = 0;
    virtual ::rtl::OUString SAL_CALL getCatalogSeparator() = 0;
    virtual ::sal_Bool SAL_CALL supportsSchemasInDataManipulation() = 0;
    virtual ::sal_Bool SAL_CALL supportsSchemasInProcedureCalls() = 0;
    virtual ::sal_Bool SAL_CALL supportsSchemasInTableDefinitions() = 0;
    virtual ::sal_Bool SAL_CALL supportsSchemasInIndexDefinitions() = 0;
    virtual ::sal_Bool SAL_CALL supportsSchemasInPrivilegeDefinitions() = 0;
    virtual ::sal_Bool SAL_CALL supportsCatalogsInDataManipulation() = 0;
    virtual ::sal_Bool SAL_CALL supportsCatalogsInProcedureCalls() = 0;
    virtual ::sal_Bool SAL_CALL supportsCatalogsInTableDefinitions() = 0;
    virtual ::sal_Bool SAL_CALL supportsCatalogsInIndexDefinitions() = 0;
    virtual ::sal_Bool SAL_CALL supportsCatalogsInPrivilegeDefinitions() = 0;
    virtual ::sal_Bool SAL_CALL supportsPositionedDelete() = 0;
    virtual ::sal_Bool SAL_CALL supportsPositionedUpdate() = 0;
    virtual ::sal_Bool SAL_CALL supportsSelectForUpdate() = 0;
    virtual ::sal_Bool SAL_CALL supportsStoredProcedures() = 0;
    virtual ::sal_Bool SAL_CALL supportsSubqueriesInComparisons() = 0;
    virtual ::sal_Bool SAL_CALL supportsSubqueriesInExists() = 0;
    virtual ::sal_Bool SAL_CALL supportsSubqueriesInIns() = 0;
    virtual ::sal_Bool SAL_CALL supportsSubqueriesInQuantifieds() = 0;
    virtual ::sal_Bool SAL_CALL supportsCorrelatedSubqueries() = 0;
    virtual ::sal_Bool SAL_CALL supportsUnion() = 0;
    virtual ::sal_Bool SAL_CALL supportsUnionAll() = 0;
    virtual ::sal_Bool SAL_CALL supportsOpenCursorsAcrossCommit() = 0;
    virtual ::sal_Bool SAL_CALL supportsOpenCursorsAcrossRollback() = 0;
    virtual ::sal_Bool SAL_CALL supportsOpenStatementsAcrossCommit() = 0;
    virtual ::sal_Bool SAL_CALL supportsOpenStatementsAcrossRollback() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxBinaryLiteralLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxCharLiteralLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxColumnNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxColumnsInGroupBy() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxColumnsInIndex() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxColumnsInOrderBy() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxColumnsInSelect() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxColumnsInTable() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxConnections() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxCursorNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxIndexLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxSchemaNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxProcedureNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxCatalogNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxRowSize() = 0;
    virtual ::sal_Bool SAL_CALL doesMaxRowSizeIncludeBlobs() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxStatementLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxStatements() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxTableNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxTablesInSelect() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxUserNameLength() = 0;
    virtual ::sal_Int32 SAL_CALL getDefaultTransactionIsolation() = 0;
    virtual ::sal_Bool SAL_CALL supportsTransactions() = 0;
    virtual ::sal_Bool SAL_CALL supportsTransactionIsolationLevel( ::sal_Int32 level ) = 0;
    virtual ::sal_Bool SAL_CALL supportsDataDefinitionAndDataManipulationTransactions() = 0;
    virtual ::sal_Bool SAL_CALL supportsDataManipulationTransactionsOnly() = 0;
    virtual ::sal_Bool SAL_CALL dataDefinitionCausesTransactionCommit() = 0;
    virtual ::sal_Bool SAL_CALL dataDefinitionIgnoredInTransactions() = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getProcedures( const ::css::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& procedureNamePattern ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getProcedureColumns( const ::css::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& procedureNamePattern, const ::rtl::OUString& columnNamePattern ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getTables( const ::css::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern, const ::css::uno::Sequence< ::rtl::OUString >& types ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getSchemas() = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getCatalogs() = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getTableTypes() = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getColumns( const ::css::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern, const ::rtl::OUString& columnNamePattern ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getColumnPrivileges( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, const ::rtl::OUString& columnNamePattern ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getTablePrivileges( const ::css::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& tableNamePattern ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getBestRowIdentifier( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, ::sal_Int32 scope, ::sal_Bool nullable ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getVersionColumns( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getPrimaryKeys( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getImportedKeys( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getExportedKeys( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getCrossReference( const ::css::uno::Any& primaryCatalog, const ::rtl::OUString& primarySchema, const ::rtl::OUString& primaryTable, const ::css::uno::Any& foreignCatalog, const ::rtl::OUString& foreignSchema, const ::rtl::OUString& foreignTable ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getTypeInfo() = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getIndexInfo( const ::css::uno::Any& catalog, const ::rtl::OUString& schema, const ::rtl::OUString& table, ::sal_Bool unique, ::sal_Bool approximate ) = 0;
    virtual ::sal_Bool SAL_CALL supportsResultSetType( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL supportsResultSetConcurrency( ::sal_Int32 setType, ::sal_Int32 concurrency ) = 0;
    virtual ::sal_Bool SAL_CALL ownUpdatesAreVisible( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL ownDeletesAreVisible( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL ownInsertsAreVisible( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL othersUpdatesAreVisible( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL othersDeletesAreVisible( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL othersInsertsAreVisible( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL updatesAreDetected( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL deletesAreDetected( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL insertsAreDetected( ::sal_Int32 setType ) = 0;
    virtual ::sal_Bool SAL_CALL supportsBatchUpdates() = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getUDTs( const ::css::uno::Any& catalog, const ::rtl::OUString& schemaPattern, const ::rtl::OUString& typeNamePattern, const ::css::uno::Sequence< ::sal_Int32 >& types ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XConnection > SAL_CALL getConnection() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDatabaseMetaData() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbc::XDatabaseMetaData const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbc::XDatabaseMetaData > *);

#endif
