#ifndef INCLUDED_COM_SUN_STAR_SHEET_XNAMEDRANGES_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XNAMEDRANGES_HDL

#include "sal/config.h"

#include "com/sun/star/container/XNameAccess.hdl"
#include "com/sun/star/sheet/Border.hdl"
#include "com/sun/star/table/CellAddress.hdl"
#include "com/sun/star/table/CellRangeAddress.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XNamedRanges : public ::css::container::XNameAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XNamedRanges() = default;
    XNamedRanges(XNamedRanges const &) = default;
    XNamedRanges(XNamedRanges &&) = default;
    XNamedRanges & operator =(XNamedRanges const &) = default;
    XNamedRanges & operator =(XNamedRanges &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addNewByName( const ::rtl::OUString& aName, const ::rtl::OUString& aContent, const ::css::table::CellAddress& aPosition, ::sal_Int32 nType ) = 0;
    virtual void SAL_CALL addNewFromTitles( const ::css::table::CellRangeAddress& aSource, ::css::sheet::Border aBorder ) = 0;
    virtual void SAL_CALL removeByName( const ::rtl::OUString& aName ) = 0;
    virtual void SAL_CALL outputList( const ::css::table::CellAddress& aOutputPosition ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XNamedRanges() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XNamedRanges const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XNamedRanges > *);

#endif
