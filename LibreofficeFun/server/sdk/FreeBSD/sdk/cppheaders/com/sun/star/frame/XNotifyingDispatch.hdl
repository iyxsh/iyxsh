#ifndef INCLUDED_COM_SUN_STAR_FRAME_XNOTIFYINGDISPATCH_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XNOTIFYINGDISPATCH_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/frame/XDispatch.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XDispatchResultListener; } } } }
#include "com/sun/star/util/URL.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XNotifyingDispatch : public ::css::frame::XDispatch
{
public:
#if defined LIBO_INTERNAL_ONLY
    XNotifyingDispatch() = default;
    XNotifyingDispatch(XNotifyingDispatch const &) = default;
    XNotifyingDispatch(XNotifyingDispatch &&) = default;
    XNotifyingDispatch & operator =(XNotifyingDispatch const &) = default;
    XNotifyingDispatch & operator =(XNotifyingDispatch &&) = default;
#endif


    // Methods
    virtual void SAL_CALL dispatchWithNotification( const ::css::util::URL& URL, const ::css::uno::Sequence< ::css::beans::PropertyValue >& Arguments, const ::css::uno::Reference< ::css::frame::XDispatchResultListener >& Listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XNotifyingDispatch() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XNotifyingDispatch const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XNotifyingDispatch > *);

#endif
