#ifndef INCLUDED_COM_SUN_STAR_MAIL_XSMTPSERVICE_HDL
#define INCLUDED_COM_SUN_STAR_MAIL_XSMTPSERVICE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace mail { class XMailMessage; } } } }
#include "com/sun/star/mail/XMailService.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace mail {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSmtpService : public ::css::mail::XMailService
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSmtpService() = default;
    XSmtpService(XSmtpService const &) = default;
    XSmtpService(XSmtpService &&) = default;
    XSmtpService & operator =(XSmtpService const &) = default;
    XSmtpService & operator =(XSmtpService &&) = default;
#endif


    // Methods
    virtual void SAL_CALL sendMailMessage( const ::css::uno::Reference< ::css::mail::XMailMessage >& xMailMessage ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSmtpService() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::mail::XSmtpService const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::mail::XSmtpService > *);

#endif
