#ifndef INCLUDED_COM_SUN_STAR_FORM_XFORMS_HDL
#define INCLUDED_COM_SUN_STAR_FORM_XFORMS_HDL

#include "sal/config.h"

#include "com/sun/star/container/XChild.hdl"
#include "com/sun/star/container/XContainer.hdl"
#include "com/sun/star/container/XEnumerationAccess.hdl"
#include "com/sun/star/container/XIndexContainer.hdl"
#include "com/sun/star/container/XNameContainer.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/script/XEventAttacherManager.hdl"
#include "com/sun/star/util/XCloneable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace form {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XForms : public ::css::container::XContainer, public ::css::container::XNameContainer, public ::css::container::XIndexContainer, public ::css::container::XEnumerationAccess, public ::css::script::XEventAttacherManager, public ::css::container::XChild, public ::css::util::XCloneable, public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XForms() = default;
    XForms(XForms const &) = default;
    XForms(XForms &&) = default;
    XForms & operator =(XForms const &) = default;
    XForms & operator =(XForms &&) = default;
#endif


    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XForms() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::form::XForms const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::form::XForms > *);

#endif
