#ifndef INCLUDED_COM_SUN_STAR_AWT_TAB_XTABPAGECONTAINERMODEL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_TAB_XTABPAGECONTAINERMODEL_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { namespace tab { class XTabPageModel; } } } } }
#include "com/sun/star/container/XContainer.hdl"
#include "com/sun/star/container/XIndexContainer.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt { namespace tab {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTabPageContainerModel : public ::css::container::XIndexContainer, public ::css::container::XContainer
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTabPageContainerModel() = default;
    XTabPageContainerModel(XTabPageContainerModel const &) = default;
    XTabPageContainerModel(XTabPageContainerModel &&) = default;
    XTabPageContainerModel & operator =(XTabPageContainerModel const &) = default;
    XTabPageContainerModel & operator =(XTabPageContainerModel &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::tab::XTabPageModel > SAL_CALL createTabPage( ::sal_Int16 TabPageID ) = 0;
    virtual ::css::uno::Reference< ::css::awt::tab::XTabPageModel > SAL_CALL loadTabPage( ::sal_Int16 TabPageID, const ::rtl::OUString& ResourceURL ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTabPageContainerModel() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::tab::XTabPageContainerModel const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::tab::XTabPageContainerModel > *);

#endif
