#ifndef INCLUDED_COM_SUN_STAR_CHART_XCHARTDATAARRAY_HDL
#define INCLUDED_COM_SUN_STAR_CHART_XCHARTDATAARRAY_HDL

#include "sal/config.h"

#include "com/sun/star/chart/XChartData.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XChartDataArray : public ::css::chart::XChartData
{
public:
#if defined LIBO_INTERNAL_ONLY
    XChartDataArray() = default;
    XChartDataArray(XChartDataArray const &) = default;
    XChartDataArray(XChartDataArray &&) = default;
    XChartDataArray & operator =(XChartDataArray const &) = default;
    XChartDataArray & operator =(XChartDataArray &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Sequence< double > > SAL_CALL getData() = 0;
    virtual void SAL_CALL setData( const ::css::uno::Sequence< ::css::uno::Sequence< double > >& aData ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getRowDescriptions() = 0;
    virtual void SAL_CALL setRowDescriptions( const ::css::uno::Sequence< ::rtl::OUString >& aRowDescriptions ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getColumnDescriptions() = 0;
    virtual void SAL_CALL setColumnDescriptions( const ::css::uno::Sequence< ::rtl::OUString >& aColumnDescriptions ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XChartDataArray() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart::XChartDataArray const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart::XChartDataArray > *);

#endif
