#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XBITMAPCANVAS_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XBITMAPCANVAS_HDL

#include "sal/config.h"

#include "com/sun/star/geometry/RealRectangle2D.hdl"
#include "com/sun/star/rendering/RenderState.hdl"
#include "com/sun/star/rendering/ViewState.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XBitmapCanvas; } } } }
#include "com/sun/star/rendering/XCanvas.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XBitmapCanvas : public ::css::rendering::XCanvas
{
public:
#if defined LIBO_INTERNAL_ONLY
    XBitmapCanvas() = default;
    XBitmapCanvas(XBitmapCanvas const &) = default;
    XBitmapCanvas(XBitmapCanvas &&) = default;
    XBitmapCanvas & operator =(XBitmapCanvas const &) = default;
    XBitmapCanvas & operator =(XBitmapCanvas &&) = default;
#endif


    // Methods
    virtual void SAL_CALL copyRect( const ::css::uno::Reference< ::css::rendering::XBitmapCanvas >& sourceCanvas, const ::css::geometry::RealRectangle2D& sourceRect, const ::css::rendering::ViewState& sourceViewState, const ::css::rendering::RenderState& sourceRenderState, const ::css::geometry::RealRectangle2D& destRect, const ::css::rendering::ViewState& destViewState, const ::css::rendering::RenderState& destRenderState ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XBitmapCanvas() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rendering::XBitmapCanvas const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rendering::XBitmapCanvas > *);

#endif
