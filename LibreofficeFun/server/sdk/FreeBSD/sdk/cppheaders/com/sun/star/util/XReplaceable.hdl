#ifndef INCLUDED_COM_SUN_STAR_UTIL_XREPLACEABLE_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XREPLACEABLE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace util { class XReplaceDescriptor; } } } }
namespace com { namespace sun { namespace star { namespace util { class XSearchDescriptor; } } } }
#include "com/sun/star/util/XSearchable.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XReplaceable : public ::css::util::XSearchable
{
public:
#if defined LIBO_INTERNAL_ONLY
    XReplaceable() = default;
    XReplaceable(XReplaceable const &) = default;
    XReplaceable(XReplaceable &&) = default;
    XReplaceable & operator =(XReplaceable const &) = default;
    XReplaceable & operator =(XReplaceable &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::util::XReplaceDescriptor > SAL_CALL createReplaceDescriptor() = 0;
    virtual ::sal_Int32 SAL_CALL replaceAll( const ::css::uno::Reference< ::css::util::XSearchDescriptor >& xDesc ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XReplaceable() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XReplaceable const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XReplaceable > *);

#endif
