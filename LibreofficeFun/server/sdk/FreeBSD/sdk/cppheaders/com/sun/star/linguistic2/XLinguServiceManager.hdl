#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XLINGUSERVICEMANAGER_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XLINGUSERVICEMANAGER_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
namespace com { namespace sun { namespace star { namespace lang { class XEventListener; } } } }
namespace com { namespace sun { namespace star { namespace linguistic2 { class XHyphenator; } } } }
namespace com { namespace sun { namespace star { namespace linguistic2 { class XSpellChecker; } } } }
namespace com { namespace sun { namespace star { namespace linguistic2 { class XThesaurus; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLinguServiceManager : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XLinguServiceManager() = default;
    XLinguServiceManager(XLinguServiceManager const &) = default;
    XLinguServiceManager(XLinguServiceManager &&) = default;
    XLinguServiceManager & operator =(XLinguServiceManager const &) = default;
    XLinguServiceManager & operator =(XLinguServiceManager &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::linguistic2::XSpellChecker > SAL_CALL getSpellChecker() = 0;
    virtual ::css::uno::Reference< ::css::linguistic2::XHyphenator > SAL_CALL getHyphenator() = 0;
    virtual ::css::uno::Reference< ::css::linguistic2::XThesaurus > SAL_CALL getThesaurus() = 0;
    virtual ::sal_Bool SAL_CALL addLinguServiceManagerListener( const ::css::uno::Reference< ::css::lang::XEventListener >& xListener ) = 0;
    virtual ::sal_Bool SAL_CALL removeLinguServiceManagerListener( const ::css::uno::Reference< ::css::lang::XEventListener >& xListener ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAvailableServices( const ::rtl::OUString& aServiceName, const ::css::lang::Locale& aLocale ) = 0;
    virtual void SAL_CALL setConfiguredServices( const ::rtl::OUString& aServiceName, const ::css::lang::Locale& aLocale, const ::css::uno::Sequence< ::rtl::OUString >& aServiceImplNames ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getConfiguredServices( const ::rtl::OUString& aServiceName, const ::css::lang::Locale& aLocale ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLinguServiceManager() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XLinguServiceManager const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XLinguServiceManager > *);

#endif
