#ifndef INCLUDED_COM_SUN_STAR_IO_XDATAOUTPUTSTREAM_HDL
#define INCLUDED_COM_SUN_STAR_IO_XDATAOUTPUTSTREAM_HDL

#include "sal/config.h"

#include "com/sun/star/io/XOutputStream.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace io {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDataOutputStream : public ::css::io::XOutputStream
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDataOutputStream() = default;
    XDataOutputStream(XDataOutputStream const &) = default;
    XDataOutputStream(XDataOutputStream &&) = default;
    XDataOutputStream & operator =(XDataOutputStream const &) = default;
    XDataOutputStream & operator =(XDataOutputStream &&) = default;
#endif


    // Methods
    virtual void SAL_CALL writeBoolean( ::sal_Bool Value ) = 0;
    virtual void SAL_CALL writeByte( ::sal_Int8 Value ) = 0;
    virtual void SAL_CALL writeChar( ::sal_Unicode Value ) = 0;
    virtual void SAL_CALL writeShort( ::sal_Int16 Value ) = 0;
    virtual void SAL_CALL writeLong( ::sal_Int32 Value ) = 0;
    virtual void SAL_CALL writeHyper( ::sal_Int64 Value ) = 0;
    virtual void SAL_CALL writeFloat( float Value ) = 0;
    virtual void SAL_CALL writeDouble( double Value ) = 0;
    virtual void SAL_CALL writeUTF( const ::rtl::OUString& Value ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDataOutputStream() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::io::XDataOutputStream const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::io::XDataOutputStream > *);

#endif
