#ifndef INCLUDED_COM_SUN_STAR_TASK_XINTERACTIONPASSWORD2_HDL
#define INCLUDED_COM_SUN_STAR_TASK_XINTERACTIONPASSWORD2_HDL

#include "sal/config.h"

#include "com/sun/star/task/XInteractionPassword.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace task {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XInteractionPassword2 : public ::css::task::XInteractionPassword
{
public:
#if defined LIBO_INTERNAL_ONLY
    XInteractionPassword2() = default;
    XInteractionPassword2(XInteractionPassword2 const &) = default;
    XInteractionPassword2(XInteractionPassword2 &&) = default;
    XInteractionPassword2 & operator =(XInteractionPassword2 const &) = default;
    XInteractionPassword2 & operator =(XInteractionPassword2 &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setPasswordToModify( const ::rtl::OUString& aPasswd ) = 0;
    virtual ::rtl::OUString SAL_CALL getPasswordToModify() = 0;
    virtual void SAL_CALL setRecommendReadOnly( ::sal_Bool bReadOnly ) = 0;
    virtual ::sal_Bool SAL_CALL getRecommendReadOnly() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XInteractionPassword2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::task::XInteractionPassword2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::task::XInteractionPassword2 > *);

#endif
