#ifndef INCLUDED_COM_SUN_STAR_CHART2_DATA_XPIVOTTABLEDATAPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_DATA_XPIVOTTABLEDATAPROVIDER_HDL

#include "sal/config.h"

#include "com/sun/star/chart2/data/PivotTableFieldEntry.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataSequence; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 { namespace data {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPivotTableDataProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPivotTableDataProvider() = default;
    XPivotTableDataProvider(XPivotTableDataProvider const &) = default;
    XPivotTableDataProvider(XPivotTableDataProvider &&) = default;
    XPivotTableDataProvider & operator =(XPivotTableDataProvider const &) = default;
    XPivotTableDataProvider & operator =(XPivotTableDataProvider &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::chart2::data::PivotTableFieldEntry > SAL_CALL getColumnFields() = 0;
    virtual ::css::uno::Sequence< ::css::chart2::data::PivotTableFieldEntry > SAL_CALL getRowFields() = 0;
    virtual ::css::uno::Sequence< ::css::chart2::data::PivotTableFieldEntry > SAL_CALL getPageFields() = 0;
    virtual ::css::uno::Sequence< ::css::chart2::data::PivotTableFieldEntry > SAL_CALL getDataFields() = 0;
    virtual ::rtl::OUString SAL_CALL getPivotTableName() = 0;
    virtual void SAL_CALL setPivotTableName( const ::rtl::OUString& sPivotTableName ) = 0;
    virtual ::sal_Bool SAL_CALL hasPivotTable() = 0;
    virtual ::css::uno::Reference< ::css::chart2::data::XDataSequence > SAL_CALL createDataSequenceOfValuesByIndex( ::sal_Int32 nIndex ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::data::XDataSequence > SAL_CALL createDataSequenceOfLabelsByIndex( ::sal_Int32 nIndex ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::data::XDataSequence > SAL_CALL createDataSequenceOfCategories() = 0;
    virtual ::rtl::OUString SAL_CALL getFieldOutputDescription( ::sal_Int32 nDimensionIndex ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPivotTableDataProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::data::XPivotTableDataProvider const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::data::XPivotTableDataProvider > *);

#endif
