#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XGRAPHICDEVICE_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XGRAPHICDEVICE_HDL

#include "sal/config.h"

#include "com/sun/star/geometry/IntegerSize2D.hdl"
#include "com/sun/star/geometry/RealBezierSegment2D.hdl"
#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/geometry/RealSize2D.hdl"
namespace com { namespace sun { namespace star { namespace lang { class XMultiServiceFactory; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XBezierPolyPolygon2D; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XBitmap; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XBufferController; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XColorSpace; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XLinePolyPolygon2D; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XVolatileBitmap; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XGraphicDevice : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XGraphicDevice() = default;
    XGraphicDevice(XGraphicDevice const &) = default;
    XGraphicDevice(XGraphicDevice &&) = default;
    XGraphicDevice & operator =(XGraphicDevice const &) = default;
    XGraphicDevice & operator =(XGraphicDevice &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::rendering::XBufferController > SAL_CALL getBufferController() = 0;
    virtual ::css::uno::Reference< ::css::rendering::XColorSpace > SAL_CALL getDeviceColorSpace() = 0;
    virtual ::css::geometry::RealSize2D SAL_CALL getPhysicalResolution() = 0;
    virtual ::css::geometry::RealSize2D SAL_CALL getPhysicalSize() = 0;
    virtual ::css::uno::Reference< ::css::rendering::XLinePolyPolygon2D > SAL_CALL createCompatibleLinePolyPolygon( const ::css::uno::Sequence< ::css::uno::Sequence< ::css::geometry::RealPoint2D > >& points ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XBezierPolyPolygon2D > SAL_CALL createCompatibleBezierPolyPolygon( const ::css::uno::Sequence< ::css::uno::Sequence< ::css::geometry::RealBezierSegment2D > >& points ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XBitmap > SAL_CALL createCompatibleBitmap( const ::css::geometry::IntegerSize2D& size ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XVolatileBitmap > SAL_CALL createVolatileBitmap( const ::css::geometry::IntegerSize2D& size ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XBitmap > SAL_CALL createCompatibleAlphaBitmap( const ::css::geometry::IntegerSize2D& size ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XVolatileBitmap > SAL_CALL createVolatileAlphaBitmap( const ::css::geometry::IntegerSize2D& size ) = 0;
    virtual ::css::uno::Reference< ::css::lang::XMultiServiceFactory > SAL_CALL getParametricPolyPolygonFactory() = 0;
    virtual ::sal_Bool SAL_CALL hasFullScreenMode() = 0;
    virtual ::sal_Bool SAL_CALL enterFullScreenMode( ::sal_Bool bEnter ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XGraphicDevice() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rendering::XGraphicDevice const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rendering::XGraphicDevice > *);

#endif
