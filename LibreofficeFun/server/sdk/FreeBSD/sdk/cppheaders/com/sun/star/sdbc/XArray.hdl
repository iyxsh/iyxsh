#ifndef INCLUDED_COM_SUN_STAR_SDBC_XARRAY_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_XARRAY_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XNameAccess; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XResultSet; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbc {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XArray : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XArray() = default;
    XArray(XArray const &) = default;
    XArray(XArray &&) = default;
    XArray & operator =(XArray const &) = default;
    XArray & operator =(XArray &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getBaseTypeName() = 0;
    virtual ::sal_Int32 SAL_CALL getBaseType() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getArray( const ::css::uno::Reference< ::css::container::XNameAccess >& typeMap ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getArrayAtIndex( ::sal_Int32 index, ::sal_Int32 count, const ::css::uno::Reference< ::css::container::XNameAccess >& typeMap ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getResultSet( const ::css::uno::Reference< ::css::container::XNameAccess >& typeMap ) = 0;
    virtual ::css::uno::Reference< ::css::sdbc::XResultSet > SAL_CALL getResultSetAtIndex( ::sal_Int32 index, ::sal_Int32 count, const ::css::uno::Reference< ::css::container::XNameAccess >& typeMap ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XArray() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbc::XArray const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbc::XArray > *);

#endif
