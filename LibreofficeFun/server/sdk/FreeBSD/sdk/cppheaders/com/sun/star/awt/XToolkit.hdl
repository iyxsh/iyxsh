#ifndef INCLUDED_COM_SUN_STAR_AWT_XTOOLKIT_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTOOLKIT_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Rectangle.hdl"
#include "com/sun/star/awt/WindowDescriptor.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XDevice; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XRegion; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XWindowPeer; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XToolkit : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XToolkit() = default;
    XToolkit(XToolkit const &) = default;
    XToolkit(XToolkit &&) = default;
    XToolkit & operator =(XToolkit const &) = default;
    XToolkit & operator =(XToolkit &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::XWindowPeer > SAL_CALL getDesktopWindow() = 0;
    virtual ::css::awt::Rectangle SAL_CALL getWorkArea() = 0;
    virtual ::css::uno::Reference< ::css::awt::XWindowPeer > SAL_CALL createWindow( const ::css::awt::WindowDescriptor& Descriptor ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::awt::XWindowPeer > > SAL_CALL createWindows( const ::css::uno::Sequence< ::css::awt::WindowDescriptor >& Descriptors ) = 0;
    virtual ::css::uno::Reference< ::css::awt::XDevice > SAL_CALL createScreenCompatibleDevice( ::sal_Int32 Width, ::sal_Int32 Height ) = 0;
    virtual ::css::uno::Reference< ::css::awt::XRegion > SAL_CALL createRegion() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XToolkit() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XToolkit const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XToolkit > *);

#endif
