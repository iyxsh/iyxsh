#ifndef INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDCALENDAR_HDL
#define INCLUDED_COM_SUN_STAR_I18N_XEXTENDEDCALENDAR_HDL

#include "sal/config.h"

#include "com/sun/star/i18n/XCalendar.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace i18n {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XExtendedCalendar : public ::css::i18n::XCalendar
{
public:
#if defined LIBO_INTERNAL_ONLY
    XExtendedCalendar() = default;
    XExtendedCalendar(XExtendedCalendar const &) = default;
    XExtendedCalendar(XExtendedCalendar &&) = default;
    XExtendedCalendar & operator =(XExtendedCalendar const &) = default;
    XExtendedCalendar & operator =(XExtendedCalendar &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getDisplayString( ::sal_Int32 nCalendarDisplayCode, ::sal_Int16 nNativeNumberMode ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XExtendedCalendar() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::i18n::XExtendedCalendar const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::i18n::XExtendedCalendar > *);

#endif
