#ifndef INCLUDED_COM_SUN_STAR_I18N_LINEBREAKHYPHENATIONOPTIONS_HDL
#define INCLUDED_COM_SUN_STAR_I18N_LINEBREAKHYPHENATIONOPTIONS_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValues.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XHyphenator; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace i18n {

#ifdef _WIN32
#   pragma pack(push, 8)
#endif

struct SAL_DLLPUBLIC_RTTI LineBreakHyphenationOptions {
    inline LineBreakHyphenationOptions();

    inline LineBreakHyphenationOptions(const ::css::uno::Reference< ::css::linguistic2::XHyphenator >& rHyphenator_, const ::css::uno::Sequence< ::css::beans::PropertyValue >& aHyphenationOptions_, const ::sal_Int32& hyphenIndex_);

    ::css::uno::Reference< ::css::linguistic2::XHyphenator > rHyphenator;
    ::css::uno::Sequence< ::css::beans::PropertyValue > aHyphenationOptions;
    ::sal_Int32 hyphenIndex;
};

#ifdef _WIN32
#   pragma pack(pop)
#endif


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::i18n::LineBreakHyphenationOptions const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::i18n::LineBreakHyphenationOptions *);

#endif
