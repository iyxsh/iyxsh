#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XLIBRARYCONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XLIBRARYCONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/container/XNameAccess.hdl"
namespace com { namespace sun { namespace star { namespace container { class XNameContainer; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLibraryContainer : public ::css::container::XNameAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XLibraryContainer() = default;
    XLibraryContainer(XLibraryContainer const &) = default;
    XLibraryContainer(XLibraryContainer &&) = default;
    XLibraryContainer & operator =(XLibraryContainer const &) = default;
    XLibraryContainer & operator =(XLibraryContainer &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::container::XNameContainer > SAL_CALL createLibrary( const ::rtl::OUString& Name ) = 0;
    virtual ::css::uno::Reference< ::css::container::XNameAccess > SAL_CALL createLibraryLink( const ::rtl::OUString& Name, const ::rtl::OUString& StorageURL, ::sal_Bool ReadOnly ) = 0;
    virtual void SAL_CALL removeLibrary( const ::rtl::OUString& Name ) = 0;
    virtual ::sal_Bool SAL_CALL isLibraryLoaded( const ::rtl::OUString& Name ) = 0;
    virtual void SAL_CALL loadLibrary( const ::rtl::OUString& Name ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLibraryContainer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XLibraryContainer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XLibraryContainer > *);

#endif
