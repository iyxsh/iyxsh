#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XAUTOMATIONINVOCATION_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XAUTOMATIONINVOCATION_HDL

#include "sal/config.h"

#include "com/sun/star/script/XInvocation.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAutomationInvocation : public ::css::script::XInvocation
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAutomationInvocation() = default;
    XAutomationInvocation(XAutomationInvocation const &) = default;
    XAutomationInvocation(XAutomationInvocation &&) = default;
    XAutomationInvocation & operator =(XAutomationInvocation const &) = default;
    XAutomationInvocation & operator =(XAutomationInvocation &&) = default;
#endif


    // Methods
    virtual ::css::uno::Any SAL_CALL invokeGetProperty( const ::rtl::OUString& aFunctionName, const ::css::uno::Sequence< ::css::uno::Any >& aParams, ::css::uno::Sequence< ::sal_Int16 >& aOutParamIndex, ::css::uno::Sequence< ::css::uno::Any >& aOutParam ) = 0;
    virtual ::css::uno::Any SAL_CALL invokePutProperty( const ::rtl::OUString& aFunctionName, const ::css::uno::Sequence< ::css::uno::Any >& aParams, ::css::uno::Sequence< ::sal_Int16 >& aOutParamIndex, ::css::uno::Sequence< ::css::uno::Any >& aOutParam ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAutomationInvocation() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XAutomationInvocation const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XAutomationInvocation > *);

#endif
