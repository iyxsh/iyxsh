#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XSTARBASICACCESS_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XSTARBASICACCESS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XNameContainer; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStarBasicAccess : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStarBasicAccess() = default;
    XStarBasicAccess(XStarBasicAccess const &) = default;
    XStarBasicAccess(XStarBasicAccess &&) = default;
    XStarBasicAccess & operator =(XStarBasicAccess const &) = default;
    XStarBasicAccess & operator =(XStarBasicAccess &&) = default;
#endif


    // Methods
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::css::uno::Reference< ::css::container::XNameContainer > SAL_CALL getLibraryContainer() = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL createLibrary( const ::rtl::OUString& LibName, const ::rtl::OUString& Password, const ::rtl::OUString& ExternalSourceURL, const ::rtl::OUString& LinkTargetURL ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL addModule( const ::rtl::OUString& LibraryName, const ::rtl::OUString& ModuleName, const ::rtl::OUString& Language, const ::rtl::OUString& Source ) = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual void SAL_CALL addDialog( const ::rtl::OUString& LibraryName, const ::rtl::OUString& DialogName, const ::css::uno::Sequence< ::sal_Int8 >& Data ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStarBasicAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XStarBasicAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XStarBasicAccess > *);

#endif
