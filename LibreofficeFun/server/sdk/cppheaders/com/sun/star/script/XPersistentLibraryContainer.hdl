#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XPERSISTENTLIBRARYCONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XPERSISTENTLIBRARYCONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/script/XLibraryContainer2.hdl"
#include "com/sun/star/util/XModifiable.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPersistentLibraryContainer : public ::css::util::XModifiable, public ::css::script::XLibraryContainer2
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPersistentLibraryContainer() = default;
    XPersistentLibraryContainer(XPersistentLibraryContainer const &) = default;
    XPersistentLibraryContainer(XPersistentLibraryContainer &&) = default;
    XPersistentLibraryContainer & operator =(XPersistentLibraryContainer const &) = default;
    XPersistentLibraryContainer & operator =(XPersistentLibraryContainer &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Any SAL_CALL getRootLocation() = 0;
    virtual ::rtl::OUString SAL_CALL getContainerLocationName() = 0;

    // Methods
    virtual void SAL_CALL storeLibraries() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPersistentLibraryContainer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XPersistentLibraryContainer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XPersistentLibraryContainer > *);

#endif
