#ifndef INCLUDED_COM_SUN_STAR_SCRIPT_XSERVICEDOCUMENTER_HDL
#define INCLUDED_COM_SUN_STAR_SCRIPT_XSERVICEDOCUMENTER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace lang { class XServiceInfo; } } } }
namespace com { namespace sun { namespace star { namespace lang { class XTypeProvider; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace script {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XServiceDocumenter : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XServiceDocumenter() = default;
    XServiceDocumenter(XServiceDocumenter const &) = default;
    XServiceDocumenter(XServiceDocumenter &&) = default;
    XServiceDocumenter & operator =(XServiceDocumenter const &) = default;
    XServiceDocumenter & operator =(XServiceDocumenter &&) = default;
#endif


    // Attributes
    virtual ::rtl::OUString SAL_CALL getServiceBaseUrl() = 0;
    virtual void SAL_CALL setServiceBaseUrl( const ::rtl::OUString& _servicebaseurl ) = 0;
    virtual ::rtl::OUString SAL_CALL getCoreBaseUrl() = 0;
    virtual void SAL_CALL setCoreBaseUrl( const ::rtl::OUString& _corebaseurl ) = 0;

    // Methods
    virtual void SAL_CALL showServiceDocs( const ::css::uno::Reference< ::css::lang::XServiceInfo >& xService ) = 0;
    virtual void SAL_CALL showInterfaceDocs( const ::css::uno::Reference< ::css::lang::XTypeProvider >& xTypeProvider ) = 0;
    virtual void SAL_CALL showCoreDocs( const ::css::uno::Reference< ::css::lang::XServiceInfo >& xService ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XServiceDocumenter() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::script::XServiceDocumenter const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::script::XServiceDocumenter > *);

#endif
