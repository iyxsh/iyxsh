#ifndef INCLUDED_COM_SUN_STAR_AUTH_XSSOPASSWORDCACHE_HDL
#define INCLUDED_COM_SUN_STAR_AUTH_XSSOPASSWORDCACHE_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace auth {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSSOPasswordCache : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSSOPasswordCache() = default;
    XSSOPasswordCache(XSSOPasswordCache const &) = default;
    XSSOPasswordCache(XSSOPasswordCache &&) = default;
    XSSOPasswordCache & operator =(XSSOPasswordCache const &) = default;
    XSSOPasswordCache & operator =(XSSOPasswordCache &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addPassword( const ::rtl::OUString& UserName, const ::rtl::OUString& Password, ::sal_Bool Persist ) = 0;
    virtual ::rtl::OUString SAL_CALL getPassword( const ::rtl::OUString& UserName, ::sal_Bool& Persist ) = 0;
    virtual void SAL_CALL removePassword( const ::rtl::OUString& UserName, ::sal_Bool RemovePersist ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSSOPasswordCache() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::auth::XSSOPasswordCache const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::auth::XSSOPasswordCache > *);

#endif
