#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XTHESAURUS_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XTHESAURUS_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValues.hdl"
#include "com/sun/star/lang/Locale.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XMeaning; } } } }
#include "com/sun/star/linguistic2/XSupportedLocales.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XThesaurus : public ::css::linguistic2::XSupportedLocales
{
public:
#if defined LIBO_INTERNAL_ONLY
    XThesaurus() = default;
    XThesaurus(XThesaurus const &) = default;
    XThesaurus(XThesaurus &&) = default;
    XThesaurus & operator =(XThesaurus const &) = default;
    XThesaurus & operator =(XThesaurus &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::linguistic2::XMeaning > > SAL_CALL queryMeanings( const ::rtl::OUString& aTerm, const ::css::lang::Locale& aLocale, const ::css::uno::Sequence< ::css::beans::PropertyValue >& aProperties ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XThesaurus() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XThesaurus const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XThesaurus > *);

#endif
