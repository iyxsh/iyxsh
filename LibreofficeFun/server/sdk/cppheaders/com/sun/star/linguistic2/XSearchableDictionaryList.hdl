#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XSEARCHABLEDICTIONARYLIST_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XSEARCHABLEDICTIONARYLIST_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XDictionaryEntry; } } } }
#include "com/sun/star/linguistic2/XDictionaryList.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSearchableDictionaryList : public ::css::linguistic2::XDictionaryList
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSearchableDictionaryList() = default;
    XSearchableDictionaryList(XSearchableDictionaryList const &) = default;
    XSearchableDictionaryList(XSearchableDictionaryList &&) = default;
    XSearchableDictionaryList & operator =(XSearchableDictionaryList const &) = default;
    XSearchableDictionaryList & operator =(XSearchableDictionaryList &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::linguistic2::XDictionaryEntry > SAL_CALL queryDictionaryEntry( const ::rtl::OUString& aWord, const ::css::lang::Locale& aLocale, ::sal_Bool bSearchPosDics, ::sal_Bool bSpellEntry ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSearchableDictionaryList() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XSearchableDictionaryList const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XSearchableDictionaryList > *);

#endif
