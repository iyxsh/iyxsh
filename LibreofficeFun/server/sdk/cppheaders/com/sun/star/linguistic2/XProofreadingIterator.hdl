#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XPROOFREADINGITERATOR_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XPROOFREADINGITERATOR_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/linguistic2/ProofreadingResult.hdl"
namespace com { namespace sun { namespace star { namespace text { class XFlatParagraph; } } } }
namespace com { namespace sun { namespace star { namespace text { class XFlatParagraphIteratorProvider; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XProofreadingIterator : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XProofreadingIterator() = default;
    XProofreadingIterator(XProofreadingIterator const &) = default;
    XProofreadingIterator(XProofreadingIterator &&) = default;
    XProofreadingIterator & operator =(XProofreadingIterator const &) = default;
    XProofreadingIterator & operator =(XProofreadingIterator &&) = default;
#endif


    // Methods
    virtual void SAL_CALL startProofreading( const ::css::uno::Reference< ::css::uno::XInterface >& xDocument, const ::css::uno::Reference< ::css::text::XFlatParagraphIteratorProvider >& xIteratorProvider ) = 0;
    virtual ::css::linguistic2::ProofreadingResult SAL_CALL checkSentenceAtPosition( const ::css::uno::Reference< ::css::uno::XInterface >& xDocument, const ::css::uno::Reference< ::css::text::XFlatParagraph >& xFlatParagraph, const ::rtl::OUString& aText, const ::css::lang::Locale& aLocale, ::sal_Int32 nStartOfSentencePosition, ::sal_Int32 nSuggestedBehindEndOfSentencePosition, ::sal_Int32 nErrorPositionInParagraph ) = 0;
    virtual void SAL_CALL resetIgnoreRules() = 0;
    virtual ::sal_Bool SAL_CALL isProofreading( const ::css::uno::Reference< ::css::uno::XInterface >& xDocument ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XProofreadingIterator() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XProofreadingIterator const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XProofreadingIterator > *);

#endif
