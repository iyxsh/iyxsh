#ifndef INCLUDED_COM_SUN_STAR_LINGUISTIC2_XDICTIONARYLIST_HDL
#define INCLUDED_COM_SUN_STAR_LINGUISTIC2_XDICTIONARYLIST_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/linguistic2/DictionaryType.hdl"
namespace com { namespace sun { namespace star { namespace linguistic2 { class XDictionary; } } } }
namespace com { namespace sun { namespace star { namespace linguistic2 { class XDictionaryListEventListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace linguistic2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDictionaryList : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDictionaryList() = default;
    XDictionaryList(XDictionaryList const &) = default;
    XDictionaryList(XDictionaryList &&) = default;
    XDictionaryList & operator =(XDictionaryList const &) = default;
    XDictionaryList & operator =(XDictionaryList &&) = default;
#endif


    // Methods
    virtual ::sal_Int16 SAL_CALL getCount() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::linguistic2::XDictionary > > SAL_CALL getDictionaries() = 0;
    virtual ::css::uno::Reference< ::css::linguistic2::XDictionary > SAL_CALL getDictionaryByName( const ::rtl::OUString& aDictionaryName ) = 0;
    virtual ::sal_Bool SAL_CALL addDictionary( const ::css::uno::Reference< ::css::linguistic2::XDictionary >& xDictionary ) = 0;
    virtual ::sal_Bool SAL_CALL removeDictionary( const ::css::uno::Reference< ::css::linguistic2::XDictionary >& xDictionary ) = 0;
    virtual ::sal_Bool SAL_CALL addDictionaryListEventListener( const ::css::uno::Reference< ::css::linguistic2::XDictionaryListEventListener >& xListener, ::sal_Bool bReceiveVerbose ) = 0;
    virtual ::sal_Bool SAL_CALL removeDictionaryListEventListener( const ::css::uno::Reference< ::css::linguistic2::XDictionaryListEventListener >& xListener ) = 0;
    virtual ::sal_Int16 SAL_CALL beginCollectEvents() = 0;
    virtual ::sal_Int16 SAL_CALL endCollectEvents() = 0;
    virtual ::sal_Int16 SAL_CALL flushEvents() = 0;
    virtual ::css::uno::Reference< ::css::linguistic2::XDictionary > SAL_CALL createDictionary( const ::rtl::OUString& aName, const ::css::lang::Locale& aLocale, ::css::linguistic2::DictionaryType eDicType, const ::rtl::OUString& aURL ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDictionaryList() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::linguistic2::XDictionaryList const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::linguistic2::XDictionaryList > *);

#endif
