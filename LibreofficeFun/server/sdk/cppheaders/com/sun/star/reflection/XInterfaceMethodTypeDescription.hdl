#ifndef INCLUDED_COM_SUN_STAR_REFLECTION_XINTERFACEMETHODTYPEDESCRIPTION_HDL
#define INCLUDED_COM_SUN_STAR_REFLECTION_XINTERFACEMETHODTYPEDESCRIPTION_HDL

#include "sal/config.h"

#include "com/sun/star/reflection/XInterfaceMemberTypeDescription.hdl"
namespace com { namespace sun { namespace star { namespace reflection { class XMethodParameter; } } } }
namespace com { namespace sun { namespace star { namespace reflection { class XTypeDescription; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace reflection {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XInterfaceMethodTypeDescription : public ::css::reflection::XInterfaceMemberTypeDescription
{
public:
#if defined LIBO_INTERNAL_ONLY
    XInterfaceMethodTypeDescription() = default;
    XInterfaceMethodTypeDescription(XInterfaceMethodTypeDescription const &) = default;
    XInterfaceMethodTypeDescription(XInterfaceMethodTypeDescription &&) = default;
    XInterfaceMethodTypeDescription & operator =(XInterfaceMethodTypeDescription const &) = default;
    XInterfaceMethodTypeDescription & operator =(XInterfaceMethodTypeDescription &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::reflection::XTypeDescription > SAL_CALL getReturnType() = 0;
    virtual ::sal_Bool SAL_CALL isOneway() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XMethodParameter > > SAL_CALL getParameters() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XTypeDescription > > SAL_CALL getExceptions() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XInterfaceMethodTypeDescription() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::reflection::XInterfaceMethodTypeDescription const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::reflection::XInterfaceMethodTypeDescription > *);

#endif
