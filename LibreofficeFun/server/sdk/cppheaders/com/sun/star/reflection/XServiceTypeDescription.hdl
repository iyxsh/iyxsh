#ifndef INCLUDED_COM_SUN_STAR_REFLECTION_XSERVICETYPEDESCRIPTION_HDL
#define INCLUDED_COM_SUN_STAR_REFLECTION_XSERVICETYPEDESCRIPTION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace reflection { class XInterfaceTypeDescription; } } } }
namespace com { namespace sun { namespace star { namespace reflection { class XPropertyTypeDescription; } } } }
namespace com { namespace sun { namespace star { namespace reflection { class XServiceTypeDescription; } } } }
#include "com/sun/star/reflection/XTypeDescription.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace reflection {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XServiceTypeDescription : public ::css::reflection::XTypeDescription
{
public:
#if defined LIBO_INTERNAL_ONLY
    XServiceTypeDescription() = default;
    XServiceTypeDescription(XServiceTypeDescription const &) = default;
    XServiceTypeDescription(XServiceTypeDescription &&) = default;
    XServiceTypeDescription & operator =(XServiceTypeDescription const &) = default;
    XServiceTypeDescription & operator =(XServiceTypeDescription &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XServiceTypeDescription > > SAL_CALL getMandatoryServices() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XServiceTypeDescription > > SAL_CALL getOptionalServices() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XInterfaceTypeDescription > > SAL_CALL getMandatoryInterfaces() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XInterfaceTypeDescription > > SAL_CALL getOptionalInterfaces() = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::reflection::XPropertyTypeDescription > > SAL_CALL getProperties() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XServiceTypeDescription() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::reflection::XServiceTypeDescription const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::reflection::XServiceTypeDescription > *);

#endif
