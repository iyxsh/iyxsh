#ifndef INCLUDED_COM_SUN_STAR_REFLECTION_XINDIRECTTYPEDESCRIPTION_HDL
#define INCLUDED_COM_SUN_STAR_REFLECTION_XINDIRECTTYPEDESCRIPTION_HDL

#include "sal/config.h"

#include "com/sun/star/reflection/XTypeDescription.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace reflection {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XIndirectTypeDescription : public ::css::reflection::XTypeDescription
{
public:
#if defined LIBO_INTERNAL_ONLY
    XIndirectTypeDescription() = default;
    XIndirectTypeDescription(XIndirectTypeDescription const &) = default;
    XIndirectTypeDescription(XIndirectTypeDescription &&) = default;
    XIndirectTypeDescription & operator =(XIndirectTypeDescription const &) = default;
    XIndirectTypeDescription & operator =(XIndirectTypeDescription &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::reflection::XTypeDescription > SAL_CALL getReferencedType() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XIndirectTypeDescription() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::reflection::XIndirectTypeDescription const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::reflection::XIndirectTypeDescription > *);

#endif
