#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XSPRITE_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XSPRITE_HDL

#include "sal/config.h"

#include "com/sun/star/geometry/AffineMatrix2D.hdl"
#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/rendering/RenderState.hdl"
#include "com/sun/star/rendering/ViewState.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XPolyPolygon2D; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSprite : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSprite() = default;
    XSprite(XSprite const &) = default;
    XSprite(XSprite &&) = default;
    XSprite & operator =(XSprite const &) = default;
    XSprite & operator =(XSprite &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setAlpha( double nAlpha ) = 0;
    virtual void SAL_CALL move( const ::css::geometry::RealPoint2D& aNewPos, const ::css::rendering::ViewState& aViewState, const ::css::rendering::RenderState& aRenderState ) = 0;
    virtual void SAL_CALL transform( const ::css::geometry::AffineMatrix2D& aTransformation ) = 0;
    virtual void SAL_CALL clip( const ::css::uno::Reference< ::css::rendering::XPolyPolygon2D >& aClip ) = 0;
    virtual void SAL_CALL setPriority( double nPriority ) = 0;
    virtual void SAL_CALL show() = 0;
    virtual void SAL_CALL hide() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSprite() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rendering::XSprite const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rendering::XSprite > *);

#endif
