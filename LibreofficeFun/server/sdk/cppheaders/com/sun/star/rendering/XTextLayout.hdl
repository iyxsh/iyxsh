#ifndef INCLUDED_COM_SUN_STAR_RENDERING_XTEXTLAYOUT_HDL
#define INCLUDED_COM_SUN_STAR_RENDERING_XTEXTLAYOUT_HDL

#include "sal/config.h"

#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/geometry/RealRectangle2D.hdl"
#include "com/sun/star/rendering/Caret.hdl"
#include "com/sun/star/rendering/StringContext.hdl"
#include "com/sun/star/rendering/TextHit.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XCanvasFont; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XPolyPolygon2D; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XTextLayout; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace rendering {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTextLayout : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTextLayout() = default;
    XTextLayout(XTextLayout const &) = default;
    XTextLayout(XTextLayout &&) = default;
    XTextLayout & operator =(XTextLayout const &) = default;
    XTextLayout & operator =(XTextLayout &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::rendering::XPolyPolygon2D > > SAL_CALL queryTextShapes() = 0;
    virtual ::css::uno::Sequence< ::css::geometry::RealRectangle2D > SAL_CALL queryInkMeasures() = 0;
    virtual ::css::uno::Sequence< ::css::geometry::RealRectangle2D > SAL_CALL queryMeasures() = 0;
    virtual ::css::uno::Sequence< double > SAL_CALL queryLogicalAdvancements() = 0;
    virtual void SAL_CALL applyLogicalAdvancements( const ::css::uno::Sequence< double >& aAdvancements ) = 0;
    virtual ::css::uno::Sequence< ::sal_Bool > SAL_CALL queryKashidaPositions() = 0;
    virtual void SAL_CALL applyKashidaPositions( const ::css::uno::Sequence< ::sal_Bool >& aPositions ) = 0;
    virtual ::css::geometry::RealRectangle2D SAL_CALL queryTextBounds() = 0;
    virtual double SAL_CALL justify( double nSize ) = 0;
    virtual double SAL_CALL combinedJustify( const ::css::uno::Sequence< ::css::uno::Reference< ::css::rendering::XTextLayout > >& aNextLayouts, double nSize ) = 0;
    virtual ::css::rendering::TextHit SAL_CALL getTextHit( const ::css::geometry::RealPoint2D& aHitPoint ) = 0;
    virtual ::css::rendering::Caret SAL_CALL getCaret( ::sal_Int32 nInsertionIndex, ::sal_Bool bExcludeLigatures ) = 0;
    virtual ::sal_Int32 SAL_CALL getNextInsertionIndex( ::sal_Int32 nStartIndex, ::sal_Int32 nCaretAdvancement, ::sal_Bool bExcludeLigatures ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XPolyPolygon2D > SAL_CALL queryVisualHighlighting( ::sal_Int32 nStartIndex, ::sal_Int32 nEndIndex ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XPolyPolygon2D > SAL_CALL queryLogicalHighlighting( ::sal_Int32 nStartIndex, ::sal_Int32 nEndIndex ) = 0;
    virtual double SAL_CALL getBaselineOffset() = 0;
    virtual ::sal_Int8 SAL_CALL getMainTextDirection() = 0;
    virtual ::css::uno::Reference< ::css::rendering::XCanvasFont > SAL_CALL getFont() = 0;
    virtual ::css::rendering::StringContext SAL_CALL getText() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTextLayout() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::rendering::XTextLayout const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::rendering::XTextLayout > *);

#endif
