#ifndef INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGESUPPLIER_HDL
#define INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGESUPPLIER_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Uik.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace bridge {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XBridgeSupplier : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XBridgeSupplier() = default;
    XBridgeSupplier(XBridgeSupplier const &) = default;
    XBridgeSupplier(XBridgeSupplier &&) = default;
    XBridgeSupplier & operator =(XBridgeSupplier const &) = default;
    XBridgeSupplier & operator =(XBridgeSupplier &&) = default;
#endif


    // Methods
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::css::uno::Any SAL_CALL createBridge( const ::css::uno::Any& modelDepObject, const ::css::uno::Uik& MachineId, ::sal_Int32 ProcessId, ::sal_Int16 sourceModelType, ::sal_Int16 destModelType ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XBridgeSupplier() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::bridge::XBridgeSupplier const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::bridge::XBridgeSupplier > *);

#endif
