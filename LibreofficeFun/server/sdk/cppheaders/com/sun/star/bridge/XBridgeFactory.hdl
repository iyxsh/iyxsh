#ifndef INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_HDL
#define INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGEFACTORY_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace bridge { class XBridge; } } } }
namespace com { namespace sun { namespace star { namespace bridge { class XInstanceProvider; } } } }
namespace com { namespace sun { namespace star { namespace connection { class XConnection; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace bridge {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XBridgeFactory : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XBridgeFactory() = default;
    XBridgeFactory(XBridgeFactory const &) = default;
    XBridgeFactory(XBridgeFactory &&) = default;
    XBridgeFactory & operator =(XBridgeFactory const &) = default;
    XBridgeFactory & operator =(XBridgeFactory &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::bridge::XBridge > SAL_CALL createBridge( const ::rtl::OUString& sName, const ::rtl::OUString& sProtocol, const ::css::uno::Reference< ::css::connection::XConnection >& aConnection, const ::css::uno::Reference< ::css::bridge::XInstanceProvider >& anInstanceProvider ) = 0;
    virtual ::css::uno::Reference< ::css::bridge::XBridge > SAL_CALL getBridge( const ::rtl::OUString& sName ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::bridge::XBridge > > SAL_CALL getExistingBridges() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XBridgeFactory() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::bridge::XBridgeFactory const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::bridge::XBridgeFactory > *);

#endif
