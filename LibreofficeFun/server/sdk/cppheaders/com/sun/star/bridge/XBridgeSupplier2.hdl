#ifndef INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGESUPPLIER2_HDL
#define INCLUDED_COM_SUN_STAR_BRIDGE_XBRIDGESUPPLIER2_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace bridge {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XBridgeSupplier2 : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XBridgeSupplier2() = default;
    XBridgeSupplier2(XBridgeSupplier2 const &) = default;
    XBridgeSupplier2(XBridgeSupplier2 &&) = default;
    XBridgeSupplier2 & operator =(XBridgeSupplier2 const &) = default;
    XBridgeSupplier2 & operator =(XBridgeSupplier2 &&) = default;
#endif


    // Methods
    virtual ::css::uno::Any SAL_CALL createBridge( const ::css::uno::Any& aModelDepObject, const ::css::uno::Sequence< ::sal_Int8 >& aProcessId, ::sal_Int16 nSourceModelType, ::sal_Int16 nDestModelType ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XBridgeSupplier2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::bridge::XBridgeSupplier2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::bridge::XBridgeSupplier2 > *);

#endif
