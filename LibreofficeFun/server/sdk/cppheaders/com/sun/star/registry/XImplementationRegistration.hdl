#ifndef INCLUDED_COM_SUN_STAR_REGISTRY_XIMPLEMENTATIONREGISTRATION_HDL
#define INCLUDED_COM_SUN_STAR_REGISTRY_XIMPLEMENTATIONREGISTRATION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace registry { class XSimpleRegistry; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace registry {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XImplementationRegistration : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XImplementationRegistration() = default;
    XImplementationRegistration(XImplementationRegistration const &) = default;
    XImplementationRegistration(XImplementationRegistration &&) = default;
    XImplementationRegistration & operator =(XImplementationRegistration const &) = default;
    XImplementationRegistration & operator =(XImplementationRegistration &&) = default;
#endif


    // Methods
    virtual void SAL_CALL registerImplementation( const ::rtl::OUString& aImplementationLoader, const ::rtl::OUString& aLocation, const ::css::uno::Reference< ::css::registry::XSimpleRegistry >& xReg ) = 0;
    virtual ::sal_Bool SAL_CALL revokeImplementation( const ::rtl::OUString& aLocation, const ::css::uno::Reference< ::css::registry::XSimpleRegistry >& xReg ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getImplementations( const ::rtl::OUString& aImplementationLoader, const ::rtl::OUString& aLocation ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL checkInstantiation( const ::rtl::OUString& implementationName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XImplementationRegistration() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::registry::XImplementationRegistration const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::registry::XImplementationRegistration > *);

#endif
