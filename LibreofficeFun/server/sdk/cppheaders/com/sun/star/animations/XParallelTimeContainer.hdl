#ifndef INCLUDED_COM_SUN_STAR_ANIMATIONS_XPARALLELTIMECONTAINER_HDL
#define INCLUDED_COM_SUN_STAR_ANIMATIONS_XPARALLELTIMECONTAINER_HDL

#include "sal/config.h"

#include "com/sun/star/animations/XTimeContainer.hdl"
#include "com/sun/star/container/XEnumerationAccess.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace animations {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XParallelTimeContainer : public ::css::animations::XTimeContainer, public ::css::container::XEnumerationAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XParallelTimeContainer() = default;
    XParallelTimeContainer(XParallelTimeContainer const &) = default;
    XParallelTimeContainer(XParallelTimeContainer &&) = default;
    XParallelTimeContainer & operator =(XParallelTimeContainer const &) = default;
    XParallelTimeContainer & operator =(XParallelTimeContainer &&) = default;
#endif


    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XParallelTimeContainer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::animations::XParallelTimeContainer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::animations::XParallelTimeContainer > *);

#endif
