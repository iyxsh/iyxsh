#ifndef INCLUDED_COM_SUN_STAR_ANIMATIONS_XAUDIO_HDL
#define INCLUDED_COM_SUN_STAR_ANIMATIONS_XAUDIO_HDL

#include "sal/config.h"

#include "com/sun/star/animations/XAnimationNode.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace animations {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAudio : public ::css::animations::XAnimationNode
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAudio() = default;
    XAudio(XAudio const &) = default;
    XAudio(XAudio &&) = default;
    XAudio & operator =(XAudio const &) = default;
    XAudio & operator =(XAudio &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Any SAL_CALL getSource() = 0;
    virtual void SAL_CALL setSource( const ::css::uno::Any& _source ) = 0;
    virtual double SAL_CALL getVolume() = 0;
    virtual void SAL_CALL setVolume( double _volume ) = 0;
    virtual ::sal_Bool SAL_CALL getHideDuringShow() = 0;
    virtual void SAL_CALL setHideDuringShow( ::sal_Bool _hideduringshow ) = 0;
    virtual ::sal_Bool SAL_CALL getNarration() = 0;
    virtual void SAL_CALL setNarration( ::sal_Bool _narration ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAudio() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::animations::XAudio const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::animations::XAudio > *);

#endif
