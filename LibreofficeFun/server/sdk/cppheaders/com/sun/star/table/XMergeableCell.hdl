#ifndef INCLUDED_COM_SUN_STAR_TABLE_XMERGEABLECELL_HDL
#define INCLUDED_COM_SUN_STAR_TABLE_XMERGEABLECELL_HDL

#include "sal/config.h"

#include "com/sun/star/table/XCell.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace table {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMergeableCell : public ::css::table::XCell
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMergeableCell() = default;
    XMergeableCell(XMergeableCell const &) = default;
    XMergeableCell(XMergeableCell &&) = default;
    XMergeableCell & operator =(XMergeableCell const &) = default;
    XMergeableCell & operator =(XMergeableCell &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getRowSpan() = 0;
    virtual ::sal_Int32 SAL_CALL getColumnSpan() = 0;
    virtual ::sal_Bool SAL_CALL isMerged() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMergeableCell() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::table::XMergeableCell const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::table::XMergeableCell > *);

#endif
