#ifndef INCLUDED_COM_SUN_STAR_TABLE_XCELLCURSOR_HDL
#define INCLUDED_COM_SUN_STAR_TABLE_XCELLCURSOR_HDL

#include "sal/config.h"

#include "com/sun/star/table/XCellRange.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace table {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCellCursor : public ::css::table::XCellRange
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCellCursor() = default;
    XCellCursor(XCellCursor const &) = default;
    XCellCursor(XCellCursor &&) = default;
    XCellCursor & operator =(XCellCursor const &) = default;
    XCellCursor & operator =(XCellCursor &&) = default;
#endif


    // Methods
    virtual void SAL_CALL gotoStart() = 0;
    virtual void SAL_CALL gotoEnd() = 0;
    virtual void SAL_CALL gotoNext() = 0;
    virtual void SAL_CALL gotoPrevious() = 0;
    virtual void SAL_CALL gotoOffset( ::sal_Int32 nColumnOffset, ::sal_Int32 nRowOffset ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCellCursor() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::table::XCellCursor const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::table::XCellCursor > *);

#endif
