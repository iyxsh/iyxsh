#ifndef INCLUDED_COM_SUN_STAR_MEDIA_XPLAYER_HDL
#define INCLUDED_COM_SUN_STAR_MEDIA_XPLAYER_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Size.hdl"
namespace com { namespace sun { namespace star { namespace media { class XFrameGrabber; } } } }
namespace com { namespace sun { namespace star { namespace media { class XPlayerWindow; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace media {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPlayer : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPlayer() = default;
    XPlayer(XPlayer const &) = default;
    XPlayer(XPlayer &&) = default;
    XPlayer & operator =(XPlayer const &) = default;
    XPlayer & operator =(XPlayer &&) = default;
#endif


    // Methods
    virtual void SAL_CALL start() = 0;
    virtual void SAL_CALL stop() = 0;
    virtual ::sal_Bool SAL_CALL isPlaying() = 0;
    virtual double SAL_CALL getDuration() = 0;
    virtual void SAL_CALL setMediaTime( double fTime ) = 0;
    virtual double SAL_CALL getMediaTime() = 0;
    virtual void SAL_CALL setPlaybackLoop( ::sal_Bool bSet ) = 0;
    virtual ::sal_Bool SAL_CALL isPlaybackLoop() = 0;
    virtual void SAL_CALL setVolumeDB( ::sal_Int16 nDB ) = 0;
    virtual ::sal_Int16 SAL_CALL getVolumeDB() = 0;
    virtual void SAL_CALL setMute( ::sal_Bool bSet ) = 0;
    virtual ::sal_Bool SAL_CALL isMute() = 0;
    virtual ::css::awt::Size SAL_CALL getPreferredPlayerWindowSize() = 0;
    virtual ::css::uno::Reference< ::css::media::XPlayerWindow > SAL_CALL createPlayerWindow( const ::css::uno::Sequence< ::css::uno::Any >& aArguments ) = 0;
    virtual ::css::uno::Reference< ::css::media::XFrameGrabber > SAL_CALL createFrameGrabber() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPlayer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::media::XPlayer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::media::XPlayer > *);

#endif
