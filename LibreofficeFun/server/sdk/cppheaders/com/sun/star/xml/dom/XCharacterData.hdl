#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_XCHARACTERDATA_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_XCHARACTERDATA_HDL

#include "sal/config.h"

#include "com/sun/star/xml/dom/XNode.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace dom {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCharacterData : public ::css::xml::dom::XNode
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCharacterData() = default;
    XCharacterData(XCharacterData const &) = default;
    XCharacterData(XCharacterData &&) = default;
    XCharacterData & operator =(XCharacterData const &) = default;
    XCharacterData & operator =(XCharacterData &&) = default;
#endif


    // Methods
    virtual void SAL_CALL appendData( const ::rtl::OUString& arg ) = 0;
    virtual void SAL_CALL deleteData( ::sal_Int32 offset, ::sal_Int32 count ) = 0;
    virtual ::rtl::OUString SAL_CALL getData() = 0;
    virtual ::sal_Int32 SAL_CALL getLength() = 0;
    virtual void SAL_CALL insertData( ::sal_Int32 offset, const ::rtl::OUString& arg ) = 0;
    virtual void SAL_CALL replaceData( ::sal_Int32 offset, ::sal_Int32 count, const ::rtl::OUString& arg ) = 0;
    virtual void SAL_CALL setData( const ::rtl::OUString& data ) = 0;
    virtual ::rtl::OUString SAL_CALL subStringData( ::sal_Int32 offset, ::sal_Int32 count ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCharacterData() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::dom::XCharacterData const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::dom::XCharacterData > *);

#endif
