#ifndef INCLUDED_COM_SUN_STAR_XML_SAX_XPARSER_HDL
#define INCLUDED_COM_SUN_STAR_XML_SAX_XPARSER_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/xml/sax/InputSource.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XDTDHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XDocumentHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XEntityResolver; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XErrorHandler; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace sax {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XParser : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XParser() = default;
    XParser(XParser const &) = default;
    XParser(XParser &&) = default;
    XParser & operator =(XParser const &) = default;
    XParser & operator =(XParser &&) = default;
#endif


    // Methods
    virtual void SAL_CALL parseStream( const ::css::xml::sax::InputSource& aInputSource ) = 0;
    virtual void SAL_CALL setDocumentHandler( const ::css::uno::Reference< ::css::xml::sax::XDocumentHandler >& xHandler ) = 0;
    virtual void SAL_CALL setErrorHandler( const ::css::uno::Reference< ::css::xml::sax::XErrorHandler >& xHandler ) = 0;
    virtual void SAL_CALL setDTDHandler( const ::css::uno::Reference< ::css::xml::sax::XDTDHandler >& xHandler ) = 0;
    virtual void SAL_CALL setEntityResolver( const ::css::uno::Reference< ::css::xml::sax::XEntityResolver >& xResolver ) = 0;
    virtual void SAL_CALL setLocale( const ::css::lang::Locale& locale ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XParser() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::sax::XParser const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::sax::XParser > *);

#endif
