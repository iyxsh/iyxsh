#ifndef INCLUDED_COM_SUN_STAR_XML_INPUT_XELEMENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_INPUT_XELEMENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace input { class XAttributes; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace input { class XElement; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace input {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XElement : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XElement() = default;
    XElement(XElement const &) = default;
    XElement(XElement &&) = default;
    XElement & operator =(XElement const &) = default;
    XElement & operator =(XElement &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::xml::input::XElement > SAL_CALL getParent() = 0;
    virtual ::rtl::OUString SAL_CALL getLocalName() = 0;
    virtual ::sal_Int32 SAL_CALL getUid() = 0;
    virtual ::css::uno::Reference< ::css::xml::input::XAttributes > SAL_CALL getAttributes() = 0;
    virtual ::css::uno::Reference< ::css::xml::input::XElement > SAL_CALL startChildElement( ::sal_Int32 uid, const ::rtl::OUString& localName, const ::css::uno::Reference< ::css::xml::input::XAttributes >& xAttributes ) = 0;
    virtual void SAL_CALL characters( const ::rtl::OUString& chars ) = 0;
    virtual void SAL_CALL ignorableWhitespace( const ::rtl::OUString& whitespace ) = 0;
    virtual void SAL_CALL processingInstruction( const ::rtl::OUString& target, const ::rtl::OUString& data ) = 0;
    virtual void SAL_CALL endElement() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XElement() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::input::XElement const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::input::XElement > *);

#endif
