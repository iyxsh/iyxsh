#ifndef INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_XEVENT_HDL
#define INCLUDED_COM_SUN_STAR_XML_DOM_EVENTS_XEVENT_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/Time.hdl"
#include "com/sun/star/xml/dom/events/PhaseType.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace dom { namespace events { class XEventTarget; } } } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace dom { namespace events {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XEvent : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XEvent() = default;
    XEvent(XEvent const &) = default;
    XEvent(XEvent &&) = default;
    XEvent & operator =(XEvent const &) = default;
    XEvent & operator =(XEvent &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getType() = 0;
    virtual ::css::uno::Reference< ::css::xml::dom::events::XEventTarget > SAL_CALL getTarget() = 0;
    virtual ::css::uno::Reference< ::css::xml::dom::events::XEventTarget > SAL_CALL getCurrentTarget() = 0;
    virtual ::css::xml::dom::events::PhaseType SAL_CALL getEventPhase() = 0;
    virtual ::sal_Bool SAL_CALL getBubbles() = 0;
    virtual ::sal_Bool SAL_CALL getCancelable() = 0;
    virtual ::css::util::Time SAL_CALL getTimeStamp() = 0;
    virtual void SAL_CALL stopPropagation() = 0;
    virtual void SAL_CALL preventDefault() = 0;
    virtual void SAL_CALL initEvent( const ::rtl::OUString& eventTypeArg, ::sal_Bool canBubbleArg, ::sal_Bool cancelableArg ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XEvent() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::dom::events::XEvent const *);
} } } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::dom::events::XEvent > *);

#endif
