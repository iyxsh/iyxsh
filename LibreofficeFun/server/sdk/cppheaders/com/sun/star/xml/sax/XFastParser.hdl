#ifndef INCLUDED_COM_SUN_STAR_XML_SAX_XFASTPARSER_HDL
#define INCLUDED_COM_SUN_STAR_XML_SAX_XFASTPARSER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/Pair.hdl"
#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/xml/sax/InputSource.hdl"
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XEntityResolver; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XErrorHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XFastDocumentHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XFastNamespaceHandler; } } } } }
namespace com { namespace sun { namespace star { namespace xml { namespace sax { class XFastTokenHandler; } } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace xml { namespace sax {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFastParser : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFastParser() = default;
    XFastParser(XFastParser const &) = default;
    XFastParser(XFastParser &&) = default;
    XFastParser & operator =(XFastParser const &) = default;
    XFastParser & operator =(XFastParser &&) = default;
#endif


    // Methods
    virtual void SAL_CALL parseStream( const ::css::xml::sax::InputSource& aInputSource ) = 0;
    virtual void SAL_CALL setFastDocumentHandler( const ::css::uno::Reference< ::css::xml::sax::XFastDocumentHandler >& Handler ) = 0;
    virtual void SAL_CALL setTokenHandler( const ::css::uno::Reference< ::css::xml::sax::XFastTokenHandler >& Handler ) = 0;
    virtual void SAL_CALL registerNamespace( const ::rtl::OUString& NamespaceURL, ::sal_Int32 NamespaceToken ) = 0;
    virtual void SAL_CALL setErrorHandler( const ::css::uno::Reference< ::css::xml::sax::XErrorHandler >& Handler ) = 0;
    virtual void SAL_CALL setEntityResolver( const ::css::uno::Reference< ::css::xml::sax::XEntityResolver >& Resolver ) = 0;
    virtual void SAL_CALL setLocale( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getNamespaceURL( const ::rtl::OUString& prefix ) = 0;
    virtual void SAL_CALL setNamespaceHandler( const ::css::uno::Reference< ::css::xml::sax::XFastNamespaceHandler >& Handler ) = 0;
    virtual void SAL_CALL setCustomEntityNames( const ::css::uno::Sequence< ::css::beans::Pair< ::rtl::OUString, ::rtl::OUString > >& replacements ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFastParser() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::xml::sax::XFastParser const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::xml::sax::XFastParser > *);

#endif
