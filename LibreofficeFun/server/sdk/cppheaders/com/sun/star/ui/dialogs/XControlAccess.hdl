#ifndef INCLUDED_COM_SUN_STAR_UI_DIALOGS_XCONTROLACCESS_HDL
#define INCLUDED_COM_SUN_STAR_UI_DIALOGS_XCONTROLACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ui { namespace dialogs {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XControlAccess : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XControlAccess() = default;
    XControlAccess(XControlAccess const &) = default;
    XControlAccess(XControlAccess &&) = default;
    XControlAccess & operator =(XControlAccess const &) = default;
    XControlAccess & operator =(XControlAccess &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setControlProperty( const ::rtl::OUString& aControlName, const ::rtl::OUString& aControlProperty, const ::css::uno::Any& aValue ) = 0;
    virtual ::css::uno::Any SAL_CALL getControlProperty( const ::rtl::OUString& aControlName, const ::rtl::OUString& aControlProperty ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XControlAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ui::dialogs::XControlAccess const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::ui::dialogs::XControlAccess > *);

#endif
