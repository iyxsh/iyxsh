#ifndef INCLUDED_COM_SUN_STAR_UI_XACCELERATORCONFIGURATION_HDL
#define INCLUDED_COM_SUN_STAR_UI_XACCELERATORCONFIGURATION_HDL

#include "sal/config.h"

#include "com/sun/star/awt/KeyEvent.hdl"
#include "com/sun/star/ui/XUIConfiguration.hdl"
#include "com/sun/star/ui/XUIConfigurationPersistence.hdl"
#include "com/sun/star/ui/XUIConfigurationStorage.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ui {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAcceleratorConfiguration : public ::css::ui::XUIConfigurationPersistence, public ::css::ui::XUIConfigurationStorage, public ::css::ui::XUIConfiguration
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAcceleratorConfiguration() = default;
    XAcceleratorConfiguration(XAcceleratorConfiguration const &) = default;
    XAcceleratorConfiguration(XAcceleratorConfiguration &&) = default;
    XAcceleratorConfiguration & operator =(XAcceleratorConfiguration const &) = default;
    XAcceleratorConfiguration & operator =(XAcceleratorConfiguration &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::awt::KeyEvent > SAL_CALL getAllKeyEvents() = 0;
    virtual ::rtl::OUString SAL_CALL getCommandByKeyEvent( const ::css::awt::KeyEvent& aKeyEvent ) = 0;
    virtual void SAL_CALL setKeyEvent( const ::css::awt::KeyEvent& aKeyEvent, const ::rtl::OUString& sCommand ) = 0;
    virtual void SAL_CALL removeKeyEvent( const ::css::awt::KeyEvent& aKeyEvent ) = 0;
    virtual ::css::uno::Sequence< ::css::awt::KeyEvent > SAL_CALL getKeyEventsByCommand( const ::rtl::OUString& sCommand ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getPreferredKeyEventsForCommandList( const ::css::uno::Sequence< ::rtl::OUString >& lCommandList ) = 0;
    virtual void SAL_CALL removeCommandFromAllKeyEvents( const ::rtl::OUString& sCommand ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAcceleratorConfiguration() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ui::XAcceleratorConfiguration const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::ui::XAcceleratorConfiguration > *);

#endif
