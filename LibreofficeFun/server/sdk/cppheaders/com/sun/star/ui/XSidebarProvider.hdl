#ifndef INCLUDED_COM_SUN_STAR_UI_XSIDEBARPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_UI_XSIDEBARPROVIDER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace frame { class XFrame; } } } }
namespace com { namespace sun { namespace star { namespace ui { class XDecks; } } } }
namespace com { namespace sun { namespace star { namespace ui { class XSidebar; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ui {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSidebarProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSidebarProvider() = default;
    XSidebarProvider(XSidebarProvider const &) = default;
    XSidebarProvider(XSidebarProvider &&) = default;
    XSidebarProvider & operator =(XSidebarProvider const &) = default;
    XSidebarProvider & operator =(XSidebarProvider &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setVisible( ::sal_Bool bVisible ) = 0;
    virtual ::sal_Bool SAL_CALL isVisible() = 0;
    virtual ::css::uno::Reference< ::css::frame::XFrame > SAL_CALL getFrame() = 0;
    virtual ::css::uno::Reference< ::css::ui::XDecks > SAL_CALL getDecks() = 0;
    virtual void SAL_CALL showDecks( ::sal_Bool bVisible ) = 0;
    virtual ::css::uno::Reference< ::css::ui::XSidebar > SAL_CALL getSidebar() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSidebarProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ui::XSidebarProvider const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::ui::XSidebarProvider > *);

#endif
