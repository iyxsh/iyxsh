#ifndef INCLUDED_COM_SUN_STAR_UI_DIALOGS_XFILEPREVIEW_HDL
#define INCLUDED_COM_SUN_STAR_UI_DIALOGS_XFILEPREVIEW_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/Color.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace ui { namespace dialogs {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFilePreview : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFilePreview() = default;
    XFilePreview(XFilePreview const &) = default;
    XFilePreview(XFilePreview &&) = default;
    XFilePreview & operator =(XFilePreview const &) = default;
    XFilePreview & operator =(XFilePreview &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::sal_Int16 > SAL_CALL getSupportedImageFormats() = 0;
    SAL_DEPRECATED_INTERNAL("marked @deprecated in UNOIDL") virtual ::sal_Int32 SAL_CALL getTargetColorDepth() = 0;
    virtual ::sal_Int32 SAL_CALL getAvailableWidth() = 0;
    virtual ::sal_Int32 SAL_CALL getAvailableHeight() = 0;
    virtual void SAL_CALL setImage( ::sal_Int16 aImageFormat, const ::css::uno::Any& aImage ) = 0;
    virtual ::sal_Bool SAL_CALL setShowState( ::sal_Bool bShowState ) = 0;
    virtual ::sal_Bool SAL_CALL getShowState() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFilePreview() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::ui::dialogs::XFilePreview const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::ui::dialogs::XFilePreview > *);

#endif
