#ifndef INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTORMODEL_HDL
#define INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTORMODEL_HDL

#include "sal/config.h"

#include "com/sun/star/inspection/PropertyCategoryDescriptor.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace inspection {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XObjectInspectorModel : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XObjectInspectorModel() = default;
    XObjectInspectorModel(XObjectInspectorModel const &) = default;
    XObjectInspectorModel(XObjectInspectorModel &&) = default;
    XObjectInspectorModel & operator =(XObjectInspectorModel const &) = default;
    XObjectInspectorModel & operator =(XObjectInspectorModel &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Sequence< ::css::uno::Any > SAL_CALL getHandlerFactories() = 0;
    virtual ::sal_Bool SAL_CALL getHasHelpSection() = 0;
    virtual ::sal_Int32 SAL_CALL getMinHelpTextLines() = 0;
    virtual ::sal_Int32 SAL_CALL getMaxHelpTextLines() = 0;
    virtual ::sal_Bool SAL_CALL getIsReadOnly() = 0;
    virtual void SAL_CALL setIsReadOnly( ::sal_Bool _isreadonly ) = 0;

    // Methods
    virtual ::css::uno::Sequence< ::css::inspection::PropertyCategoryDescriptor > SAL_CALL describeCategories() = 0;
    virtual ::sal_Int32 SAL_CALL getPropertyOrderIndex( const ::rtl::OUString& PropertyName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XObjectInspectorModel() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::inspection::XObjectInspectorModel const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::inspection::XObjectInspectorModel > *);

#endif
