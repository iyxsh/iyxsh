#ifndef INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTOR_HDL
#define INCLUDED_COM_SUN_STAR_INSPECTION_XOBJECTINSPECTOR_HDL

#include "sal/config.h"

#include "com/sun/star/frame/XController.hdl"
#include "com/sun/star/frame/XDispatchProvider.hdl"
namespace com { namespace sun { namespace star { namespace inspection { class XObjectInspectorModel; } } } }
namespace com { namespace sun { namespace star { namespace inspection { class XObjectInspectorUI; } } } }
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace inspection {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XObjectInspector : public ::css::frame::XController, public ::css::frame::XDispatchProvider
{
public:
#if defined LIBO_INTERNAL_ONLY
    XObjectInspector() = default;
    XObjectInspector(XObjectInspector const &) = default;
    XObjectInspector(XObjectInspector &&) = default;
    XObjectInspector & operator =(XObjectInspector const &) = default;
    XObjectInspector & operator =(XObjectInspector &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Reference< ::css::inspection::XObjectInspectorModel > SAL_CALL getInspectorModel() = 0;
    virtual void SAL_CALL setInspectorModel( const ::css::uno::Reference< ::css::inspection::XObjectInspectorModel >& _inspectormodel ) = 0;
    virtual ::css::uno::Reference< ::css::inspection::XObjectInspectorUI > SAL_CALL getInspectorUI() = 0;

    // Methods
    virtual void SAL_CALL inspect( const ::css::uno::Sequence< ::css::uno::Reference< ::css::uno::XInterface > >& Objects ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XObjectInspector() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::inspection::XObjectInspector const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::inspection::XObjectInspector > *);

#endif
