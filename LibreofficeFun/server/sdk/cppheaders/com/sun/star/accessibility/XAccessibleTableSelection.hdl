#ifndef INCLUDED_COM_SUN_STAR_ACCESSIBILITY_XACCESSIBLETABLESELECTION_HDL
#define INCLUDED_COM_SUN_STAR_ACCESSIBILITY_XACCESSIBLETABLESELECTION_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace accessibility {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAccessibleTableSelection : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAccessibleTableSelection() = default;
    XAccessibleTableSelection(XAccessibleTableSelection const &) = default;
    XAccessibleTableSelection(XAccessibleTableSelection &&) = default;
    XAccessibleTableSelection & operator =(XAccessibleTableSelection const &) = default;
    XAccessibleTableSelection & operator =(XAccessibleTableSelection &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL selectRow( ::sal_Int32 row ) = 0;
    virtual ::sal_Bool SAL_CALL unselectRow( ::sal_Int32 row ) = 0;
    virtual ::sal_Bool SAL_CALL selectColumn( ::sal_Int32 column ) = 0;
    virtual ::sal_Bool SAL_CALL unselectColumn( ::sal_Int32 column ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAccessibleTableSelection() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::accessibility::XAccessibleTableSelection const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::accessibility::XAccessibleTableSelection > *);

#endif
