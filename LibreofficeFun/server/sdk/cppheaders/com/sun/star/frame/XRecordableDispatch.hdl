#ifndef INCLUDED_COM_SUN_STAR_FRAME_XRECORDABLEDISPATCH_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XRECORDABLEDISPATCH_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XDispatchRecorder; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/URL.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XRecordableDispatch : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XRecordableDispatch() = default;
    XRecordableDispatch(XRecordableDispatch const &) = default;
    XRecordableDispatch(XRecordableDispatch &&) = default;
    XRecordableDispatch & operator =(XRecordableDispatch const &) = default;
    XRecordableDispatch & operator =(XRecordableDispatch &&) = default;
#endif


    // Methods
    virtual void SAL_CALL dispatchAndRecord( const ::css::util::URL& URL, const ::css::uno::Sequence< ::css::beans::PropertyValue >& Arguments, const ::css::uno::Reference< ::css::frame::XDispatchRecorder >& Recorder ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XRecordableDispatch() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XRecordableDispatch const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XRecordableDispatch > *);

#endif
