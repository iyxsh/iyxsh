#ifndef INCLUDED_COM_SUN_STAR_FRAME_XDISPATCHPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XDISPATCHPROVIDER_HDL

#include "sal/config.h"

#include "com/sun/star/frame/DispatchDescriptor.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XDispatch; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/URL.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDispatchProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDispatchProvider() = default;
    XDispatchProvider(XDispatchProvider const &) = default;
    XDispatchProvider(XDispatchProvider &&) = default;
    XDispatchProvider & operator =(XDispatchProvider const &) = default;
    XDispatchProvider & operator =(XDispatchProvider &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::frame::XDispatch > SAL_CALL queryDispatch( const ::css::util::URL& URL, const ::rtl::OUString& TargetFrameName, ::sal_Int32 SearchFlags ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::frame::XDispatch > > SAL_CALL queryDispatches( const ::css::uno::Sequence< ::css::frame::DispatchDescriptor >& Requests ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDispatchProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XDispatchProvider const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XDispatchProvider > *);

#endif
