#ifndef INCLUDED_COM_SUN_STAR_FRAME_XMODEL_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XMODEL_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace frame { class XController; } } } }
#include "com/sun/star/lang/XComponent.hdl"
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XModel : public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XModel() = default;
    XModel(XModel const &) = default;
    XModel(XModel &&) = default;
    XModel & operator =(XModel const &) = default;
    XModel & operator =(XModel &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL attachResource( const ::rtl::OUString& URL, const ::css::uno::Sequence< ::css::beans::PropertyValue >& Arguments ) = 0;
    virtual ::rtl::OUString SAL_CALL getURL() = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getArgs() = 0;
    virtual void SAL_CALL connectController( const ::css::uno::Reference< ::css::frame::XController >& Controller ) = 0;
    virtual void SAL_CALL disconnectController( const ::css::uno::Reference< ::css::frame::XController >& Controller ) = 0;
    virtual void SAL_CALL lockControllers() = 0;
    virtual void SAL_CALL unlockControllers() = 0;
    virtual ::sal_Bool SAL_CALL hasControllersLocked() = 0;
    virtual ::css::uno::Reference< ::css::frame::XController > SAL_CALL getCurrentController() = 0;
    virtual void SAL_CALL setCurrentController( const ::css::uno::Reference< ::css::frame::XController >& Controller ) = 0;
    virtual ::css::uno::Reference< ::css::uno::XInterface > SAL_CALL getCurrentSelection() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XModel() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XModel const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XModel > *);

#endif
