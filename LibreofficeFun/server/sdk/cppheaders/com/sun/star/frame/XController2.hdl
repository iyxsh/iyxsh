#ifndef INCLUDED_COM_SUN_STAR_FRAME_XCONTROLLER2_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XCONTROLLER2_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XWindow; } } } }
#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/frame/XController.hdl"
namespace com { namespace sun { namespace star { namespace ui { class XSidebarProvider; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XController2 : public ::css::frame::XController
{
public:
#if defined LIBO_INTERNAL_ONLY
    XController2() = default;
    XController2(XController2 const &) = default;
    XController2(XController2 &&) = default;
    XController2 & operator =(XController2 const &) = default;
    XController2 & operator =(XController2 &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Reference< ::css::awt::XWindow > SAL_CALL getComponentWindow() = 0;
    virtual ::rtl::OUString SAL_CALL getViewControllerName() = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getCreationArguments() = 0;

    // Methods
    virtual ::css::uno::Reference< ::css::ui::XSidebarProvider > SAL_CALL getSidebar() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XController2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XController2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XController2 > *);

#endif
