#ifndef INCLUDED_COM_SUN_STAR_FRAME_XSESSIONMANAGERCLIENT_HDL
#define INCLUDED_COM_SUN_STAR_FRAME_XSESSIONMANAGERCLIENT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace frame { class XSessionManagerListener; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace frame {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSessionManagerClient : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSessionManagerClient() = default;
    XSessionManagerClient(XSessionManagerClient const &) = default;
    XSessionManagerClient(XSessionManagerClient &&) = default;
    XSessionManagerClient & operator =(XSessionManagerClient const &) = default;
    XSessionManagerClient & operator =(XSessionManagerClient &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addSessionManagerListener( const ::css::uno::Reference< ::css::frame::XSessionManagerListener >& xListener ) = 0;
    virtual void SAL_CALL removeSessionManagerListener( const ::css::uno::Reference< ::css::frame::XSessionManagerListener >& xListener ) = 0;
    virtual void SAL_CALL queryInteraction( const ::css::uno::Reference< ::css::frame::XSessionManagerListener >& xListener ) = 0;
    virtual void SAL_CALL interactionDone( const ::css::uno::Reference< ::css::frame::XSessionManagerListener >& xListener ) = 0;
    virtual void SAL_CALL saveDone( const ::css::uno::Reference< ::css::frame::XSessionManagerListener >& xListener ) = 0;
    virtual ::sal_Bool SAL_CALL cancelShutdown() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSessionManagerClient() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::frame::XSessionManagerClient const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::frame::XSessionManagerClient > *);

#endif
