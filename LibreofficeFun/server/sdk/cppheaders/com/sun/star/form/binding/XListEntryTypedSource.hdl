#ifndef INCLUDED_COM_SUN_STAR_FORM_BINDING_XLISTENTRYTYPEDSOURCE_HDL
#define INCLUDED_COM_SUN_STAR_FORM_BINDING_XLISTENTRYTYPEDSOURCE_HDL

#include "sal/config.h"

#include "com/sun/star/form/binding/XListEntrySource.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace form { namespace binding {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XListEntryTypedSource : public ::css::form::binding::XListEntrySource
{
public:
#if defined LIBO_INTERNAL_ONLY
    XListEntryTypedSource() = default;
    XListEntryTypedSource(XListEntryTypedSource const &) = default;
    XListEntryTypedSource(XListEntryTypedSource &&) = default;
    XListEntryTypedSource & operator =(XListEntryTypedSource const &) = default;
    XListEntryTypedSource & operator =(XListEntryTypedSource &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAllListEntriesTyped( ::css::uno::Sequence< ::css::uno::Any >& DataValues ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XListEntryTypedSource() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::form::binding::XListEntryTypedSource const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::form::binding::XListEntryTypedSource > *);

#endif
