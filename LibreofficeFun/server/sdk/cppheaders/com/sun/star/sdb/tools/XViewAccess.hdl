#ifndef INCLUDED_COM_SUN_STAR_SDB_TOOLS_XVIEWACCESS_HDL
#define INCLUDED_COM_SUN_STAR_SDB_TOOLS_XVIEWACCESS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
#include "com/sun/star/sdb/tools/XConnectionSupplier.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdb { namespace tools {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XViewAccess : public ::css::sdb::tools::XConnectionSupplier
{
public:
#if defined LIBO_INTERNAL_ONLY
    XViewAccess() = default;
    XViewAccess(XViewAccess const &) = default;
    XViewAccess(XViewAccess &&) = default;
    XViewAccess & operator =(XViewAccess const &) = default;
    XViewAccess & operator =(XViewAccess &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getCommand( const ::css::uno::Reference< ::css::beans::XPropertySet >& view ) = 0;
    virtual void SAL_CALL alterCommand( const ::css::uno::Reference< ::css::beans::XPropertySet >& view, const ::rtl::OUString& command ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XViewAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdb::tools::XViewAccess const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdb::tools::XViewAccess > *);

#endif
