#ifndef INCLUDED_COM_SUN_STAR_SDB_APPLICATION_XTABLEUIPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_SDB_APPLICATION_XTABLEUIPROVIDER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace graphic { class XGraphic; } } } }
namespace com { namespace sun { namespace star { namespace sdb { namespace application { class XDatabaseDocumentUI; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdb { namespace application {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTableUIProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTableUIProvider() = default;
    XTableUIProvider(XTableUIProvider const &) = default;
    XTableUIProvider(XTableUIProvider &&) = default;
    XTableUIProvider & operator =(XTableUIProvider const &) = default;
    XTableUIProvider & operator =(XTableUIProvider &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::graphic::XGraphic > SAL_CALL getTableIcon( const ::rtl::OUString& TableName, ::sal_Int32 ColorMode ) = 0;
    virtual ::css::uno::Reference< ::css::uno::XInterface > SAL_CALL getTableEditor( const ::css::uno::Reference< ::css::sdb::application::XDatabaseDocumentUI >& DocumentUI, const ::rtl::OUString& TableName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTableUIProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdb::application::XTableUIProvider const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdb::application::XTableUIProvider > *);

#endif
