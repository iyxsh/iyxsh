#ifndef INCLUDED_COM_SUN_STAR_SDB_XDATABASECONTEXT_HDL
#define INCLUDED_COM_SUN_STAR_SDB_XDATABASECONTEXT_HDL

#include "sal/config.h"

#include "com/sun/star/container/XContainer.hdl"
#include "com/sun/star/container/XEnumerationAccess.hdl"
#include "com/sun/star/container/XNameAccess.hdl"
#include "com/sun/star/lang/XSingleServiceFactory.hdl"
#include "com/sun/star/sdb/XDatabaseRegistrations.hdl"
#include "com/sun/star/uno/XNamingService.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdb {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDatabaseContext : public ::css::container::XEnumerationAccess, public ::css::container::XNameAccess, public ::css::uno::XNamingService, public ::css::container::XContainer, public ::css::lang::XSingleServiceFactory, public ::css::sdb::XDatabaseRegistrations
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDatabaseContext() = default;
    XDatabaseContext(XDatabaseContext const &) = default;
    XDatabaseContext(XDatabaseContext &&) = default;
    XDatabaseContext & operator =(XDatabaseContext const &) = default;
    XDatabaseContext & operator =(XDatabaseContext &&) = default;
#endif


    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDatabaseContext() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdb::XDatabaseContext const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdb::XDatabaseContext > *);

#endif
