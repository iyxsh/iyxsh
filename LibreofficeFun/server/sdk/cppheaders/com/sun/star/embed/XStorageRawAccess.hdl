#ifndef INCLUDED_COM_SUN_STAR_EMBED_XSTORAGERAWACCESS_HDL
#define INCLUDED_COM_SUN_STAR_EMBED_XSTORAGERAWACCESS_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace embed {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStorageRawAccess : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStorageRawAccess() = default;
    XStorageRawAccess(XStorageRawAccess const &) = default;
    XStorageRawAccess(XStorageRawAccess &&) = default;
    XStorageRawAccess & operator =(XStorageRawAccess const &) = default;
    XStorageRawAccess & operator =(XStorageRawAccess &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::io::XInputStream > SAL_CALL getPlainRawStreamElement( const ::rtl::OUString& sStreamName ) = 0;
    virtual ::css::uno::Reference< ::css::io::XInputStream > SAL_CALL getRawEncrStreamElement( const ::rtl::OUString& sStreamName ) = 0;
    virtual void SAL_CALL insertRawEncrStreamElement( const ::rtl::OUString& sStreamName, const ::css::uno::Reference< ::css::io::XInputStream >& xInStream ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStorageRawAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::embed::XStorageRawAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::embed::XStorageRawAccess > *);

#endif
