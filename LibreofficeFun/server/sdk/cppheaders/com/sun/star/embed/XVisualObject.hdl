#ifndef INCLUDED_COM_SUN_STAR_EMBED_XVISUALOBJECT_HDL
#define INCLUDED_COM_SUN_STAR_EMBED_XVISUALOBJECT_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Size.hdl"
#include "com/sun/star/embed/VisualRepresentation.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace embed {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XVisualObject : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XVisualObject() = default;
    XVisualObject(XVisualObject const &) = default;
    XVisualObject(XVisualObject &&) = default;
    XVisualObject & operator =(XVisualObject const &) = default;
    XVisualObject & operator =(XVisualObject &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setVisualAreaSize( ::sal_Int64 nAspect, const ::css::awt::Size& aSize ) = 0;
    virtual ::css::awt::Size SAL_CALL getVisualAreaSize( ::sal_Int64 nAspect ) = 0;
    virtual ::css::embed::VisualRepresentation SAL_CALL getPreferredVisualRepresentation( ::sal_Int64 nAspect ) = 0;
    virtual ::sal_Int32 SAL_CALL getMapUnit( ::sal_Int64 nAspect ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XVisualObject() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::embed::XVisualObject const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::embed::XVisualObject > *);

#endif
