#ifndef INCLUDED_COM_SUN_STAR_AWT_XTABLISTENER_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTABLISTENER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/NamedValue.hdl"
#include "com/sun/star/lang/XEventListener.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTabListener : public ::css::lang::XEventListener
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTabListener() = default;
    XTabListener(XTabListener const &) = default;
    XTabListener(XTabListener &&) = default;
    XTabListener & operator =(XTabListener const &) = default;
    XTabListener & operator =(XTabListener &&) = default;
#endif


    // Methods
    virtual void SAL_CALL inserted( ::sal_Int32 ID ) = 0;
    virtual void SAL_CALL removed( ::sal_Int32 ID ) = 0;
    virtual void SAL_CALL changed( ::sal_Int32 ID, const ::css::uno::Sequence< ::css::beans::NamedValue >& Properties ) = 0;
    virtual void SAL_CALL activated( ::sal_Int32 ID ) = 0;
    virtual void SAL_CALL deactivated( ::sal_Int32 ID ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTabListener() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XTabListener const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XTabListener > *);

#endif
