#ifndef INCLUDED_COM_SUN_STAR_AWT_XCONTROL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XCONTROL_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XControlModel; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XToolkit; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XView; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XWindowPeer; } } } }
#include "com/sun/star/lang/XComponent.hdl"
namespace com { namespace sun { namespace star { namespace uno { class XInterface; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XControl : public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XControl() = default;
    XControl(XControl const &) = default;
    XControl(XControl &&) = default;
    XControl & operator =(XControl const &) = default;
    XControl & operator =(XControl &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setContext( const ::css::uno::Reference< ::css::uno::XInterface >& Context ) = 0;
    virtual ::css::uno::Reference< ::css::uno::XInterface > SAL_CALL getContext() = 0;
    virtual void SAL_CALL createPeer( const ::css::uno::Reference< ::css::awt::XToolkit >& Toolkit, const ::css::uno::Reference< ::css::awt::XWindowPeer >& Parent ) = 0;
    virtual ::css::uno::Reference< ::css::awt::XWindowPeer > SAL_CALL getPeer() = 0;
    virtual ::sal_Bool SAL_CALL setModel( const ::css::uno::Reference< ::css::awt::XControlModel >& Model ) = 0;
    virtual ::css::uno::Reference< ::css::awt::XControlModel > SAL_CALL getModel() = 0;
    virtual ::css::uno::Reference< ::css::awt::XView > SAL_CALL getView() = 0;
    virtual void SAL_CALL setDesignMode( ::sal_Bool bOn ) = 0;
    virtual ::sal_Bool SAL_CALL isDesignMode() = 0;
    virtual ::sal_Bool SAL_CALL isTransparent() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XControl() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XControl const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XControl > *);

#endif
