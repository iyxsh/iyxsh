#ifndef INCLUDED_COM_SUN_STAR_AWT_XGRAPHICS_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XGRAPHICS_HDL

#include "sal/config.h"

#include "com/sun/star/awt/FontDescriptor.hdl"
#include "com/sun/star/awt/Gradient.hdl"
#include "com/sun/star/awt/RasterOperation.hdl"
#include "com/sun/star/awt/SimpleFontMetric.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XDevice; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XDisplayBitmap; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XFont; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XRegion; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/Color.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XGraphics : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XGraphics() = default;
    XGraphics(XGraphics const &) = default;
    XGraphics(XGraphics &&) = default;
    XGraphics & operator =(XGraphics const &) = default;
    XGraphics & operator =(XGraphics &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::XDevice > SAL_CALL getDevice() = 0;
    virtual ::css::awt::SimpleFontMetric SAL_CALL getFontMetric() = 0;
    virtual void SAL_CALL setFont( const ::css::uno::Reference< ::css::awt::XFont >& xNewFont ) = 0;
    virtual void SAL_CALL selectFont( const ::css::awt::FontDescriptor& aDescription ) = 0;
    virtual void SAL_CALL setTextColor( ::sal_Int32 nColor ) = 0;
    virtual void SAL_CALL setTextFillColor( ::sal_Int32 nColor ) = 0;
    virtual void SAL_CALL setLineColor( ::sal_Int32 nColor ) = 0;
    virtual void SAL_CALL setFillColor( ::sal_Int32 nColor ) = 0;
    virtual void SAL_CALL setRasterOp( ::css::awt::RasterOperation ROP ) = 0;
    virtual void SAL_CALL setClipRegion( const ::css::uno::Reference< ::css::awt::XRegion >& Clipping ) = 0;
    virtual void SAL_CALL intersectClipRegion( const ::css::uno::Reference< ::css::awt::XRegion >& xClipping ) = 0;
    virtual void SAL_CALL push() = 0;
    virtual void SAL_CALL pop() = 0;
    virtual void SAL_CALL copy( const ::css::uno::Reference< ::css::awt::XDevice >& xSource, ::sal_Int32 nSourceX, ::sal_Int32 nSourceY, ::sal_Int32 nSourceWidth, ::sal_Int32 nSourceHeight, ::sal_Int32 nDestX, ::sal_Int32 nDestY, ::sal_Int32 nDestWidth, ::sal_Int32 nDestHeight ) = 0;
    virtual void SAL_CALL draw( const ::css::uno::Reference< ::css::awt::XDisplayBitmap >& xBitmapHandle, ::sal_Int32 SourceX, ::sal_Int32 SourceY, ::sal_Int32 SourceWidth, ::sal_Int32 SourceHeight, ::sal_Int32 DestX, ::sal_Int32 DestY, ::sal_Int32 DestWidth, ::sal_Int32 DestHeight ) = 0;
    virtual void SAL_CALL drawPixel( ::sal_Int32 X, ::sal_Int32 Y ) = 0;
    virtual void SAL_CALL drawLine( ::sal_Int32 X1, ::sal_Int32 Y1, ::sal_Int32 X2, ::sal_Int32 Y2 ) = 0;
    virtual void SAL_CALL drawRect( ::sal_Int32 X, ::sal_Int32 Y, ::sal_Int32 Width, ::sal_Int32 Height ) = 0;
    virtual void SAL_CALL drawRoundedRect( ::sal_Int32 X, ::sal_Int32 Y, ::sal_Int32 Width, ::sal_Int32 Height, ::sal_Int32 nHorzRound, ::sal_Int32 nVertRound ) = 0;
    virtual void SAL_CALL drawPolyLine( const ::css::uno::Sequence< ::sal_Int32 >& DataX, const ::css::uno::Sequence< ::sal_Int32 >& DataY ) = 0;
    virtual void SAL_CALL drawPolygon( const ::css::uno::Sequence< ::sal_Int32 >& DataX, const ::css::uno::Sequence< ::sal_Int32 >& DataY ) = 0;
    virtual void SAL_CALL drawPolyPolygon( const ::css::uno::Sequence< ::css::uno::Sequence< ::sal_Int32 > >& DataX, const ::css::uno::Sequence< ::css::uno::Sequence< ::sal_Int32 > >& DataY ) = 0;
    virtual void SAL_CALL drawEllipse( ::sal_Int32 X, ::sal_Int32 Y, ::sal_Int32 Width, ::sal_Int32 Height ) = 0;
    virtual void SAL_CALL drawArc( ::sal_Int32 X, ::sal_Int32 Y, ::sal_Int32 Width, ::sal_Int32 Height, ::sal_Int32 X1, ::sal_Int32 Y1, ::sal_Int32 X2, ::sal_Int32 Y2 ) = 0;
    virtual void SAL_CALL drawPie( ::sal_Int32 X, ::sal_Int32 Y, ::sal_Int32 Width, ::sal_Int32 Height, ::sal_Int32 X1, ::sal_Int32 Y1, ::sal_Int32 X2, ::sal_Int32 Y2 ) = 0;
    virtual void SAL_CALL drawChord( ::sal_Int32 nX, ::sal_Int32 nY, ::sal_Int32 nWidth, ::sal_Int32 nHeight, ::sal_Int32 nX1, ::sal_Int32 nY1, ::sal_Int32 nX2, ::sal_Int32 nY2 ) = 0;
    virtual void SAL_CALL drawGradient( ::sal_Int32 nX, ::sal_Int32 nY, ::sal_Int32 nWidth, ::sal_Int32 Height, const ::css::awt::Gradient& aGradient ) = 0;
    virtual void SAL_CALL drawText( ::sal_Int32 X, ::sal_Int32 Y, const ::rtl::OUString& Text ) = 0;
    virtual void SAL_CALL drawTextArray( ::sal_Int32 X, ::sal_Int32 Y, const ::rtl::OUString& Text, const ::css::uno::Sequence< ::sal_Int32 >& Longs ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XGraphics() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XGraphics const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XGraphics > *);

#endif
