#ifndef INCLUDED_COM_SUN_STAR_AWT_WINDOWDESCRIPTOR_HDL
#define INCLUDED_COM_SUN_STAR_AWT_WINDOWDESCRIPTOR_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Rectangle.hdl"
#include "com/sun/star/awt/WindowClass.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XWindowPeer; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

#ifdef _WIN32
#   pragma pack(push, 8)
#endif

struct SAL_DLLPUBLIC_RTTI WindowDescriptor {
    inline WindowDescriptor();

    inline WindowDescriptor(const ::css::awt::WindowClass& Type_, const ::rtl::OUString& WindowServiceName_, const ::css::uno::Reference< ::css::awt::XWindowPeer >& Parent_, const ::sal_Int16& ParentIndex_, const ::css::awt::Rectangle& Bounds_, const ::sal_Int32& WindowAttributes_);

    ::css::awt::WindowClass Type;
    ::rtl::OUString WindowServiceName;
    ::css::uno::Reference< ::css::awt::XWindowPeer > Parent;
    ::sal_Int16 ParentIndex;
    ::css::awt::Rectangle Bounds;
    ::sal_Int32 WindowAttributes;
};

#ifdef _WIN32
#   pragma pack(pop)
#endif


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::WindowDescriptor const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::awt::WindowDescriptor *);

#endif
