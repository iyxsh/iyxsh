#ifndef INCLUDED_COM_SUN_STAR_AWT_XIMAGECONSUMER_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XIMAGECONSUMER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace awt { class XImageProducer; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XImageConsumer : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XImageConsumer() = default;
    XImageConsumer(XImageConsumer const &) = default;
    XImageConsumer(XImageConsumer &&) = default;
    XImageConsumer & operator =(XImageConsumer const &) = default;
    XImageConsumer & operator =(XImageConsumer &&) = default;
#endif


    // Methods
    virtual void SAL_CALL init( ::sal_Int32 Width, ::sal_Int32 Height ) = 0;
    virtual void SAL_CALL setColorModel( ::sal_Int16 BitCount, const ::css::uno::Sequence< ::sal_Int32 >& RGBAPal, ::sal_Int32 RedMask, ::sal_Int32 GreenMask, ::sal_Int32 BlueMask, ::sal_Int32 AlphaMask ) = 0;
    virtual void SAL_CALL setPixelsByBytes( ::sal_Int32 nX, ::sal_Int32 nY, ::sal_Int32 nWidth, ::sal_Int32 nHeight, const ::css::uno::Sequence< ::sal_Int8 >& aProducerData, ::sal_Int32 nOffset, ::sal_Int32 nScanSize ) = 0;
    virtual void SAL_CALL setPixelsByLongs( ::sal_Int32 nX, ::sal_Int32 nY, ::sal_Int32 nWidth, ::sal_Int32 nHeight, const ::css::uno::Sequence< ::sal_Int32 >& aProducerData, ::sal_Int32 nOffset, ::sal_Int32 nScanSize ) = 0;
    virtual void SAL_CALL complete( ::sal_Int32 Status, const ::css::uno::Reference< ::css::awt::XImageProducer >& xProducer ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XImageConsumer() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XImageConsumer const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XImageConsumer > *);

#endif
