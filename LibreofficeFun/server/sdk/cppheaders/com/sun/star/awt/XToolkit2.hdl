#ifndef INCLUDED_COM_SUN_STAR_AWT_XTOOLKIT2_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTOOLKIT2_HDL

#include "sal/config.h"

#include "com/sun/star/awt/XDataTransferProviderAccess.hdl"
#include "com/sun/star/awt/XExtendedToolkit.hdl"
#include "com/sun/star/awt/XMessageBoxFactory.hdl"
#include "com/sun/star/awt/XReschedule.hdl"
#include "com/sun/star/awt/XSystemChildFactory.hdl"
#include "com/sun/star/awt/XToolkit.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XToolkit2 : public ::css::awt::XToolkit, public ::css::awt::XDataTransferProviderAccess, public ::css::awt::XSystemChildFactory, public ::css::awt::XMessageBoxFactory, public ::css::awt::XExtendedToolkit, public ::css::awt::XReschedule
{
public:
#if defined LIBO_INTERNAL_ONLY
    XToolkit2() = default;
    XToolkit2(XToolkit2 const &) = default;
    XToolkit2(XToolkit2 &&) = default;
    XToolkit2 & operator =(XToolkit2 const &) = default;
    XToolkit2 & operator =(XToolkit2 &&) = default;
#endif


    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XToolkit2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XToolkit2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XToolkit2 > *);

#endif
