#ifndef INCLUDED_COM_SUN_STAR_AWT_XTOOLKITEXPERIMENTAL_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XTOOLKITEXPERIMENTAL_HDL

#include "sal/config.h"

#include "com/sun/star/awt/XToolkit3.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XToolkitExperimental : public ::css::awt::XToolkit3
{
public:
#if defined LIBO_INTERNAL_ONLY
    XToolkitExperimental() = default;
    XToolkitExperimental(XToolkitExperimental const &) = default;
    XToolkitExperimental(XToolkitExperimental &&) = default;
    XToolkitExperimental & operator =(XToolkitExperimental const &) = default;
    XToolkitExperimental & operator =(XToolkitExperimental &&) = default;
#endif


    // Methods
    virtual void SAL_CALL processEventsToIdle() = 0;
    virtual ::sal_Int64 SAL_CALL getOpenGLBufferSwapCounter() = 0;
    virtual void SAL_CALL setDeterministicScheduling( ::sal_Bool bDeterministicMode ) = 0;
    virtual void SAL_CALL pause( ::sal_Int32 nMilliseconds ) = 0;
    virtual void SAL_CALL startRecording() = 0;
    virtual void SAL_CALL stopRecording() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getRecordingAndClear() = 0;
    virtual void SAL_CALL waitUntilAllIdlesDispatched() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XToolkitExperimental() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XToolkitExperimental const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XToolkitExperimental > *);

#endif
