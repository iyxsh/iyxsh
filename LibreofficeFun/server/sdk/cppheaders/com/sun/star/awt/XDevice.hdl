#ifndef INCLUDED_COM_SUN_STAR_AWT_XDEVICE_HDL
#define INCLUDED_COM_SUN_STAR_AWT_XDEVICE_HDL

#include "sal/config.h"

#include "com/sun/star/awt/DeviceInfo.hdl"
#include "com/sun/star/awt/FontDescriptor.hdl"
namespace com { namespace sun { namespace star { namespace awt { class XBitmap; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XDevice; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XDisplayBitmap; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XFont; } } } }
namespace com { namespace sun { namespace star { namespace awt { class XGraphics; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace awt {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDevice : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDevice() = default;
    XDevice(XDevice const &) = default;
    XDevice(XDevice &&) = default;
    XDevice & operator =(XDevice const &) = default;
    XDevice & operator =(XDevice &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::awt::XGraphics > SAL_CALL createGraphics() = 0;
    virtual ::css::uno::Reference< ::css::awt::XDevice > SAL_CALL createDevice( ::sal_Int32 nWidth, ::sal_Int32 nHeight ) = 0;
    virtual ::css::awt::DeviceInfo SAL_CALL getInfo() = 0;
    virtual ::css::uno::Sequence< ::css::awt::FontDescriptor > SAL_CALL getFontDescriptors() = 0;
    virtual ::css::uno::Reference< ::css::awt::XFont > SAL_CALL getFont( const ::css::awt::FontDescriptor& aDescriptor ) = 0;
    virtual ::css::uno::Reference< ::css::awt::XBitmap > SAL_CALL createBitmap( ::sal_Int32 nX, ::sal_Int32 nY, ::sal_Int32 nWidth, ::sal_Int32 nHeight ) = 0;
    virtual ::css::uno::Reference< ::css::awt::XDisplayBitmap > SAL_CALL createDisplayBitmap( const ::css::uno::Reference< ::css::awt::XBitmap >& Bitmap ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDevice() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::awt::XDevice const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::awt::XDevice > *);

#endif
