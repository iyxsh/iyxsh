#ifndef INCLUDED_COM_SUN_STAR_SDBC_XBLOB_HDL
#define INCLUDED_COM_SUN_STAR_SDBC_XBLOB_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
namespace com { namespace sun { namespace star { namespace sdbc { class XBlob; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sdbc {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XBlob : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XBlob() = default;
    XBlob(XBlob const &) = default;
    XBlob(XBlob &&) = default;
    XBlob & operator =(XBlob const &) = default;
    XBlob & operator =(XBlob &&) = default;
#endif


    // Methods
    virtual ::sal_Int64 SAL_CALL length() = 0;
    virtual ::css::uno::Sequence< ::sal_Int8 > SAL_CALL getBytes( ::sal_Int64 pos, ::sal_Int32 length ) = 0;
    virtual ::css::uno::Reference< ::css::io::XInputStream > SAL_CALL getBinaryStream() = 0;
    virtual ::sal_Int64 SAL_CALL position( const ::css::uno::Sequence< ::sal_Int8 >& pattern, ::sal_Int64 start ) = 0;
    virtual ::sal_Int64 SAL_CALL positionOfBlob( const ::css::uno::Reference< ::css::sdbc::XBlob >& pattern, ::sal_Int64 start ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XBlob() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sdbc::XBlob const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sdbc::XBlob > *);

#endif
