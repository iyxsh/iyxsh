#ifndef INCLUDED_COM_SUN_STAR_MAIL_XMAILSERVICE_HDL
#define INCLUDED_COM_SUN_STAR_MAIL_XMAILSERVICE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace mail { class XAuthenticator; } } } }
namespace com { namespace sun { namespace star { namespace mail { class XConnectionListener; } } } }
namespace com { namespace sun { namespace star { namespace uno { class XCurrentContext; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace mail {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMailService : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMailService() = default;
    XMailService(XMailService const &) = default;
    XMailService(XMailService &&) = default;
    XMailService & operator =(XMailService const &) = default;
    XMailService & operator =(XMailService &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedConnectionTypes() = 0;
    virtual void SAL_CALL addConnectionListener( const ::css::uno::Reference< ::css::mail::XConnectionListener >& xListener ) = 0;
    virtual void SAL_CALL removeConnectionListener( const ::css::uno::Reference< ::css::mail::XConnectionListener >& xListener ) = 0;
    virtual ::css::uno::Reference< ::css::uno::XCurrentContext > SAL_CALL getCurrentConnectionContext() = 0;
    virtual void SAL_CALL connect( const ::css::uno::Reference< ::css::uno::XCurrentContext >& xConnectionContext, const ::css::uno::Reference< ::css::mail::XAuthenticator >& xAuthenticator ) = 0;
    virtual void SAL_CALL disconnect() = 0;
    virtual ::sal_Bool SAL_CALL isConnected() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMailService() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::mail::XMailService const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::mail::XMailService > *);

#endif
