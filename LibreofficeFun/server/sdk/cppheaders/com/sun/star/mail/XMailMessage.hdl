#ifndef INCLUDED_COM_SUN_STAR_MAIL_XMAILMESSAGE_HDL
#define INCLUDED_COM_SUN_STAR_MAIL_XMAILMESSAGE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace datatransfer { class XTransferable; } } } }
#include "com/sun/star/mail/MailAttachment.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace mail {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMailMessage : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMailMessage() = default;
    XMailMessage(XMailMessage const &) = default;
    XMailMessage(XMailMessage &&) = default;
    XMailMessage & operator =(XMailMessage const &) = default;
    XMailMessage & operator =(XMailMessage &&) = default;
#endif


    // Attributes
    virtual ::rtl::OUString SAL_CALL getSenderName() = 0;
    virtual ::rtl::OUString SAL_CALL getSenderAddress() = 0;
    virtual ::rtl::OUString SAL_CALL getReplyToAddress() = 0;
    virtual void SAL_CALL setReplyToAddress( const ::rtl::OUString& _replytoaddress ) = 0;
    virtual ::rtl::OUString SAL_CALL getSubject() = 0;
    virtual void SAL_CALL setSubject( const ::rtl::OUString& _subject ) = 0;
    virtual ::css::uno::Reference< ::css::datatransfer::XTransferable > SAL_CALL getBody() = 0;
    virtual void SAL_CALL setBody( const ::css::uno::Reference< ::css::datatransfer::XTransferable >& _body ) = 0;

    // Methods
    virtual void SAL_CALL addRecipient( const ::rtl::OUString& sRecipientAddress ) = 0;
    virtual void SAL_CALL addCcRecipient( const ::rtl::OUString& sRecipientAddress ) = 0;
    virtual void SAL_CALL addBccRecipient( const ::rtl::OUString& sRecipientAddress ) = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getRecipients() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getCcRecipients() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getBccRecipients() = 0;
    virtual void SAL_CALL addAttachment( const ::css::mail::MailAttachment& aMailAttachment ) = 0;
    virtual ::css::uno::Sequence< ::css::mail::MailAttachment > SAL_CALL getAttachments() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMailMessage() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::mail::XMailMessage const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::mail::XMailMessage > *);

#endif
