#ifndef INCLUDED_COM_SUN_STAR_SECURITY_XACCESSCONTROLLER_HDL
#define INCLUDED_COM_SUN_STAR_SECURITY_XACCESSCONTROLLER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace security { class XAccessControlContext; } } } }
namespace com { namespace sun { namespace star { namespace security { class XAction; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace security {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAccessController : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAccessController() = default;
    XAccessController(XAccessController const &) = default;
    XAccessController(XAccessController &&) = default;
    XAccessController & operator =(XAccessController const &) = default;
    XAccessController & operator =(XAccessController &&) = default;
#endif


    // Methods
    virtual void SAL_CALL checkPermission( const ::css::uno::Any& perm ) = 0;
    virtual ::css::uno::Any SAL_CALL doRestricted( const ::css::uno::Reference< ::css::security::XAction >& action, const ::css::uno::Reference< ::css::security::XAccessControlContext >& restriction ) = 0;
    virtual ::css::uno::Any SAL_CALL doPrivileged( const ::css::uno::Reference< ::css::security::XAction >& action, const ::css::uno::Reference< ::css::security::XAccessControlContext >& restriction ) = 0;
    virtual ::css::uno::Reference< ::css::security::XAccessControlContext > SAL_CALL getContext() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAccessController() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::security::XAccessController const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::security::XAccessController > *);

#endif
