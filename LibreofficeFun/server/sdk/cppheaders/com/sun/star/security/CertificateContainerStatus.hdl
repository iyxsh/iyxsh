#ifndef INCLUDED_COM_SUN_STAR_SECURITY_CERTIFICATECONTAINERSTATUS_HDL
#define INCLUDED_COM_SUN_STAR_SECURITY_CERTIFICATECONTAINERSTATUS_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace security {

#if defined LIBO_INTERNAL_ONLY

#if defined __GNUC__

enum class CertificateContainerStatus
{

#else

enum class SAL_DLLPUBLIC_RTTI CertificateContainerStatus
{

#endif

#else

enum SAL_DLLPUBLIC_RTTI CertificateContainerStatus
{

#endif
    CertificateContainerStatus_NOCERT = 0,
    CertificateContainerStatus_TRUSTED = 1,
    CertificateContainerStatus_UNTRUSTED = 2,
    CertificateContainerStatus_MAKE_FIXED_SIZE = SAL_MAX_ENUM
};

#if defined LIBO_INTERNAL_ONLY
constexpr auto CertificateContainerStatus_NOCERT = CertificateContainerStatus::CertificateContainerStatus_NOCERT;
constexpr auto CertificateContainerStatus_TRUSTED = CertificateContainerStatus::CertificateContainerStatus_TRUSTED;
constexpr auto CertificateContainerStatus_UNTRUSTED = CertificateContainerStatus::CertificateContainerStatus_UNTRUSTED;
#endif

inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::security::CertificateContainerStatus const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::security::CertificateContainerStatus *);

#endif
