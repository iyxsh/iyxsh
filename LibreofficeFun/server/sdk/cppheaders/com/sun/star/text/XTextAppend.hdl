#ifndef INCLUDED_COM_SUN_STAR_TEXT_XTEXTAPPEND_HDL
#define INCLUDED_COM_SUN_STAR_TEXT_XTEXTAPPEND_HDL

#include "sal/config.h"

#include "com/sun/star/text/XParagraphAppend.hdl"
#include "com/sun/star/text/XText.hdl"
#include "com/sun/star/text/XTextPortionAppend.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace text {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTextAppend : public ::css::text::XText, public ::css::text::XParagraphAppend, public ::css::text::XTextPortionAppend
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTextAppend() = default;
    XTextAppend(XTextAppend const &) = default;
    XTextAppend(XTextAppend &&) = default;
    XTextAppend & operator =(XTextAppend const &) = default;
    XTextAppend & operator =(XTextAppend &&) = default;
#endif


    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTextAppend() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::text::XTextAppend const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::text::XTextAppend > *);

#endif
