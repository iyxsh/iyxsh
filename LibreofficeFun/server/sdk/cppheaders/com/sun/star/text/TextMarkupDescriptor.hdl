#ifndef INCLUDED_COM_SUN_STAR_TEXT_TEXTMARKUPDESCRIPTOR_HDL
#define INCLUDED_COM_SUN_STAR_TEXT_TEXTMARKUPDESCRIPTOR_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XStringKeyMap; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace text {

#ifdef _WIN32
#   pragma pack(push, 8)
#endif

struct SAL_DLLPUBLIC_RTTI TextMarkupDescriptor {
    inline TextMarkupDescriptor();

    inline TextMarkupDescriptor(const ::sal_Int32& nType_, const ::rtl::OUString& aIdentifier_, const ::sal_Int32& nOffset_, const ::sal_Int32& nLength_, const ::css::uno::Reference< ::css::container::XStringKeyMap >& xMarkupInfoContainer_);

    ::sal_Int32 nType;
    ::rtl::OUString aIdentifier;
    ::sal_Int32 nOffset;
    ::sal_Int32 nLength;
    ::css::uno::Reference< ::css::container::XStringKeyMap > xMarkupInfoContainer;
};

#ifdef _WIN32
#   pragma pack(pop)
#endif


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::text::TextMarkupDescriptor const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::text::TextMarkupDescriptor *);

#endif
