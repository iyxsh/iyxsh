#ifndef INCLUDED_COM_SUN_STAR_TEXT_XTEXT_HDL
#define INCLUDED_COM_SUN_STAR_TEXT_XTEXT_HDL

#include "sal/config.h"

#include "com/sun/star/text/XSimpleText.hdl"
namespace com { namespace sun { namespace star { namespace text { class XTextContent; } } } }
namespace com { namespace sun { namespace star { namespace text { class XTextRange; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace text {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XText : public ::css::text::XSimpleText
{
public:
#if defined LIBO_INTERNAL_ONLY
    XText() = default;
    XText(XText const &) = default;
    XText(XText &&) = default;
    XText & operator =(XText const &) = default;
    XText & operator =(XText &&) = default;
#endif


    // Methods
    virtual void SAL_CALL insertTextContent( const ::css::uno::Reference< ::css::text::XTextRange >& xRange, const ::css::uno::Reference< ::css::text::XTextContent >& xContent, ::sal_Bool bAbsorb ) = 0;
    virtual void SAL_CALL removeTextContent( const ::css::uno::Reference< ::css::text::XTextContent >& xContent ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XText() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::text::XText const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::text::XText > *);

#endif
