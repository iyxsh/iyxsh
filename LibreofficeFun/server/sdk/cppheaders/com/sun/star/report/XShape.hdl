#ifndef INCLUDED_COM_SUN_STAR_REPORT_XSHAPE_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_XSHAPE_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/drawing/HomogenMatrix3.hdl"
#include "com/sun/star/report/XReportControlModel.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace report {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XShape : public ::css::report::XReportControlModel
{
public:
#if defined LIBO_INTERNAL_ONLY
    XShape() = default;
    XShape(XShape const &) = default;
    XShape(XShape &&) = default;
    XShape & operator =(XShape const &) = default;
    XShape & operator =(XShape &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getZOrder() = 0;
    virtual void SAL_CALL setZOrder( ::sal_Int32 _zorder ) = 0;
    virtual ::css::drawing::HomogenMatrix3 SAL_CALL getTransformation() = 0;
    virtual void SAL_CALL setTransformation( const ::css::drawing::HomogenMatrix3& _transformation ) = 0;
    virtual ::rtl::OUString SAL_CALL getCustomShapeEngine() = 0;
    virtual void SAL_CALL setCustomShapeEngine( const ::rtl::OUString& _customshapeengine ) = 0;
    virtual ::rtl::OUString SAL_CALL getCustomShapeData() = 0;
    virtual void SAL_CALL setCustomShapeData( const ::rtl::OUString& _customshapedata ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getCustomShapeGeometry() = 0;
    virtual void SAL_CALL setCustomShapeGeometry( const ::css::uno::Sequence< ::css::beans::PropertyValue >& _customshapegeometry ) = 0;
    virtual ::sal_Bool SAL_CALL getOpaque() = 0;
    virtual void SAL_CALL setOpaque( ::sal_Bool _opaque ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XShape() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::report::XShape const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::report::XShape > *);

#endif
