#ifndef INCLUDED_COM_SUN_STAR_REPORT_META_XFORMULAPARSER_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_META_XFORMULAPARSER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/XPropertySet.hdl"
#include "com/sun/star/lang/XComponent.hdl"
#include "com/sun/star/sheet/FormulaOpCodeMapEntry.hdl"
namespace com { namespace sun { namespace star { namespace sheet { class XFormulaOpCodeMapper; } } } }
#include "com/sun/star/sheet/XFormulaParser.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace report { namespace meta {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFormulaParser : public ::css::lang::XComponent, public ::css::sheet::XFormulaParser, public ::css::beans::XPropertySet
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFormulaParser() = default;
    XFormulaParser(XFormulaParser const &) = default;
    XFormulaParser(XFormulaParser &&) = default;
    XFormulaParser & operator =(XFormulaParser const &) = default;
    XFormulaParser & operator =(XFormulaParser &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Sequence< ::css::sheet::FormulaOpCodeMapEntry > SAL_CALL getOpCodeMap() = 0;
    virtual void SAL_CALL setOpCodeMap( const ::css::uno::Sequence< ::css::sheet::FormulaOpCodeMapEntry >& _opcodemap ) = 0;
    virtual ::css::uno::Reference< ::css::sheet::XFormulaOpCodeMapper > SAL_CALL getFormulaOpCodeMapper() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFormulaParser() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::report::meta::XFormulaParser const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::report::meta::XFormulaParser > *);

#endif
