#ifndef INCLUDED_COM_SUN_STAR_REPORT_XFIXEDLINE_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_XFIXEDLINE_HDL

#include "sal/config.h"

#include "com/sun/star/drawing/LineDash.hdl"
#include "com/sun/star/drawing/LineStyle.hdl"
#include "com/sun/star/report/XReportControlModel.hdl"
#include "com/sun/star/util/Color.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace report {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFixedLine : public ::css::report::XReportControlModel
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFixedLine() = default;
    XFixedLine(XFixedLine const &) = default;
    XFixedLine(XFixedLine &&) = default;
    XFixedLine & operator =(XFixedLine const &) = default;
    XFixedLine & operator =(XFixedLine &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getOrientation() = 0;
    virtual void SAL_CALL setOrientation( ::sal_Int32 _orientation ) = 0;
    virtual ::css::drawing::LineStyle SAL_CALL getLineStyle() = 0;
    virtual void SAL_CALL setLineStyle( ::css::drawing::LineStyle _linestyle ) = 0;
    virtual ::css::drawing::LineDash SAL_CALL getLineDash() = 0;
    virtual void SAL_CALL setLineDash( const ::css::drawing::LineDash& _linedash ) = 0;
    virtual ::sal_Int32 SAL_CALL getLineColor() = 0;
    virtual void SAL_CALL setLineColor( ::sal_Int32 _linecolor ) = 0;
    virtual ::sal_Int16 SAL_CALL getLineTransparence() = 0;
    virtual void SAL_CALL setLineTransparence( ::sal_Int16 _linetransparence ) = 0;
    virtual ::sal_Int32 SAL_CALL getLineWidth() = 0;
    virtual void SAL_CALL setLineWidth( ::sal_Int32 _linewidth ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFixedLine() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::report::XFixedLine const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::report::XFixedLine > *);

#endif
