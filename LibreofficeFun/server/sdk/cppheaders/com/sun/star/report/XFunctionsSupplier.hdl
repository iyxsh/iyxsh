#ifndef INCLUDED_COM_SUN_STAR_REPORT_XFUNCTIONSSUPPLIER_HDL
#define INCLUDED_COM_SUN_STAR_REPORT_XFUNCTIONSSUPPLIER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace report { class XFunctions; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace report {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFunctionsSupplier : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFunctionsSupplier() = default;
    XFunctionsSupplier(XFunctionsSupplier const &) = default;
    XFunctionsSupplier(XFunctionsSupplier &&) = default;
    XFunctionsSupplier & operator =(XFunctionsSupplier const &) = default;
    XFunctionsSupplier & operator =(XFunctionsSupplier &&) = default;
#endif


    // Attributes
    virtual ::css::uno::Reference< ::css::report::XFunctions > SAL_CALL getFunctions() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFunctionsSupplier() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::report::XFunctionsSupplier const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::report::XFunctionsSupplier > *);

#endif
