#ifndef INCLUDED_COM_SUN_STAR_CHART_XDIAGRAM_HDL
#define INCLUDED_COM_SUN_STAR_CHART_XDIAGRAM_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
#include "com/sun/star/drawing/XShape.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDiagram : public ::css::drawing::XShape
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDiagram() = default;
    XDiagram(XDiagram const &) = default;
    XDiagram(XDiagram &&) = default;
    XDiagram & operator =(XDiagram const &) = default;
    XDiagram & operator =(XDiagram &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getDiagramType() = 0;
    virtual ::css::uno::Reference< ::css::beans::XPropertySet > SAL_CALL getDataRowProperties( ::sal_Int32 nRow ) = 0;
    virtual ::css::uno::Reference< ::css::beans::XPropertySet > SAL_CALL getDataPointProperties( ::sal_Int32 nCol, ::sal_Int32 nRow ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDiagram() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart::XDiagram const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart::XDiagram > *);

#endif
