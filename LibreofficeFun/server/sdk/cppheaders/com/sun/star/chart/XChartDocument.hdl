#ifndef INCLUDED_COM_SUN_STAR_CHART_XCHARTDOCUMENT_HDL
#define INCLUDED_COM_SUN_STAR_CHART_XCHARTDOCUMENT_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace beans { class XPropertySet; } } } }
namespace com { namespace sun { namespace star { namespace chart { class XChartData; } } } }
namespace com { namespace sun { namespace star { namespace chart { class XDiagram; } } } }
namespace com { namespace sun { namespace star { namespace drawing { class XShape; } } } }
#include "com/sun/star/frame/XModel.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XChartDocument : public ::css::frame::XModel
{
public:
#if defined LIBO_INTERNAL_ONLY
    XChartDocument() = default;
    XChartDocument(XChartDocument const &) = default;
    XChartDocument(XChartDocument &&) = default;
    XChartDocument & operator =(XChartDocument const &) = default;
    XChartDocument & operator =(XChartDocument &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::drawing::XShape > SAL_CALL getTitle() = 0;
    virtual ::css::uno::Reference< ::css::drawing::XShape > SAL_CALL getSubTitle() = 0;
    virtual ::css::uno::Reference< ::css::drawing::XShape > SAL_CALL getLegend() = 0;
    virtual ::css::uno::Reference< ::css::beans::XPropertySet > SAL_CALL getArea() = 0;
    virtual ::css::uno::Reference< ::css::chart::XDiagram > SAL_CALL getDiagram() = 0;
    virtual void SAL_CALL setDiagram( const ::css::uno::Reference< ::css::chart::XDiagram >& xDiagram ) = 0;
    virtual ::css::uno::Reference< ::css::chart::XChartData > SAL_CALL getData() = 0;
    virtual void SAL_CALL attachData( const ::css::uno::Reference< ::css::chart::XChartData >& xData ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XChartDocument() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart::XChartDocument const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart::XChartDocument > *);

#endif
