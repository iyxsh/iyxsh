#ifndef INCLUDED_COM_SUN_STAR_MOZILLA_XMENUPROXY_HDL
#define INCLUDED_COM_SUN_STAR_MOZILLA_XMENUPROXY_HDL

#include "sal/config.h"

#include "com/sun/star/lang/XComponent.hdl"
namespace com { namespace sun { namespace star { namespace mozilla { class XMenuProxyListener; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace mozilla {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XMenuProxy : public ::css::lang::XComponent
{
public:
#if defined LIBO_INTERNAL_ONLY
    XMenuProxy() = default;
    XMenuProxy(XMenuProxy const &) = default;
    XMenuProxy(XMenuProxy &&) = default;
    XMenuProxy & operator =(XMenuProxy const &) = default;
    XMenuProxy & operator =(XMenuProxy &&) = default;
#endif


    // Methods
    virtual void SAL_CALL executeMenuItem( ::sal_Int16 ID ) = 0;
    virtual void SAL_CALL addMenuProxyListener( const ::css::uno::Reference< ::css::mozilla::XMenuProxyListener >& xListener ) = 0;
    virtual void SAL_CALL removeMenuProxyListener( const ::css::uno::Reference< ::css::mozilla::XMenuProxyListener >& xListener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XMenuProxy() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::mozilla::XMenuProxy const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::mozilla::XMenuProxy > *);

#endif
