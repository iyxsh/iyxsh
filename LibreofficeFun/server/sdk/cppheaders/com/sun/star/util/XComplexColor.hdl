#ifndef INCLUDED_COM_SUN_STAR_UTIL_XCOMPLEXCOLOR_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XCOMPLEXCOLOR_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/Color.hdl"
namespace com { namespace sun { namespace star { namespace util { class XTheme; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XComplexColor : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XComplexColor() = default;
    XComplexColor(XComplexColor const &) = default;
    XComplexColor(XComplexColor &&) = default;
    XComplexColor & operator =(XComplexColor const &) = default;
    XComplexColor & operator =(XComplexColor &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getType() = 0;
    virtual ::sal_Int32 SAL_CALL getThemeColorType() = 0;
    virtual ::sal_Int32 SAL_CALL resolveColor( const ::css::uno::Reference< ::css::util::XTheme >& xTheme ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XComplexColor() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XComplexColor const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XComplexColor > *);

#endif
