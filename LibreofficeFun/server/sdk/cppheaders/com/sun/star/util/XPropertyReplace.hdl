#ifndef INCLUDED_COM_SUN_STAR_UTIL_XPROPERTYREPLACE_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XPROPERTYREPLACE_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/util/XReplaceDescriptor.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPropertyReplace : public ::css::util::XReplaceDescriptor
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPropertyReplace() = default;
    XPropertyReplace(XPropertyReplace const &) = default;
    XPropertyReplace(XPropertyReplace &&) = default;
    XPropertyReplace & operator =(XPropertyReplace const &) = default;
    XPropertyReplace & operator =(XPropertyReplace &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL getValueSearch() = 0;
    virtual void SAL_CALL setValueSearch( ::sal_Bool bValueSearch ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getSearchAttributes() = 0;
    virtual void SAL_CALL setSearchAttributes( const ::css::uno::Sequence< ::css::beans::PropertyValue >& aSearchAttribs ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getReplaceAttributes() = 0;
    virtual void SAL_CALL setReplaceAttributes( const ::css::uno::Sequence< ::css::beans::PropertyValue >& aSearchAttribs ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPropertyReplace() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XPropertyReplace const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XPropertyReplace > *);

#endif
