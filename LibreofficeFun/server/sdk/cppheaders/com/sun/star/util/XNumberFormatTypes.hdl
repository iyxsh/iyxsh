#ifndef INCLUDED_COM_SUN_STAR_UTIL_XNUMBERFORMATTYPES_HDL
#define INCLUDED_COM_SUN_STAR_UTIL_XNUMBERFORMATTYPES_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace util {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XNumberFormatTypes : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XNumberFormatTypes() = default;
    XNumberFormatTypes(XNumberFormatTypes const &) = default;
    XNumberFormatTypes(XNumberFormatTypes &&) = default;
    XNumberFormatTypes & operator =(XNumberFormatTypes const &) = default;
    XNumberFormatTypes & operator =(XNumberFormatTypes &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getStandardIndex( const ::css::lang::Locale& nLocale ) = 0;
    virtual ::sal_Int32 SAL_CALL getStandardFormat( ::sal_Int16 nType, const ::css::lang::Locale& nLocale ) = 0;
    virtual ::sal_Int32 SAL_CALL getFormatIndex( ::sal_Int16 nIndex, const ::css::lang::Locale& nLocale ) = 0;
    virtual ::sal_Bool SAL_CALL isTypeCompatible( ::sal_Int16 nOldType, ::sal_Int16 nNewType ) = 0;
    virtual ::sal_Int32 SAL_CALL getFormatForLocale( ::sal_Int32 nKey, const ::css::lang::Locale& nLocale ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XNumberFormatTypes() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::util::XNumberFormatTypes const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::util::XNumberFormatTypes > *);

#endif
