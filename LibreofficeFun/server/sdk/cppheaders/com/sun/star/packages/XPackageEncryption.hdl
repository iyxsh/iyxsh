#ifndef INCLUDED_COM_SUN_STAR_PACKAGES_XPACKAGEENCRYPTION_HDL
#define INCLUDED_COM_SUN_STAR_PACKAGES_XPACKAGEENCRYPTION_HDL

#include "sal/config.h"

#include "com/sun/star/beans/NamedValue.hdl"
namespace com { namespace sun { namespace star { namespace io { class XInputStream; } } } }
namespace com { namespace sun { namespace star { namespace io { class XOutputStream; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace packages {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPackageEncryption : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPackageEncryption() = default;
    XPackageEncryption(XPackageEncryption const &) = default;
    XPackageEncryption(XPackageEncryption &&) = default;
    XPackageEncryption & operator =(XPackageEncryption const &) = default;
    XPackageEncryption & operator =(XPackageEncryption &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL readEncryptionInfo( const ::css::uno::Sequence< ::css::beans::NamedValue >& rStreams ) = 0;
    virtual ::sal_Bool SAL_CALL generateEncryptionKey( const ::rtl::OUString& rPassword ) = 0;
    virtual ::sal_Bool SAL_CALL decrypt( const ::css::uno::Reference< ::css::io::XInputStream >& rxInputStream, ::css::uno::Reference< ::css::io::XOutputStream >& rxOutputStream ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::NamedValue > SAL_CALL createEncryptionData( const ::rtl::OUString& rPassword ) = 0;
    virtual ::sal_Bool SAL_CALL setupEncryption( const ::css::uno::Sequence< ::css::beans::NamedValue >& rMediaEncData ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::NamedValue > SAL_CALL encrypt( const ::css::uno::Reference< ::css::io::XInputStream >& rxInputStream ) = 0;
    virtual ::sal_Bool SAL_CALL checkDataIntegrity() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPackageEncryption() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::packages::XPackageEncryption const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::packages::XPackageEncryption > *);

#endif
