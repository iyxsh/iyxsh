#ifndef INCLUDED_COM_SUN_STAR_PACKAGES_ZIP_ZIPENTRY_HDL
#define INCLUDED_COM_SUN_STAR_PACKAGES_ZIP_ZIPENTRY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace packages { namespace zip {

#ifdef _WIN32
#   pragma pack(push, 8)
#endif

struct SAL_DLLPUBLIC_RTTI SAL_WARN_UNUSED ZipEntry {
    inline ZipEntry();

    inline ZipEntry(const ::sal_Int16& nVersion_, const ::sal_Int16& nFlag_, const ::sal_Int16& nMethod_, const ::sal_Int32& nTime_, const ::sal_Int32& nCrc_, const ::sal_Int32& nCompressedSize_, const ::sal_Int32& nSize_, const ::sal_Int32& nOffset_, const ::sal_Int16& nDiskNumber_, const ::rtl::OUString& sName_, const ::css::uno::Sequence< ::sal_Int8 >& extra_, const ::rtl::OUString& sComment_);

    ::sal_Int16 nVersion;
    ::sal_Int16 nFlag;
    ::sal_Int16 nMethod;
    ::sal_Int32 nTime;
    ::sal_Int32 nCrc;
    ::sal_Int32 nCompressedSize;
    ::sal_Int32 nSize;
    ::sal_Int32 nOffset;
    ::sal_Int16 nDiskNumber;
    ::rtl::OUString sName;
    ::css::uno::Sequence< ::sal_Int8 > extra;
    ::rtl::OUString sComment;
};

#ifdef _WIN32
#   pragma pack(pop)
#endif


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::packages::zip::ZipEntry const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::packages::zip::ZipEntry *);

#endif
