#ifndef INCLUDED_COM_SUN_STAR_IO_XTEXTINPUTSTREAM_HDL
#define INCLUDED_COM_SUN_STAR_IO_XTEXTINPUTSTREAM_HDL

#include "sal/config.h"

#include "com/sun/star/io/XInputStream.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace io {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTextInputStream : public ::css::io::XInputStream
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTextInputStream() = default;
    XTextInputStream(XTextInputStream const &) = default;
    XTextInputStream(XTextInputStream &&) = default;
    XTextInputStream & operator =(XTextInputStream const &) = default;
    XTextInputStream & operator =(XTextInputStream &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL readLine() = 0;
    virtual ::rtl::OUString SAL_CALL readString( const ::css::uno::Sequence< ::sal_Unicode >& Delimiters, ::sal_Bool bRemoveDelimiter ) = 0;
    virtual ::sal_Bool SAL_CALL isEOF() = 0;
    virtual void SAL_CALL setEncoding( const ::rtl::OUString& Encoding ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTextInputStream() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::io::XTextInputStream const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::io::XTextInputStream > *);

#endif
