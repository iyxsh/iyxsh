#ifndef INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERHANDLER_HDL
#define INCLUDED_COM_SUN_STAR_CONFIGURATION_BACKEND_XLAYERHANDLER_HDL

#include "sal/config.h"

#include "com/sun/star/configuration/backend/TemplateIdentifier.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Type.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace configuration { namespace backend {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLayerHandler : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XLayerHandler() = default;
    XLayerHandler(XLayerHandler const &) = default;
    XLayerHandler(XLayerHandler &&) = default;
    XLayerHandler & operator =(XLayerHandler const &) = default;
    XLayerHandler & operator =(XLayerHandler &&) = default;
#endif


    // Methods
    virtual void SAL_CALL startLayer() = 0;
    virtual void SAL_CALL endLayer() = 0;
    virtual void SAL_CALL overrideNode( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, ::sal_Bool bClear ) = 0;
    virtual void SAL_CALL addOrReplaceNode( const ::rtl::OUString& aName, ::sal_Int16 aAttributes ) = 0;
    virtual void SAL_CALL addOrReplaceNodeFromTemplate( const ::rtl::OUString& aName, const ::css::configuration::backend::TemplateIdentifier& aTemplate, ::sal_Int16 aAttributes ) = 0;
    virtual void SAL_CALL endNode() = 0;
    virtual void SAL_CALL dropNode( const ::rtl::OUString& aName ) = 0;
    virtual void SAL_CALL overrideProperty( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, const ::css::uno::Type& aType, ::sal_Bool bClear ) = 0;
    virtual void SAL_CALL setPropertyValue( const ::css::uno::Any& aValue ) = 0;
    virtual void SAL_CALL setPropertyValueForLocale( const ::css::uno::Any& aValue, const ::rtl::OUString& aLocale ) = 0;
    virtual void SAL_CALL endProperty() = 0;
    virtual void SAL_CALL addProperty( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, const ::css::uno::Type& aType ) = 0;
    virtual void SAL_CALL addPropertyWithValue( const ::rtl::OUString& aName, ::sal_Int16 aAttributes, const ::css::uno::Any& aValue ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLayerHandler() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::configuration::backend::XLayerHandler const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::configuration::backend::XLayerHandler > *);

#endif
