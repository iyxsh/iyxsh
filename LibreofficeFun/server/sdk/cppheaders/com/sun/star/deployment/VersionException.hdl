#ifndef INCLUDED_COM_SUN_STAR_DEPLOYMENT_VERSIONEXCEPTION_HDL
#define INCLUDED_COM_SUN_STAR_DEPLOYMENT_VERSIONEXCEPTION_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace deployment { class XPackage; } } } }
#include "com/sun/star/uno/Exception.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace deployment {

class CPPU_GCC_DLLPUBLIC_EXPORT SAL_WARN_UNUSED VersionException : public ::css::uno::Exception
{
public:
    inline CPPU_GCC_DLLPRIVATE VersionException(
#if defined LIBO_USE_SOURCE_LOCATION
    LIBO_USE_SOURCE_LOCATION::source_location location = LIBO_USE_SOURCE_LOCATION::source_location::current()
#endif

    );
    inline CPPU_GCC_DLLPRIVATE VersionException(const ::rtl::OUString& Message_, const ::css::uno::Reference< ::css::uno::XInterface >& Context_, const ::rtl::OUString& NewVersion_, const ::rtl::OUString& NewDisplayName_, const ::css::uno::Reference< ::css::deployment::XPackage >& Deployed_
#if defined LIBO_USE_SOURCE_LOCATION
, LIBO_USE_SOURCE_LOCATION::source_location location = LIBO_USE_SOURCE_LOCATION::source_location::current()
#endif
    );

#if !defined LIBO_INTERNAL_ONLY
    inline CPPU_GCC_DLLPRIVATE VersionException(VersionException const &);

    inline CPPU_GCC_DLLPRIVATE ~VersionException();

    inline CPPU_GCC_DLLPRIVATE VersionException & operator =(VersionException const &);
#endif

    ::rtl::OUString NewVersion CPPU_GCC3_ALIGN( ::css::uno::Exception );
    ::rtl::OUString NewDisplayName;
    ::css::uno::Reference< ::css::deployment::XPackage > Deployed;
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::deployment::VersionException const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::deployment::VersionException *);

#endif
