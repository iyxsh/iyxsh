#ifndef INCLUDED_COM_SUN_STAR_DEPLOYMENT_XPACKAGEREGISTRY_HDL
#define INCLUDED_COM_SUN_STAR_DEPLOYMENT_XPACKAGEREGISTRY_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace deployment { class XPackage; } } } }
namespace com { namespace sun { namespace star { namespace deployment { class XPackageTypeInfo; } } } }
namespace com { namespace sun { namespace star { namespace ucb { class XCommandEnvironment; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace deployment {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPackageRegistry : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPackageRegistry() = default;
    XPackageRegistry(XPackageRegistry const &) = default;
    XPackageRegistry(XPackageRegistry &&) = default;
    XPackageRegistry & operator =(XPackageRegistry const &) = default;
    XPackageRegistry & operator =(XPackageRegistry &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::deployment::XPackage > SAL_CALL bindPackage( const ::rtl::OUString& url, const ::rtl::OUString& mediaType, ::sal_Bool removed, const ::rtl::OUString& identifier, const ::css::uno::Reference< ::css::ucb::XCommandEnvironment >& xCmdEnv ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Reference< ::css::deployment::XPackageTypeInfo > > SAL_CALL getSupportedPackageTypes() = 0;
    virtual void SAL_CALL packageRemoved( const ::rtl::OUString& url, const ::rtl::OUString& mediaType ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPackageRegistry() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::deployment::XPackageRegistry const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::deployment::XPackageRegistry > *);

#endif
