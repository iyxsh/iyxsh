#ifndef INCLUDED_COM_SUN_STAR_SHEET_XDATABASERANGE_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XDATABASERANGE_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace sheet { class XSheetFilterDescriptor; } } } }
namespace com { namespace sun { namespace star { namespace sheet { class XSubTotalDescriptor; } } } }
#include "com/sun/star/table/CellRangeAddress.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDatabaseRange : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDatabaseRange() = default;
    XDatabaseRange(XDatabaseRange const &) = default;
    XDatabaseRange(XDatabaseRange &&) = default;
    XDatabaseRange & operator =(XDatabaseRange const &) = default;
    XDatabaseRange & operator =(XDatabaseRange &&) = default;
#endif


    // Methods
    virtual ::css::table::CellRangeAddress SAL_CALL getDataArea() = 0;
    virtual void SAL_CALL setDataArea( const ::css::table::CellRangeAddress& aDataArea ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getSortDescriptor() = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetFilterDescriptor > SAL_CALL getFilterDescriptor() = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSubTotalDescriptor > SAL_CALL getSubTotalDescriptor() = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL getImportDescriptor() = 0;
    virtual void SAL_CALL refresh() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDatabaseRange() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XDatabaseRange const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XDatabaseRange > *);

#endif
