#ifndef INCLUDED_COM_SUN_STAR_SHEET_XSHEETCONDITIONALENTRIES_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XSHEETCONDITIONALENTRIES_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
#include "com/sun/star/container/XIndexAccess.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSheetConditionalEntries : public ::css::container::XIndexAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSheetConditionalEntries() = default;
    XSheetConditionalEntries(XSheetConditionalEntries const &) = default;
    XSheetConditionalEntries(XSheetConditionalEntries &&) = default;
    XSheetConditionalEntries & operator =(XSheetConditionalEntries const &) = default;
    XSheetConditionalEntries & operator =(XSheetConditionalEntries &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addNew( const ::css::uno::Sequence< ::css::beans::PropertyValue >& aConditionalEntry ) = 0;
    virtual void SAL_CALL removeByIndex( ::sal_Int32 nIndex ) = 0;
    virtual void SAL_CALL clear() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSheetConditionalEntries() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XSheetConditionalEntries const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XSheetConditionalEntries > *);

#endif
