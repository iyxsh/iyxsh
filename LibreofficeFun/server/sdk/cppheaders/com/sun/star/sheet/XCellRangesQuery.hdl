#ifndef INCLUDED_COM_SUN_STAR_SHEET_XCELLRANGESQUERY_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XCELLRANGESQUERY_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace sheet { class XSheetCellRanges; } } } }
#include "com/sun/star/table/CellAddress.hdl"
#include "com/sun/star/table/CellRangeAddress.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCellRangesQuery : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCellRangesQuery() = default;
    XCellRangesQuery(XCellRangesQuery const &) = default;
    XCellRangesQuery(XCellRangesQuery &&) = default;
    XCellRangesQuery & operator =(XCellRangesQuery const &) = default;
    XCellRangesQuery & operator =(XCellRangesQuery &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryVisibleCells() = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryEmptyCells() = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryContentCells( ::sal_Int16 nContentFlags ) = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryFormulaCells( ::sal_Int32 nResultFlags ) = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryColumnDifferences( const ::css::table::CellAddress& aCompare ) = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryRowDifferences( const ::css::table::CellAddress& aCompare ) = 0;
    virtual ::css::uno::Reference< ::css::sheet::XSheetCellRanges > SAL_CALL queryIntersection( const ::css::table::CellRangeAddress& aRange ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCellRangesQuery() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XCellRangesQuery const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XCellRangesQuery > *);

#endif
