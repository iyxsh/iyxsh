#ifndef INCLUDED_COM_SUN_STAR_SHEET_XSHEETFILTERDESCRIPTOR_HDL
#define INCLUDED_COM_SUN_STAR_SHEET_XSHEETFILTERDESCRIPTOR_HDL

#include "sal/config.h"

#include "com/sun/star/sheet/TableFilterField.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace sheet {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSheetFilterDescriptor : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSheetFilterDescriptor() = default;
    XSheetFilterDescriptor(XSheetFilterDescriptor const &) = default;
    XSheetFilterDescriptor(XSheetFilterDescriptor &&) = default;
    XSheetFilterDescriptor & operator =(XSheetFilterDescriptor const &) = default;
    XSheetFilterDescriptor & operator =(XSheetFilterDescriptor &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::sheet::TableFilterField > SAL_CALL getFilterFields() = 0;
    virtual void SAL_CALL setFilterFields( const ::css::uno::Sequence< ::css::sheet::TableFilterField >& aFilterFields ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSheetFilterDescriptor() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::sheet::XSheetFilterDescriptor const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::sheet::XSheetFilterDescriptor > *);

#endif
