#ifndef INCLUDED_COM_SUN_STAR_RESOURCE_XSTRINGRESOURCEMANAGER_HDL
#define INCLUDED_COM_SUN_STAR_RESOURCE_XSTRINGRESOURCEMANAGER_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/resource/XStringResourceResolver.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace resource {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XStringResourceManager : public ::css::resource::XStringResourceResolver
{
public:
#if defined LIBO_INTERNAL_ONLY
    XStringResourceManager() = default;
    XStringResourceManager(XStringResourceManager const &) = default;
    XStringResourceManager(XStringResourceManager &&) = default;
    XStringResourceManager & operator =(XStringResourceManager const &) = default;
    XStringResourceManager & operator =(XStringResourceManager &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL isReadOnly() = 0;
    virtual void SAL_CALL setCurrentLocale( const ::css::lang::Locale& Locale, ::sal_Bool FindClosestMatch ) = 0;
    virtual void SAL_CALL setDefaultLocale( const ::css::lang::Locale& Locale ) = 0;
    virtual void SAL_CALL setString( const ::rtl::OUString& ResourceID, const ::rtl::OUString& Str ) = 0;
    virtual void SAL_CALL setStringForLocale( const ::rtl::OUString& ResourceID, const ::rtl::OUString& Str, const ::css::lang::Locale& locale ) = 0;
    virtual void SAL_CALL removeId( const ::rtl::OUString& ResourceID ) = 0;
    virtual void SAL_CALL removeIdForLocale( const ::rtl::OUString& ResourceID, const ::css::lang::Locale& locale ) = 0;
    virtual void SAL_CALL newLocale( const ::css::lang::Locale& locale ) = 0;
    virtual void SAL_CALL removeLocale( const ::css::lang::Locale& locale ) = 0;
    virtual ::sal_Int32 SAL_CALL getUniqueNumericId() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XStringResourceManager() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::resource::XStringResourceManager const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::resource::XStringResourceManager > *);

#endif
