#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_XSHAPEEVENTBROADCASTER_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_XSHAPEEVENTBROADCASTER_HDL

#include "sal/config.h"

#include "com/sun/star/document/XEventBroadcaster.hdl"
namespace com { namespace sun { namespace star { namespace document { class XShapeEventListener; } } } }
namespace com { namespace sun { namespace star { namespace drawing { class XShape; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace document {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XShapeEventBroadcaster : public ::css::document::XEventBroadcaster
{
public:
#if defined LIBO_INTERNAL_ONLY
    XShapeEventBroadcaster() = default;
    XShapeEventBroadcaster(XShapeEventBroadcaster const &) = default;
    XShapeEventBroadcaster(XShapeEventBroadcaster &&) = default;
    XShapeEventBroadcaster & operator =(XShapeEventBroadcaster const &) = default;
    XShapeEventBroadcaster & operator =(XShapeEventBroadcaster &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addShapeEventListener( const ::css::uno::Reference< ::css::drawing::XShape >& Shape, const ::css::uno::Reference< ::css::document::XShapeEventListener >& Listener ) = 0;
    virtual void SAL_CALL removeShapeEventListener( const ::css::uno::Reference< ::css::drawing::XShape >& Shape, const ::css::uno::Reference< ::css::document::XShapeEventListener >& Listener ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XShapeEventBroadcaster() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::document::XShapeEventBroadcaster const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::document::XShapeEventBroadcaster > *);

#endif
