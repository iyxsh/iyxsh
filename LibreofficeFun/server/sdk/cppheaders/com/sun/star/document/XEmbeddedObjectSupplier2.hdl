#ifndef INCLUDED_COM_SUN_STAR_DOCUMENT_XEMBEDDEDOBJECTSUPPLIER2_HDL
#define INCLUDED_COM_SUN_STAR_DOCUMENT_XEMBEDDEDOBJECTSUPPLIER2_HDL

#include "sal/config.h"

#include "com/sun/star/document/XEmbeddedObjectSupplier.hdl"
namespace com { namespace sun { namespace star { namespace embed { class XEmbeddedObject; } } } }
namespace com { namespace sun { namespace star { namespace graphic { class XGraphic; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace document {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XEmbeddedObjectSupplier2 : public ::css::document::XEmbeddedObjectSupplier
{
public:
#if defined LIBO_INTERNAL_ONLY
    XEmbeddedObjectSupplier2() = default;
    XEmbeddedObjectSupplier2(XEmbeddedObjectSupplier2 const &) = default;
    XEmbeddedObjectSupplier2(XEmbeddedObjectSupplier2 &&) = default;
    XEmbeddedObjectSupplier2 & operator =(XEmbeddedObjectSupplier2 const &) = default;
    XEmbeddedObjectSupplier2 & operator =(XEmbeddedObjectSupplier2 &&) = default;
#endif


    // Attributes
    virtual ::sal_Int64 SAL_CALL getAspect() = 0;
    virtual void SAL_CALL setAspect( ::sal_Int64 _aspect ) = 0;
    virtual ::css::uno::Reference< ::css::graphic::XGraphic > SAL_CALL getReplacementGraphic() = 0;

    // Methods
    virtual ::css::uno::Reference< ::css::embed::XEmbeddedObject > SAL_CALL getExtendedControlOverEmbeddedObject() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XEmbeddedObjectSupplier2() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::document::XEmbeddedObjectSupplier2 const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::document::XEmbeddedObjectSupplier2 > *);

#endif
