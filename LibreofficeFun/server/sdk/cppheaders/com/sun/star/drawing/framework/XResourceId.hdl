#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XRESOURCEID_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XRESOURCEID_HDL

#include "sal/config.h"

#include "com/sun/star/drawing/framework/AnchorBindingMode.hdl"
namespace com { namespace sun { namespace star { namespace drawing { namespace framework { class XResourceId; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/util/URL.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XResourceId : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XResourceId() = default;
    XResourceId(XResourceId const &) = default;
    XResourceId(XResourceId &&) = default;
    XResourceId & operator =(XResourceId const &) = default;
    XResourceId & operator =(XResourceId &&) = default;
#endif


    // Methods
    virtual ::rtl::OUString SAL_CALL getResourceURL() = 0;
    virtual ::css::util::URL SAL_CALL getFullResourceURL() = 0;
    virtual ::sal_Bool SAL_CALL hasAnchor() = 0;
    virtual ::css::uno::Reference< ::css::drawing::framework::XResourceId > SAL_CALL getAnchor() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getAnchorURLs() = 0;
    virtual ::rtl::OUString SAL_CALL getResourceTypePrefix() = 0;
    virtual ::sal_Int16 SAL_CALL compareTo( const ::css::uno::Reference< ::css::drawing::framework::XResourceId >& xId ) = 0;
    virtual ::sal_Bool SAL_CALL isBoundTo( const ::css::uno::Reference< ::css::drawing::framework::XResourceId >& xAnchorId, ::css::drawing::framework::AnchorBindingMode eMode ) = 0;
    virtual ::sal_Bool SAL_CALL isBoundToURL( const ::rtl::OUString& AnchorURL, ::css::drawing::framework::AnchorBindingMode eMode ) = 0;
    virtual ::css::uno::Reference< ::css::drawing::framework::XResourceId > SAL_CALL clone() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XResourceId() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::framework::XResourceId const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::framework::XResourceId > *);

#endif
