#ifndef INCLUDED_COM_SUN_STAR_DRAWING_XSLIDEPREVIEWCACHE_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_XSLIDEPREVIEWCACHE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace container { class XIndexAccess; } } } }
namespace com { namespace sun { namespace star { namespace drawing { class XSlidePreviewCacheListener; } } } }
#include "com/sun/star/geometry/IntegerSize2D.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XBitmap; } } } }
namespace com { namespace sun { namespace star { namespace rendering { class XCanvas; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XSlidePreviewCache : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XSlidePreviewCache() = default;
    XSlidePreviewCache(XSlidePreviewCache const &) = default;
    XSlidePreviewCache(XSlidePreviewCache &&) = default;
    XSlidePreviewCache & operator =(XSlidePreviewCache const &) = default;
    XSlidePreviewCache & operator =(XSlidePreviewCache &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setDocumentSlides( const ::css::uno::Reference< ::css::container::XIndexAccess >& xSlides, const ::css::uno::Reference< ::css::uno::XInterface >& xDocument ) = 0;
    virtual void SAL_CALL setVisibleRange( ::sal_Int32 nFirstVisibleSlideIndex, ::sal_Int32 nLastVisibleSlideIndex ) = 0;
    virtual void SAL_CALL setPreviewSize( const ::css::geometry::IntegerSize2D& aSize ) = 0;
    virtual ::css::uno::Reference< ::css::rendering::XBitmap > SAL_CALL getSlidePreview( ::sal_Int32 nSlideIndex, const ::css::uno::Reference< ::css::rendering::XCanvas >& xCanvas ) = 0;
    virtual void SAL_CALL addPreviewCreationNotifyListener( const ::css::uno::Reference< ::css::drawing::XSlidePreviewCacheListener >& xListener ) = 0;
    virtual void SAL_CALL removePreviewCreationNotifyListener( const ::css::uno::Reference< ::css::drawing::XSlidePreviewCacheListener >& xListener ) = 0;
    virtual void SAL_CALL pause() = 0;
    virtual void SAL_CALL resume() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XSlidePreviewCache() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::XSlidePreviewCache const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::XSlidePreviewCache > *);

#endif
