#ifndef INCLUDED_COM_SUN_STAR_DRAWING_XLAYERMANAGER_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_XLAYERMANAGER_HDL

#include "sal/config.h"

#include "com/sun/star/container/XIndexAccess.hdl"
namespace com { namespace sun { namespace star { namespace drawing { class XLayer; } } } }
namespace com { namespace sun { namespace star { namespace drawing { class XShape; } } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLayerManager : public ::css::container::XIndexAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XLayerManager() = default;
    XLayerManager(XLayerManager const &) = default;
    XLayerManager(XLayerManager &&) = default;
    XLayerManager & operator =(XLayerManager const &) = default;
    XLayerManager & operator =(XLayerManager &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::drawing::XLayer > SAL_CALL insertNewByIndex( ::sal_Int32 nIndex ) = 0;
    virtual void SAL_CALL remove( const ::css::uno::Reference< ::css::drawing::XLayer >& xLayer ) = 0;
    virtual void SAL_CALL attachShapeToLayer( const ::css::uno::Reference< ::css::drawing::XShape >& xShape, const ::css::uno::Reference< ::css::drawing::XLayer >& xLayer ) = 0;
    virtual ::css::uno::Reference< ::css::drawing::XLayer > SAL_CALL getLayerForShape( const ::css::uno::Reference< ::css::drawing::XShape >& xShape ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLayerManager() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::XLayerManager const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::XLayerManager > *);

#endif
