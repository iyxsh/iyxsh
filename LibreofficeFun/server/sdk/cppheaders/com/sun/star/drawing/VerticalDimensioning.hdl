#ifndef INCLUDED_COM_SUN_STAR_DRAWING_VERTICALDIMENSIONING_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_VERTICALDIMENSIONING_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing {

#if defined LIBO_INTERNAL_ONLY

#if defined __GNUC__

enum class VerticalDimensioning
{

#else

enum class SAL_DLLPUBLIC_RTTI VerticalDimensioning
{

#endif

#else

enum SAL_DLLPUBLIC_RTTI VerticalDimensioning
{

#endif
    VerticalDimensioning_AUTO = 0,
    VerticalDimensioning_TOP = 1,
    VerticalDimensioning_CENTERED = 2,
    VerticalDimensioning_BOTTOM = 3,
    VerticalDimensioning_MAKE_FIXED_SIZE = SAL_MAX_ENUM
};

#if defined LIBO_INTERNAL_ONLY
constexpr auto VerticalDimensioning_AUTO = VerticalDimensioning::VerticalDimensioning_AUTO;
constexpr auto VerticalDimensioning_TOP = VerticalDimensioning::VerticalDimensioning_TOP;
constexpr auto VerticalDimensioning_CENTERED = VerticalDimensioning::VerticalDimensioning_CENTERED;
constexpr auto VerticalDimensioning_BOTTOM = VerticalDimensioning::VerticalDimensioning_BOTTOM;
#endif

inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::VerticalDimensioning const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::drawing::VerticalDimensioning *);

#endif
