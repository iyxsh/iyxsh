#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XRELOCATABLERESOURCE_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XRELOCATABLERESOURCE_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace drawing { namespace framework { class XResource; } } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XRelocatableResource : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XRelocatableResource() = default;
    XRelocatableResource(XRelocatableResource const &) = default;
    XRelocatableResource(XRelocatableResource &&) = default;
    XRelocatableResource & operator =(XRelocatableResource const &) = default;
    XRelocatableResource & operator =(XRelocatableResource &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL relocateToAnchor( const ::css::uno::Reference< ::css::drawing::framework::XResource >& xNewAnchor ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XRelocatableResource() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::framework::XRelocatableResource const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::framework::XRelocatableResource > *);

#endif
