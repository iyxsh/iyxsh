#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XTABBAR_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XTABBAR_HDL

#include "sal/config.h"

#include "com/sun/star/drawing/framework/TabBarButton.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XTabBar : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XTabBar() = default;
    XTabBar(XTabBar const &) = default;
    XTabBar(XTabBar &&) = default;
    XTabBar & operator =(XTabBar const &) = default;
    XTabBar & operator =(XTabBar &&) = default;
#endif


    // Methods
    virtual void SAL_CALL addTabBarButtonAfter( const ::css::drawing::framework::TabBarButton& aButton, const ::css::drawing::framework::TabBarButton& aAnchor ) = 0;
    virtual void SAL_CALL appendTabBarButton( const ::css::drawing::framework::TabBarButton& aButton ) = 0;
    virtual void SAL_CALL removeTabBarButton( const ::css::drawing::framework::TabBarButton& aButton ) = 0;
    virtual ::sal_Bool SAL_CALL hasTabBarButton( const ::css::drawing::framework::TabBarButton& aButton ) = 0;
    virtual ::css::uno::Sequence< ::css::drawing::framework::TabBarButton > SAL_CALL getTabBarButtons() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XTabBar() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::framework::XTabBar const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::framework::XTabBar > *);

#endif
