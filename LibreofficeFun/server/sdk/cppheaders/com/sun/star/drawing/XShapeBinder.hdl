#ifndef INCLUDED_COM_SUN_STAR_DRAWING_XSHAPEBINDER_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_XSHAPEBINDER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace drawing { class XShape; } } } }
namespace com { namespace sun { namespace star { namespace drawing { class XShapes; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XShapeBinder : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XShapeBinder() = default;
    XShapeBinder(XShapeBinder const &) = default;
    XShapeBinder(XShapeBinder &&) = default;
    XShapeBinder & operator =(XShapeBinder const &) = default;
    XShapeBinder & operator =(XShapeBinder &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::css::drawing::XShape > SAL_CALL bind( const ::css::uno::Reference< ::css::drawing::XShapes >& xShapes ) = 0;
    virtual void SAL_CALL unbind( const ::css::uno::Reference< ::css::drawing::XShape >& xShape ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XShapeBinder() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::XShapeBinder const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::XShapeBinder > *);

#endif
