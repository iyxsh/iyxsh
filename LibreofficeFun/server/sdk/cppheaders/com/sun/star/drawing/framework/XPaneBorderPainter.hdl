#ifndef INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XPANEBORDERPAINTER_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_FRAMEWORK_XPANEBORDERPAINTER_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Point.hdl"
#include "com/sun/star/awt/Rectangle.hdl"
#include "com/sun/star/drawing/framework/BorderType.hdl"
namespace com { namespace sun { namespace star { namespace rendering { class XCanvas; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing { namespace framework {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XPaneBorderPainter : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XPaneBorderPainter() = default;
    XPaneBorderPainter(XPaneBorderPainter const &) = default;
    XPaneBorderPainter(XPaneBorderPainter &&) = default;
    XPaneBorderPainter & operator =(XPaneBorderPainter const &) = default;
    XPaneBorderPainter & operator =(XPaneBorderPainter &&) = default;
#endif


    // Methods
    virtual ::css::awt::Rectangle SAL_CALL addBorder( const ::rtl::OUString& sPaneBorderStyleName, const ::css::awt::Rectangle& aRectangle, ::css::drawing::framework::BorderType eBorderType ) = 0;
    virtual ::css::awt::Rectangle SAL_CALL removeBorder( const ::rtl::OUString& sPaneBorderStyleName, const ::css::awt::Rectangle& aRectangle, ::css::drawing::framework::BorderType eBorderType ) = 0;
    virtual void SAL_CALL paintBorder( const ::rtl::OUString& sPaneBorderStyleName, const ::css::uno::Reference< ::css::rendering::XCanvas >& xCanvas, const ::css::awt::Rectangle& aOuterBorderRectangle, const ::css::awt::Rectangle& aRepaintArea, const ::rtl::OUString& sTitle ) = 0;
    virtual void SAL_CALL paintBorderWithCallout( const ::rtl::OUString& sPaneBorderStyleName, const ::css::uno::Reference< ::css::rendering::XCanvas >& xCanvas, const ::css::awt::Rectangle& aOuterBorderRectangle, const ::css::awt::Rectangle& aRepaintArea, const ::rtl::OUString& sTitle, const ::css::awt::Point& aCalloutAnchor ) = 0;
    virtual ::css::awt::Point SAL_CALL getCalloutOffset( const ::rtl::OUString& sPaneBorderStyleName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XPaneBorderPainter() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::framework::XPaneBorderPainter const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::framework::XPaneBorderPainter > *);

#endif
