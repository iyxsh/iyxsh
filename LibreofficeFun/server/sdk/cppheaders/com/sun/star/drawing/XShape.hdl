#ifndef INCLUDED_COM_SUN_STAR_DRAWING_XSHAPE_HDL
#define INCLUDED_COM_SUN_STAR_DRAWING_XSHAPE_HDL

#include "sal/config.h"

#include "com/sun/star/awt/Point.hdl"
#include "com/sun/star/awt/Size.hdl"
#include "com/sun/star/drawing/XShapeDescriptor.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace drawing {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XShape : public ::css::drawing::XShapeDescriptor
{
public:
#if defined LIBO_INTERNAL_ONLY
    XShape() = default;
    XShape(XShape const &) = default;
    XShape(XShape &&) = default;
    XShape & operator =(XShape const &) = default;
    XShape & operator =(XShape &&) = default;
#endif


    // Methods
    virtual ::css::awt::Point SAL_CALL getPosition() = 0;
    virtual void SAL_CALL setPosition( const ::css::awt::Point& aPosition ) = 0;
    virtual ::css::awt::Size SAL_CALL getSize() = 0;
    virtual void SAL_CALL setSize( const ::css::awt::Size& aSize ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XShape() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::drawing::XShape const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::drawing::XShape > *);

#endif
