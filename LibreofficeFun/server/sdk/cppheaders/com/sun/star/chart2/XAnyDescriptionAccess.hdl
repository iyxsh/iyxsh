#ifndef INCLUDED_COM_SUN_STAR_CHART2_XANYDESCRIPTIONACCESS_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XANYDESCRIPTIONACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/chart/XComplexDescriptionAccess.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAnyDescriptionAccess : public ::css::chart::XComplexDescriptionAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAnyDescriptionAccess() = default;
    XAnyDescriptionAccess(XAnyDescriptionAccess const &) = default;
    XAnyDescriptionAccess(XAnyDescriptionAccess &&) = default;
    XAnyDescriptionAccess & operator =(XAnyDescriptionAccess const &) = default;
    XAnyDescriptionAccess & operator =(XAnyDescriptionAccess &&) = default;
#endif


    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::uno::Any > > SAL_CALL getAnyRowDescriptions() = 0;
    virtual void SAL_CALL setAnyRowDescriptions( const ::css::uno::Sequence< ::css::uno::Sequence< ::css::uno::Any > >& rRowDescriptions ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::css::uno::Any > > SAL_CALL getAnyColumnDescriptions() = 0;
    virtual void SAL_CALL setAnyColumnDescriptions( const ::css::uno::Sequence< ::css::uno::Sequence< ::css::uno::Any > >& rColumnDescriptions ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAnyDescriptionAccess() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XAnyDescriptionAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XAnyDescriptionAccess > *);

#endif
