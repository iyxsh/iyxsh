#ifndef INCLUDED_COM_SUN_STAR_CHART2_XREGRESSIONCURVECALCULATOR_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_XREGRESSIONCURVECALCULATOR_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace chart2 { class XScaling; } } } }
#include "com/sun/star/geometry/RealPoint2D.hdl"
#include "com/sun/star/uno/XInterface.hdl"
namespace com { namespace sun { namespace star { namespace util { class XNumberFormatsSupplier; } } } }
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XRegressionCurveCalculator : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XRegressionCurveCalculator() = default;
    XRegressionCurveCalculator(XRegressionCurveCalculator const &) = default;
    XRegressionCurveCalculator(XRegressionCurveCalculator &&) = default;
    XRegressionCurveCalculator & operator =(XRegressionCurveCalculator const &) = default;
    XRegressionCurveCalculator & operator =(XRegressionCurveCalculator &&) = default;
#endif


    // Methods
    virtual void SAL_CALL setRegressionProperties( ::sal_Int32 degree, ::sal_Bool forceIntercept, double interceptValue, ::sal_Int32 period, ::sal_Int32 movingType ) = 0;
    virtual void SAL_CALL recalculateRegression( const ::css::uno::Sequence< double >& aXValues, const ::css::uno::Sequence< double >& aYValues ) = 0;
    virtual double SAL_CALL getCurveValue( double x ) = 0;
    virtual ::css::uno::Sequence< ::css::geometry::RealPoint2D > SAL_CALL getCurveValues( double min, double max, ::sal_Int32 nPointCount, const ::css::uno::Reference< ::css::chart2::XScaling >& xScalingX, const ::css::uno::Reference< ::css::chart2::XScaling >& xScalingY, ::sal_Bool bMaySkipPointsInCalculation ) = 0;
    virtual double SAL_CALL getCorrelationCoefficient() = 0;
    virtual ::rtl::OUString SAL_CALL getRepresentation() = 0;
    virtual ::rtl::OUString SAL_CALL getFormattedRepresentation( const ::css::uno::Reference< ::css::util::XNumberFormatsSupplier >& xNumFmtSupplier, ::sal_Int32 nNumberFormatKey, ::sal_Int32 nFormulaLength ) = 0;
    virtual void SAL_CALL setXYNames( const ::rtl::OUString& aXName, const ::rtl::OUString& aYName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XRegressionCurveCalculator() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::XRegressionCurveCalculator const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::XRegressionCurveCalculator > *);

#endif
