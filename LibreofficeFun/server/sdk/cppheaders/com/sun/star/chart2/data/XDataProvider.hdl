#ifndef INCLUDED_COM_SUN_STAR_CHART2_DATA_XDATAPROVIDER_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_DATA_XDATAPROVIDER_HDL

#include "sal/config.h"

#include "com/sun/star/beans/PropertyValue.hdl"
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataSequence; } } } } }
namespace com { namespace sun { namespace star { namespace chart2 { namespace data { class XDataSource; } } } } }
namespace com { namespace sun { namespace star { namespace sheet { class XRangeSelection; } } } }
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 { namespace data {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XDataProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XDataProvider() = default;
    XDataProvider(XDataProvider const &) = default;
    XDataProvider(XDataProvider &&) = default;
    XDataProvider & operator =(XDataProvider const &) = default;
    XDataProvider & operator =(XDataProvider &&) = default;
#endif


    // Methods
    virtual ::sal_Bool SAL_CALL createDataSourcePossible( const ::css::uno::Sequence< ::css::beans::PropertyValue >& aArguments ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::data::XDataSource > SAL_CALL createDataSource( const ::css::uno::Sequence< ::css::beans::PropertyValue >& aArguments ) = 0;
    virtual ::css::uno::Sequence< ::css::beans::PropertyValue > SAL_CALL detectArguments( const ::css::uno::Reference< ::css::chart2::data::XDataSource >& xDataSource ) = 0;
    virtual ::sal_Bool SAL_CALL createDataSequenceByRangeRepresentationPossible( const ::rtl::OUString& aRangeRepresentation ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::data::XDataSequence > SAL_CALL createDataSequenceByRangeRepresentation( const ::rtl::OUString& aRangeRepresentation ) = 0;
    virtual ::css::uno::Reference< ::css::chart2::data::XDataSequence > SAL_CALL createDataSequenceByValueArray( const ::rtl::OUString& aRole, const ::rtl::OUString& aValueArray, const ::rtl::OUString& aRoleQualifier ) = 0;
    virtual ::css::uno::Reference< ::css::sheet::XRangeSelection > SAL_CALL getRangeSelection() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XDataProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::data::XDataProvider const *);
} } } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart2::data::XDataProvider > *);

#endif
