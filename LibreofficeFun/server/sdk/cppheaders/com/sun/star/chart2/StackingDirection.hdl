#ifndef INCLUDED_COM_SUN_STAR_CHART2_STACKINGDIRECTION_HDL
#define INCLUDED_COM_SUN_STAR_CHART2_STACKINGDIRECTION_HDL

#include "sal/config.h"

#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart2 {

#if defined LIBO_INTERNAL_ONLY

#if defined __GNUC__

enum class StackingDirection
{

#else

enum class SAL_DLLPUBLIC_RTTI StackingDirection
{

#endif

#else

enum SAL_DLLPUBLIC_RTTI StackingDirection
{

#endif
    StackingDirection_NO_STACKING = 0,
    StackingDirection_Y_STACKING = 1,
    StackingDirection_Z_STACKING = 2,
    StackingDirection_MAKE_FIXED_SIZE = SAL_MAX_ENUM
};

#if defined LIBO_INTERNAL_ONLY
constexpr auto StackingDirection_NO_STACKING = StackingDirection::StackingDirection_NO_STACKING;
constexpr auto StackingDirection_Y_STACKING = StackingDirection::StackingDirection_Y_STACKING;
constexpr auto StackingDirection_Z_STACKING = StackingDirection::StackingDirection_Z_STACKING;
#endif

inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart2::StackingDirection const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::chart2::StackingDirection *);

#endif
