#ifndef INCLUDED_ORG_FREEDESKTOP_PACKAGEKIT_XQUERY_HDL
#define INCLUDED_ORG_FREEDESKTOP_PACKAGEKIT_XQUERY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace org { namespace freedesktop { namespace PackageKit {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XQuery : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XQuery() = default;
    XQuery(XQuery const &) = default;
    XQuery(XQuery &&) = default;
    XQuery & operator =(XQuery const &) = default;
    XQuery & operator =(XQuery &&) = default;
#endif


    // Methods
    virtual void SAL_CALL IsInstalled( const ::rtl::OUString& packageName, const ::rtl::OUString& interaction, ::sal_Bool& installed ) = 0;
    virtual void SAL_CALL SearchFile( const ::rtl::OUString& fileName, const ::rtl::OUString& interaction, ::sal_Bool& installed, ::rtl::OUString& packageName ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XQuery() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::org::freedesktop::PackageKit::XQuery const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::org::freedesktop::PackageKit::XQuery > *);

#endif
