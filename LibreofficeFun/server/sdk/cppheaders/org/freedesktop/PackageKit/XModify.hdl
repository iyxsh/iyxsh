#ifndef INCLUDED_ORG_FREEDESKTOP_PACKAGEKIT_XMODIFY_HDL
#define INCLUDED_ORG_FREEDESKTOP_PACKAGEKIT_XMODIFY_HDL

#include "sal/config.h"

#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace org { namespace freedesktop { namespace PackageKit {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XModify : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XModify() = default;
    XModify(XModify const &) = default;
    XModify(XModify &&) = default;
    XModify & operator =(XModify const &) = default;
    XModify & operator =(XModify &&) = default;
#endif


    // Methods
    virtual void SAL_CALL InstallPackageFiles( const ::css::uno::Sequence< ::rtl::OUString >& files, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallProvideFiles( const ::css::uno::Sequence< ::rtl::OUString >& files, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallCatalogs( const ::css::uno::Sequence< ::rtl::OUString >& files, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallPackageNames( const ::css::uno::Sequence< ::rtl::OUString >& packages, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallMimeTypes( const ::css::uno::Sequence< ::rtl::OUString >& mimeTypes, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallFontconfigResources( const ::css::uno::Sequence< ::rtl::OUString >& resources, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallGStreamerResources( const ::css::uno::Sequence< ::rtl::OUString >& resources, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallResources( const ::css::uno::Sequence< ::rtl::OUString >& types, const ::css::uno::Sequence< ::rtl::OUString >& resources, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL RemovePackageByFiles( const ::css::uno::Sequence< ::rtl::OUString >& files, const ::rtl::OUString& interaction ) = 0;
    virtual void SAL_CALL InstallPrinterDrivers( const ::css::uno::Sequence< ::rtl::OUString >& files, const ::rtl::OUString& interaction ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XModify() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::org::freedesktop::PackageKit::XModify const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::org::freedesktop::PackageKit::XModify > *);

#endif
