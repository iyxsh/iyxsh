#ifndef INCLUDED_OOO_VBA_XCOLLECTION_HDL
#define INCLUDED_OOO_VBA_XCOLLECTION_HDL

#include "sal/config.h"

#include "com/sun/star/container/XEnumerationAccess.hdl"
#include "com/sun/star/script/XDefaultMethod.hdl"
#include "ooo/vba/XHelperInterface.hdl"
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCollection : public ::ooo::vba::XHelperInterface, public ::css::script::XDefaultMethod, public ::css::container::XEnumerationAccess
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCollection() = default;
    XCollection(XCollection const &) = default;
    XCollection(XCollection &&) = default;
    XCollection & operator =(XCollection const &) = default;
    XCollection & operator =(XCollection &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getCount() = 0;

    // Methods
    virtual ::css::uno::Any SAL_CALL Item( const ::css::uno::Any& Index1, const ::css::uno::Any& Index2 ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCollection() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::XCollection const *);
} }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::XCollection > *);

#endif
