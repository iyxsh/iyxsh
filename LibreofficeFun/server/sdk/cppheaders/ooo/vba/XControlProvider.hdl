#ifndef INCLUDED_OOO_VBA_XCONTROLPROVIDER_HDL
#define INCLUDED_OOO_VBA_XCONTROLPROVIDER_HDL

#include "sal/config.h"

namespace com { namespace sun { namespace star { namespace drawing { class XControlShape; } } } }
namespace com { namespace sun { namespace star { namespace frame { class XModel; } } } }
#include "com/sun/star/uno/XInterface.hdl"
namespace ooo { namespace vba { namespace msforms { class XControl; } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XControlProvider : public ::css::uno::XInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XControlProvider() = default;
    XControlProvider(XControlProvider const &) = default;
    XControlProvider(XControlProvider &&) = default;
    XControlProvider & operator =(XControlProvider const &) = default;
    XControlProvider & operator =(XControlProvider &&) = default;
#endif


    // Methods
    virtual ::css::uno::Reference< ::ooo::vba::msforms::XControl > SAL_CALL createControl( const ::css::uno::Reference< ::css::drawing::XControlShape >& xControl, const ::css::uno::Reference< ::css::frame::XModel >& xDocOwner ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XControlProvider() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::XControlProvider const *);
} }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::XControlProvider > *);

#endif
