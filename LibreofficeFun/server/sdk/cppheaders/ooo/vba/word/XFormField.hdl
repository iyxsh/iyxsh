#ifndef INCLUDED_OOO_VBA_WORD_XFORMFIELD_HDL
#define INCLUDED_OOO_VBA_WORD_XFORMFIELD_HDL

#include "sal/config.h"

#include "com/sun/star/script/XDefaultProperty.hdl"
#include "ooo/vba/XHelperInterface.hdl"
namespace ooo { namespace vba { namespace word { class XRange; } } }
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba { namespace word {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFormField : public ::ooo::vba::XHelperInterface, public ::css::script::XDefaultProperty
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFormField() = default;
    XFormField(XFormField const &) = default;
    XFormField(XFormField &&) = default;
    XFormField & operator =(XFormField const &) = default;
    XFormField & operator =(XFormField &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getType() = 0;
    virtual ::sal_Bool SAL_CALL getCalculateOnExit() = 0;
    virtual void SAL_CALL setCalculateOnExit( ::sal_Bool _calculateonexit ) = 0;
    virtual ::rtl::OUString SAL_CALL getResult() = 0;
    virtual void SAL_CALL setResult( const ::rtl::OUString& _result ) = 0;
    virtual ::sal_Bool SAL_CALL getEnabled() = 0;
    virtual void SAL_CALL setEnabled( ::sal_Bool _enabled ) = 0;
    virtual ::rtl::OUString SAL_CALL getEntryMacro() = 0;
    virtual void SAL_CALL setEntryMacro( const ::rtl::OUString& _entrymacro ) = 0;
    virtual ::rtl::OUString SAL_CALL getExitMacro() = 0;
    virtual void SAL_CALL setExitMacro( const ::rtl::OUString& _exitmacro ) = 0;
    virtual ::rtl::OUString SAL_CALL getHelpText() = 0;
    virtual void SAL_CALL setHelpText( const ::rtl::OUString& _helptext ) = 0;
    virtual ::sal_Bool SAL_CALL getOwnHelp() = 0;
    virtual void SAL_CALL setOwnHelp( ::sal_Bool _ownhelp ) = 0;
    virtual ::rtl::OUString SAL_CALL getName() = 0;
    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) = 0;
    virtual ::rtl::OUString SAL_CALL getStatusText() = 0;
    virtual void SAL_CALL setStatusText( const ::rtl::OUString& _statustext ) = 0;
    virtual ::sal_Bool SAL_CALL getOwnStatus() = 0;
    virtual void SAL_CALL setOwnStatus( ::sal_Bool _ownstatus ) = 0;

    // Methods
    virtual ::css::uno::Any SAL_CALL CheckBox() = 0;
    virtual ::css::uno::Any SAL_CALL DropDown() = 0;
    virtual ::css::uno::Any SAL_CALL TextInput() = 0;
    virtual ::css::uno::Any SAL_CALL Next() = 0;
    virtual ::css::uno::Any SAL_CALL Previous() = 0;
    virtual ::css::uno::Reference< ::ooo::vba::word::XRange > SAL_CALL Range() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFormField() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::word::XFormField const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::word::XFormField > *);

#endif
