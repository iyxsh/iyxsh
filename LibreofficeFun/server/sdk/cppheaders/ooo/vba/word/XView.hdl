#ifndef INCLUDED_OOO_VBA_WORD_XVIEW_HDL
#define INCLUDED_OOO_VBA_WORD_XVIEW_HDL

#include "sal/config.h"

#include "ooo/vba/XHelperInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba { namespace word {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XView : public ::ooo::vba::XHelperInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XView() = default;
    XView(XView const &) = default;
    XView(XView &&) = default;
    XView & operator =(XView const &) = default;
    XView & operator =(XView &&) = default;
#endif


    // Attributes
    virtual ::sal_Int32 SAL_CALL getSeekView() = 0;
    virtual void SAL_CALL setSeekView( ::sal_Int32 _seekview ) = 0;
    virtual ::sal_Bool SAL_CALL getShowAll() = 0;
    virtual void SAL_CALL setShowAll( ::sal_Bool _showall ) = 0;
    virtual ::sal_Int32 SAL_CALL getSplitSpecial() = 0;
    virtual void SAL_CALL setSplitSpecial( ::sal_Int32 _splitspecial ) = 0;
    virtual ::sal_Bool SAL_CALL getTableGridLines() = 0;
    virtual void SAL_CALL setTableGridLines( ::sal_Bool _tablegridlines ) = 0;
    virtual ::sal_Int32 SAL_CALL getType() = 0;
    virtual void SAL_CALL setType( ::sal_Int32 _type ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XView() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::word::XView const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::word::XView > *);

#endif
