#ifndef INCLUDED_OOO_VBA_EXCEL_XFORMAT_HDL
#define INCLUDED_OOO_VBA_EXCEL_XFORMAT_HDL

#include "sal/config.h"

#include "ooo/vba/XHelperInterface.hdl"
namespace ooo { namespace vba { namespace excel { class XFont; } } }
namespace ooo { namespace vba { namespace excel { class XInterior; } } }
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba { namespace excel {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XFormat : public ::ooo::vba::XHelperInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XFormat() = default;
    XFormat(XFormat const &) = default;
    XFormat(XFormat &&) = default;
    XFormat & operator =(XFormat const &) = default;
    XFormat & operator =(XFormat &&) = default;
#endif


    // Methods
    virtual ::css::uno::Any SAL_CALL Borders( const ::css::uno::Any& Item ) = 0;
    virtual ::css::uno::Reference< ::ooo::vba::excel::XFont > SAL_CALL Font() = 0;
    virtual ::css::uno::Reference< ::ooo::vba::excel::XInterior > SAL_CALL Interior() = 0;
    virtual void SAL_CALL setNumberFormat( const ::css::uno::Any& NumberFormat ) = 0;
    virtual ::css::uno::Any SAL_CALL getNumberFormat() = 0;
    virtual void SAL_CALL setNumberFormatLocal( const ::css::uno::Any& NumberFormatLocal ) = 0;
    virtual ::css::uno::Any SAL_CALL getNumberFormatLocal() = 0;
    virtual void SAL_CALL setIndentLevel( const ::css::uno::Any& IndentLevel ) = 0;
    virtual ::css::uno::Any SAL_CALL getIndentLevel() = 0;
    virtual void SAL_CALL setHorizontalAlignment( const ::css::uno::Any& HorizontalAlignment ) = 0;
    virtual ::css::uno::Any SAL_CALL getHorizontalAlignment() = 0;
    virtual void SAL_CALL setVerticalAlignment( const ::css::uno::Any& VerticalAlignment ) = 0;
    virtual ::css::uno::Any SAL_CALL getVerticalAlignment() = 0;
    virtual void SAL_CALL setOrientation( const ::css::uno::Any& Orientation ) = 0;
    virtual ::css::uno::Any SAL_CALL getOrientation() = 0;
    virtual void SAL_CALL setShrinkToFit( const ::css::uno::Any& ShrinkToFit ) = 0;
    virtual ::css::uno::Any SAL_CALL getShrinkToFit() = 0;
    virtual void SAL_CALL setWrapText( const ::css::uno::Any& WrapText ) = 0;
    virtual ::css::uno::Any SAL_CALL getWrapText() = 0;
    virtual void SAL_CALL setLocked( const ::css::uno::Any& Locked ) = 0;
    virtual ::css::uno::Any SAL_CALL getLocked() = 0;
    virtual void SAL_CALL setFormulaHidden( const ::css::uno::Any& FormulaHidden ) = 0;
    virtual ::css::uno::Any SAL_CALL getFormulaHidden() = 0;
    virtual void SAL_CALL setMergeCells( const ::css::uno::Any& MergeCells ) = 0;
    virtual ::css::uno::Any SAL_CALL getMergeCells() = 0;
    virtual void SAL_CALL setReadingOrder( const ::css::uno::Any& ReadingOrder ) = 0;
    virtual ::css::uno::Any SAL_CALL getReadingOrder() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XFormat() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::excel::XFormat const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::excel::XFormat > *);

#endif
