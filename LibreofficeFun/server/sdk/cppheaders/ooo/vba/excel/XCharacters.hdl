#ifndef INCLUDED_OOO_VBA_EXCEL_XCHARACTERS_HDL
#define INCLUDED_OOO_VBA_EXCEL_XCHARACTERS_HDL

#include "sal/config.h"

#include "ooo/vba/XHelperInterface.hdl"
namespace ooo { namespace vba { namespace excel { class XFont; } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba { namespace excel {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XCharacters : public ::ooo::vba::XHelperInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XCharacters() = default;
    XCharacters(XCharacters const &) = default;
    XCharacters(XCharacters &&) = default;
    XCharacters & operator =(XCharacters const &) = default;
    XCharacters & operator =(XCharacters &&) = default;
#endif


    // Attributes
    virtual ::rtl::OUString SAL_CALL getCaption() = 0;
    virtual void SAL_CALL setCaption( const ::rtl::OUString& _caption ) = 0;
    virtual ::sal_Int32 SAL_CALL getCount() = 0;
    virtual ::rtl::OUString SAL_CALL getText() = 0;
    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) = 0;
    virtual ::css::uno::Reference< ::ooo::vba::excel::XFont > SAL_CALL getFont() = 0;
    virtual void SAL_CALL setFont( const ::css::uno::Reference< ::ooo::vba::excel::XFont >& _font ) = 0;

    // Methods
    virtual void SAL_CALL Insert( const ::rtl::OUString& String ) = 0;
    virtual void SAL_CALL Delete() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XCharacters() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::excel::XCharacters const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::excel::XCharacters > *);

#endif
