#ifndef INCLUDED_OOO_VBA_EXCEL_XAXIS_HDL
#define INCLUDED_OOO_VBA_EXCEL_XAXIS_HDL

#include "sal/config.h"

#include "ooo/vba/XHelperInterface.hdl"
namespace ooo { namespace vba { namespace excel { class XAxisTitle; } } }
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba { namespace excel {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XAxis : public ::ooo::vba::XHelperInterface
{
public:
#if defined LIBO_INTERNAL_ONLY
    XAxis() = default;
    XAxis(XAxis const &) = default;
    XAxis(XAxis &&) = default;
    XAxis & operator =(XAxis const &) = default;
    XAxis & operator =(XAxis &&) = default;
#endif


    // Methods
    virtual void SAL_CALL Delete() = 0;
    virtual ::css::uno::Reference< ::ooo::vba::excel::XAxisTitle > SAL_CALL getAxisTitle() = 0;
    virtual void SAL_CALL setDisplayUnit( ::sal_Int32 DisplayUnit ) = 0;
    virtual ::sal_Int32 SAL_CALL getDisplayUnit() = 0;
    virtual void SAL_CALL setCrosses( ::sal_Int32 Crosses ) = 0;
    virtual ::sal_Int32 SAL_CALL getCrosses() = 0;
    virtual void SAL_CALL setCrossesAt( double CrossesAt ) = 0;
    virtual double SAL_CALL getCrossesAt() = 0;
    virtual void SAL_CALL setType( ::sal_Int32 Type ) = 0;
    virtual ::sal_Int32 SAL_CALL getType() = 0;
    virtual void SAL_CALL setHasTitle( ::sal_Bool HasTitle ) = 0;
    virtual ::sal_Bool SAL_CALL getHasTitle() = 0;
    virtual void SAL_CALL setMinorUnit( double MinorUnit ) = 0;
    virtual double SAL_CALL getMinorUnit() = 0;
    virtual void SAL_CALL setMinorUnitIsAuto( ::sal_Bool MinorUnitIsAuto ) = 0;
    virtual ::sal_Bool SAL_CALL getMinorUnitIsAuto() = 0;
    virtual void SAL_CALL setReversePlotOrder( ::sal_Bool ReversePlotOrder ) = 0;
    virtual ::sal_Bool SAL_CALL getReversePlotOrder() = 0;
    virtual void SAL_CALL setMajorUnit( double MajorUnit ) = 0;
    virtual double SAL_CALL getMajorUnit() = 0;
    virtual void SAL_CALL setMajorUnitIsAuto( ::sal_Bool MajorUnitIsAuto ) = 0;
    virtual ::sal_Bool SAL_CALL getMajorUnitIsAuto() = 0;
    virtual void SAL_CALL setMaximumScale( double MaximumScale ) = 0;
    virtual double SAL_CALL getMaximumScale() = 0;
    virtual void SAL_CALL setMaximumScaleIsAuto( ::sal_Bool MaximumScaleIsAuto ) = 0;
    virtual ::sal_Bool SAL_CALL getMaximumScaleIsAuto() = 0;
    virtual void SAL_CALL setMinimumScale( double MinimumScale ) = 0;
    virtual double SAL_CALL getMinimumScale() = 0;
    virtual void SAL_CALL setMinimumScaleIsAuto( ::sal_Bool MinimumScaleIsAuto ) = 0;
    virtual ::sal_Bool SAL_CALL getMinimumScaleIsAuto() = 0;
    virtual ::sal_Int32 SAL_CALL getAxisGroup() = 0;
    virtual void SAL_CALL setScaleType( ::sal_Int32 ScaleType ) = 0;
    virtual ::sal_Int32 SAL_CALL getScaleType() = 0;
    virtual double SAL_CALL getHeight() = 0;
    virtual void SAL_CALL setHeight( double height ) = 0;
    virtual double SAL_CALL getWidth() = 0;
    virtual void SAL_CALL setWidth( double width ) = 0;
    virtual double SAL_CALL getTop() = 0;
    virtual void SAL_CALL setTop( double top ) = 0;
    virtual double SAL_CALL getLeft() = 0;
    virtual void SAL_CALL setLeft( double left ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XAxis() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::excel::XAxis const *);
} } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::excel::XAxis > *);

#endif
