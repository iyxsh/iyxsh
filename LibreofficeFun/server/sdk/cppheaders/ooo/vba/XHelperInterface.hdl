#ifndef INCLUDED_OOO_VBA_XHELPERINTERFACE_HDL
#define INCLUDED_OOO_VBA_XHELPERINTERFACE_HDL

#include "sal/config.h"

#include "com/sun/star/lang/XServiceInfo.hdl"
namespace ooo { namespace vba { class XHelperInterface; } }
#include "com/sun/star/uno/Any.h"
#include "com/sun/star/uno/Reference.h"
#include "cppu/macros.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace ooo { namespace vba {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XHelperInterface : public ::css::lang::XServiceInfo
{
public:
#if defined LIBO_INTERNAL_ONLY
    XHelperInterface() = default;
    XHelperInterface(XHelperInterface const &) = default;
    XHelperInterface(XHelperInterface &&) = default;
    XHelperInterface & operator =(XHelperInterface const &) = default;
    XHelperInterface & operator =(XHelperInterface &&) = default;
#endif


    // Methods
    virtual ::sal_Int32 SAL_CALL getCreator() = 0;
    virtual ::css::uno::Reference< ::ooo::vba::XHelperInterface > SAL_CALL getParent() = 0;
    virtual ::css::uno::Any SAL_CALL Application() = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XHelperInterface() SAL_NOEXCEPT {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::ooo::vba::XHelperInterface const *);
} }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::ooo::vba::XHelperInterface > *);

#endif
